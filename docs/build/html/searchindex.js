Search.setIndex({"docnames": ["index", "source/autots", "source/autots.datasets", "source/autots.evaluator", "source/autots.models", "source/autots.templates", "source/autots.tools", "source/intro", "source/modules", "source/tutorial"], "filenames": ["index.rst", "source/autots.rst", "source/autots.datasets.rst", "source/autots.evaluator.rst", "source/autots.models.rst", "source/autots.templates.rst", "source/autots.tools.rst", "source/intro.rst", "source/modules.rst", "source/tutorial.rst"], "titles": ["AutoTS", "autots package", "autots.datasets package", "autots.evaluator package", "autots.models package", "autots.templates package", "autots.tools package", "Intro", "autots", "Tutorial"], "terms": {"i": [0, 1, 2, 3, 4, 6, 7, 9], "an": [0, 1, 2, 3, 4, 6, 7, 9], "autom": [0, 1, 3, 7, 9], "time": [0, 1, 3, 4, 6, 7, 9], "seri": [0, 1, 2, 3, 4, 6, 7], "forecast": [0, 1, 2, 3, 4, 6, 7], "packag": [0, 7, 8], "python": [0, 1, 3, 4, 6, 7, 9], "pip": [0, 2, 7, 9], "requir": [0, 1, 2, 3, 4, 6, 7], "3": [0, 1, 3, 4, 5, 6, 9], "6": [0, 1, 3, 5, 6, 9], "numpi": [0, 1, 3, 4, 6, 9], "panda": [0, 1, 3, 4, 6, 7, 9], "statsmodel": [0, 1, 6, 8, 9], "scikit": [0, 4, 6, 7, 9], "learn": [0, 1, 4, 6, 7, 9], "intro": 0, "content": [0, 8], "basic": [0, 1, 3, 5, 6, 8, 9], "us": [0, 1, 2, 3, 4, 6], "tip": [0, 9], "speed": [0, 1, 3, 4], "larg": [0, 1, 4, 6, 9], "data": [0, 1, 2, 3, 4, 6], "how": [0, 1, 3, 4, 6, 9], "contribut": [0, 1, 3, 9], "process": [0, 1, 3, 4, 6], "tutori": [0, 7], "extend": [0, 6, 7], "deploy": 0, "templat": [0, 1, 3, 4, 7, 8], "import": [0, 1, 2, 3, 5, 6, 7], "export": [0, 1, 2, 3, 4, 5, 7], "depend": [0, 1, 3, 4, 6, 7], "version": [0, 1, 3, 4, 6], "caveat": 0, "advic": 0, "simul": [0, 4, 7], "event": [0, 1, 2, 3, 7], "risk": [0, 1, 3, 7], "anomali": [0, 1, 3, 4, 6, 8], "detect": [0, 1, 3, 6, 8], "transform": [0, 1, 3, 4, 7, 8], "independ": [0, 4, 6, 7], "model": [0, 1, 3, 5, 6, 7, 8], "index": [0, 1, 2, 3, 4, 5, 6, 9], "search": [0, 1, 2, 3, 4, 7, 9], "page": [0, 1, 2], "dataset": [1, 3, 4, 6, 7, 8, 9], "submodul": [1, 8], "fred": [1, 8], "get_fred_data": [1, 2], "load_artifici": [1, 2, 8], "load_daili": [1, 2, 7, 8, 9], "load_hourli": [1, 2, 8, 9], "load_linear": [1, 2, 8], "load_live_daili": [1, 2, 8, 9], "load_monthli": [1, 2, 8, 9], "load_sin": [1, 2, 8], "load_weekdai": [1, 2, 8], "load_weekli": [1, 2, 8], "load_yearli": [1, 2, 8], "load_zero": [1, 2], "evalu": [1, 4, 5, 7, 8, 9], "anomaly_detector": [1, 4, 8, 9], "anomalydetector": [1, 3, 8, 9], "fit": [1, 3, 4, 6, 7, 8, 9], "fit_anomaly_classifi": [1, 3, 6, 8], "get_new_param": [1, 3, 4, 6, 8, 9], "plot": [1, 3, 4, 7, 8, 9], "score_to_anomali": [1, 3, 6, 8], "holidaydetector": [1, 3, 6, 8, 9], "dates_to_holidai": [1, 3, 4, 6, 8, 9], "plot_anomali": [1, 3, 8], "auto_model": [1, 5, 8], "modelmonst": [1, 3], "modelpredict": [1, 3, 8], "fit_data": [1, 3, 4, 8], "fit_predict": [1, 3, 8], "predict": [1, 3, 4, 6, 7, 8, 9], "newgenetictempl": [1, 3], "randomtempl": [1, 3], "templateevalobject": [1, 3], "full_mae_id": [1, 3, 4], "full_mae_error": [1, 3, 4], "concat": [1, 3, 5, 6], "load": [1, 2, 3, 4, 5, 7, 9], "save": [1, 3, 4, 6, 7], "templatewizard": [1, 3], "uniquetempl": [1, 3], "back_forecast": [1, 3, 8], "create_model_id": [1, 3], "dict_recombin": [1, 3], "generate_scor": [1, 3], "generate_score_per_seri": [1, 3], "horizontal_template_to_model_list": [1, 3], "model_forecast": [1, 3, 8, 9], "random_model": [1, 3], "remove_leading_zero": [1, 3, 9], "trans_dict_recomb": [1, 3], "unpack_ensemble_model": [1, 3, 5], "validation_aggreg": [1, 3], "auto_t": [1, 8, 9], "best_model": [1, 3, 5, 8, 9], "best_model_nam": [1, 3, 8, 9], "best_model_param": [1, 3, 8, 9], "best_model_transformation_param": [1, 3, 8, 9], "best_model_ensembl": [1, 3, 8, 9], "regression_check": [1, 3, 8], "df_wide_numer": [1, 3, 7, 8, 9], "score_per_seri": [1, 3, 4, 8], "best_model_per_series_map": [1, 3, 8], "best_model_per_series_scor": [1, 3, 8], "create_unpredictability_scor": [1, 3, 4, 8], "diagnose_param": [1, 3, 8], "expand_horizont": [1, 3, 8], "export_best_model": [1, 3, 8], "export_templ": [1, 3, 5, 8, 9], "failure_r": [1, 3, 8], "get_metric_corr": [1, 3, 8], "get_params_from_id": [1, 3, 8], "get_top_n_count": [1, 3, 8], "horizontal_per_gener": [1, 3, 8], "horizontal_to_df": [1, 3, 8], "import_best_model": [1, 3, 8], "import_result": [1, 3, 7, 8], "import_templ": [1, 3, 8, 9], "list_failed_model_typ": [1, 3, 8], "load_templ": [1, 3, 8], "mosaic_to_df": [1, 3, 8, 9], "parse_best_model": [1, 3, 8], "plot_back_forecast": [1, 3, 8], "plot_backforecast": [1, 3, 8, 9], "plot_chosen_transform": [1, 3, 8], "plot_failure_r": [1, 3, 8], "plot_generation_loss": [1, 3, 8, 9], "plot_horizont": [1, 3, 8, 9], "plot_horizontal_model_count": [1, 3, 8], "plot_horizontal_per_gener": [1, 3, 8, 9], "plot_horizontal_transform": [1, 3, 8, 9], "plot_metric_corr": [1, 3, 8], "plot_model_failure_r": [1, 3, 8], "plot_mosa": [1, 3, 8], "plot_per_series_error": [1, 3, 8, 9], "plot_per_series_map": [1, 3, 8, 9], "plot_per_series_smap": [1, 3, 8], "plot_series_corr": [1, 3, 8], "plot_transformer_by_class": [1, 3, 8], "plot_transformer_failure_r": [1, 3, 8], "plot_unpredict": [1, 3, 8], "plot_valid": [1, 3, 8], "result": [1, 2, 3, 4, 6, 7, 8, 9], "retrieve_validation_forecast": [1, 3, 8], "save_templ": [1, 3, 8], "validation_agg": [1, 3, 8], "initial_result": [1, 3, 4, 8], "model_result": [1, 3, 4, 5, 7, 8], "error_correl": [1, 3], "fake_regressor": [1, 3, 9], "benchmark": [1, 8], "run": [1, 2, 3, 4, 5, 6, 7], "event_forecast": [1, 8], "eventriskforecast": [1, 3, 8, 9], "predict_histor": [1, 3, 8, 9], "generate_result_window": [1, 3, 8], "generate_risk_arrai": [1, 3, 8], "generate_historic_risk_arrai": [1, 3, 8, 9], "set_limit": [1, 3, 8], "plot_ev": [1, 3, 8, 9], "extract_result_window": [1, 3], "extract_window_index": [1, 3], "set_limit_forecast": [1, 3], "set_limit_forecast_histor": [1, 3], "metric": [1, 2, 4, 7, 8], "array_last_v": [1, 3], "chi_squared_hist_distribution_loss": [1, 3], "contain": [1, 3, 4, 6, 9], "contour": [1, 3, 4, 9], "default_scal": [1, 3], "dwae": [1, 3], "full_metric_evalu": [1, 3], "kde": [1, 3], "kde_kl_dist": [1, 3], "kl_diverg": [1, 3], "linear": [1, 3, 4, 6, 9], "mae": [1, 3, 4, 9], "mda": [1, 3, 9], "mean_absolute_differential_error": [1, 3], "mean_absolute_error": [1, 3], "meda": [1, 3], "median_absolute_error": [1, 3], "mlvb": [1, 3], "mqae": [1, 3, 4], "msle": [1, 3], "numpy_ffil": [1, 3], "oda": [1, 3], "pinball_loss": [1, 3], "precomp_wasserstein": [1, 3], "qae": [1, 3], "rmse": [1, 3, 4, 9], "root_mean_square_error": [1, 3], "rp": [1, 3], "scaled_pinball_loss": [1, 3], "smape": [1, 3, 4, 9], "smooth": [1, 3, 4, 6, 9], "spl": [1, 3, 4, 9], "symmetric_mean_absolute_percentage_error": [1, 3], "threshold_loss": [1, 3], "unsorted_wasserstein": [1, 3], "wasserstein": [1, 3], "valid": [1, 4, 7, 8], "extract_seasonal_val_period": [1, 3], "generate_validation_indic": [1, 3], "validate_num_valid": [1, 3], "arch": [1, 3, 8, 9], "get_param": [1, 4, 8], "base": [1, 3, 6, 8, 9], "modelobject": [1, 3, 4], "basic_profil": [1, 4], "create_forecast_index": [1, 4, 8], "predictionobject": [1, 3, 4], "model_nam": [1, 3, 4, 9], "model_paramet": [1, 4], "transformation_paramet": [1, 4], "upper_forecast": [1, 3, 4, 6, 7, 9], "lower_forecast": [1, 3, 4, 6, 7, 9], "long_form_result": [1, 4, 9], "total_runtim": [1, 4], "apply_constraint": [1, 4], "extract_ensemble_runtim": [1, 4], "plot_df": [1, 4], "plot_ensemble_runtim": [1, 4], "plot_grid": [1, 4], "calculate_peak_dens": [1, 4], "create_seaborn_palette_from_cmap": [1, 4], "extract_single_series_from_horz": [1, 4], "extract_single_transform": [1, 4], "plot_distribut": [1, 4], "averagevaluena": [1, 3, 4, 5, 9], "balltreemultivariatemotif": [1, 4, 9], "balltreeregressionmotif": [1, 4, 9], "basiclinearmodel": [1, 4, 9], "base_scal": [1, 4, 8], "coefficient_summari": [1, 4], "create_x": [1, 4], "process_compon": [1, 4, 6, 8], "return_compon": [1, 3, 4, 8], "scale_data": [1, 4, 8], "to_origin_spac": [1, 4, 8], "constantna": [1, 4, 9], "fft": [1, 4, 8, 9], "kalmanstatespac": [1, 4, 9], "cost_funct": [1, 4], "tune_observational_nois": [1, 4], "lastvaluena": [1, 3, 4, 9], "metricmotif": [1, 3, 4, 9], "motif": [1, 3, 4, 9], "motifsimul": [1, 4, 9], "nvar": [1, 4, 9], "seasonalna": [1, 3, 4, 9], "seasonalitymotif": [1, 3, 4, 5, 9], "sectionalmotif": [1, 3, 4, 9], "tvvar": [1, 4, 5, 9], "apply_beta_threshold": [1, 4], "create_var_featur": [1, 4], "empty_scal": [1, 4], "zeroesna": [1, 3, 4], "looped_motif": [1, 4], "predict_reservoir": [1, 4], "cassandra": [1, 6, 8, 9], "bayesianmultioutputregress": [1, 4], "sample_posterior": [1, 4], "plot_forecast": [1, 4, 8], "plot_compon": [1, 4, 8], "plot_trend": [1, 4, 8], "analyze_trend": [1, 4, 8], "auto_fit": [1, 4, 8], "compare_actual_compon": [1, 4, 8], "create_t": [1, 4, 8], "cross_valid": [1, 4, 8, 9], "feature_import": [1, 4, 8], "next_fit": [1, 4, 8], "plot_th": [1, 4, 8], "predict_new_product": [1, 4, 8], "rolling_trend": [1, 4, 8], "treatment_causal_impact": [1, 4, 8], "trend_analysi": [1, 4, 8], "holiday_detector": [1, 4, 8], "score": [1, 3, 4, 5, 6, 7, 8, 9], "holiday_count": [1, 4, 8], "holidai": [1, 2, 3, 4, 8, 9], "param": [1, 2, 3, 4, 6, 7, 8, 9], "x_arrai": [1, 4, 8], "predict_x_arrai": [1, 4, 8], "trend_train": [1, 4, 8], "predicted_trend": [1, 4, 8], "clean_regressor": [1, 4], "cost_function_dwa": [1, 4], "cost_function_l1": [1, 4], "cost_function_l1_posit": [1, 4], "cost_function_l2": [1, 4], "cost_function_quantil": [1, 4], "fit_linear_model": [1, 4], "lstsq_minim": [1, 4], "lstsq_solv": [1, 4], "dnn": [1, 8], "elasticnetwork": [1, 4], "kerasrnn": [1, 4], "transformer_build_model": [1, 4], "transformer_encod": [1, 4], "ensembl": [1, 3, 5, 7, 8], "bestnensembl": [1, 4], "distensembl": [1, 4], "ensembleforecast": [1, 4], "ensembletemplategener": [1, 4], "hdistensembl": [1, 4], "horizontalensembl": [1, 4], "horizontaltemplategener": [1, 4], "mosaicensembl": [1, 4], "find_pattern": [1, 4], "generalize_horizont": [1, 4], "generate_crosshair_scor": [1, 4], "generate_crosshair_score_list": [1, 4], "generate_mosaic_templ": [1, 4], "horizontal_classifi": [1, 4], "horizontal_xi": [1, 4], "is_horizont": [1, 4], "is_mosa": [1, 4], "mlens_help": [1, 4], "mosaic_classifi": [1, 4], "mosaic_or_horizont": [1, 4], "mosaic_to_horizont": [1, 4, 9], "mosaic_xi": [1, 4], "n_limited_horz": [1, 4], "parse_forecast_length": [1, 4], "parse_horizont": [1, 4], "parse_mosa": [1, 4], "process_mosaic_arrai": [1, 4], "gluont": [1, 3, 8, 9], "greykit": [1, 8, 9], "seek_the_oracl": [1, 4], "matrix_var": [1, 8], "dmd": [1, 4, 9], "latc": [1, 4, 9], "mar": [1, 4, 9], "rrvar": [1, 4, 9], "tmf": [1, 4, 9], "conj_grad_w": [1, 4], "conj_grad_x": [1, 4], "dmd4cast": [1, 4], "dmd_forecast": [1, 4], "ell_w": [1, 4], "ell_x": [1, 4], "generate_psi": [1, 4], "latc_imput": [1, 4], "latc_predictor": [1, 4], "mat2ten": [1, 4], "svt_tnn": [1, 4], "ten2mat": [1, 4], "update_cg": [1, 4], "var": [1, 4, 9], "var4cast": [1, 4], "mlensembl": [1, 8], "create_featur": [1, 4], "model_list": [1, 3, 7, 8, 9], "auto_model_list": [1, 4], "model_list_to_dict": [1, 4], "neural_forecast": [1, 8], "neuralforecast": [1, 4, 9], "prophet": [1, 3, 6, 8, 9], "fbprophet": [1, 4, 9], "neuralprophet": [1, 4, 9], "get_changepoint": [1, 4], "pytorch": [1, 8, 9], "pytorchforecast": [1, 4, 9], "sklearn": [1, 6, 7, 8, 9], "componentanalysi": [1, 4, 9], "datepartregress": [1, 3, 4, 5, 6, 9], "multivariateregress": [1, 4, 5, 9], "preprocessingregress": [1, 4, 9], "randomfourierencod": [1, 4], "rollingregress": [1, 4, 9], "univariateregress": [1, 4, 9], "vectorizedmultioutputgpr": [1, 4], "predict_proba": [1, 4], "windowregress": [1, 4, 9], "generate_classifier_param": [1, 4], "generate_regressor_param": [1, 4], "retrieve_classifi": [1, 4], "retrieve_regressor": [1, 4], "rolling_x_regressor": [1, 4], "rolling_x_regressor_regressor": [1, 4], "ardl": [1, 4, 9], "arima": [1, 4, 5, 6, 9], "dynamicfactor": [1, 4, 9], "dynamicfactormq": [1, 4, 9], "et": [1, 3, 4, 6, 9], "glm": [1, 3, 4, 6, 9], "gl": [1, 3, 4, 6, 9], "theta": [1, 4, 5, 6, 9], "unobservedcompon": [1, 4, 9], "varmax": [1, 4, 9], "vecm": [1, 4, 6, 9], "arima_seek_the_oracl": [1, 4], "glm_forecast_by_column": [1, 4], "tfp": [1, 8], "tfpregress": [1, 4, 9], "tfpregressor": [1, 4], "tensorflowst": [1, 4, 9], "tide": [1, 8, 9], "timecovari": [1, 4], "get_covari": [1, 4], "timeseriesdata": [1, 4], "test_val_gen": [1, 4], "tf_dataset": [1, 4], "train_gen": [1, 4], "get_holidai": [1, 4], "mae_loss": [1, 4], "mape": [1, 3, 4], "nrmse": [1, 4], "wape": [1, 4], "gener": [1, 2, 3, 4, 6, 7, 8, 9], "general_templ": [1, 5], "tool": [1, 2, 3, 4, 7, 8, 9], "anomaly_util": [1, 8], "anomaly_df_to_holidai": [1, 6], "anomaly_new_param": [1, 6], "create_dates_df": [1, 6], "detect_anomali": [1, 6], "gaussian_mixtur": [1, 6], "holiday_new_param": [1, 6], "limits_to_anomali": [1, 6], "loop_sk_outli": [1, 6], "nonparametric_multivari": [1, 6], "sk_outlier": [1, 6], "values_to_anomali": [1, 6], "zscore_survival_funct": [1, 6], "calendar": [1, 3, 8], "gregorian_to_chines": [1, 6], "gregorian_to_christian_lunar": [1, 6], "gregorian_to_hebrew": [1, 6], "gregorian_to_hindu": [1, 6], "gregorian_to_islam": [1, 6], "heb_is_leap": [1, 6], "lunar_from_lunar": [1, 6], "lunar_from_lunar_ful": [1, 6], "to_jd": [1, 6], "cointegr": [1, 4, 8], "btcd_decompos": [1, 6], "coint_johansen": [1, 6], "fourier_seri": [1, 6], "lagmat": [1, 6], "constraint": [1, 3, 4, 8, 9], "apply_constraint_singl": [1, 6], "apply_fit_constraint": [1, 6], "constant_growth_r": [1, 6], "constraint_new_param": [1, 6], "fit_constraint": [1, 6], "cpu_count": [1, 8], "set_n_job": [1, 6], "fast_kalman": [1, 8], "usag": [1, 3], "exampl": [1, 2, 3, 4, 7], "gaussian": [1, 4, 6], "empti": [1, 2, 3, 4, 6], "unvectorize_st": [1, 6], "unvectorize_var": [1, 6], "kalmanfilt": [1, 6], "comput": [1, 3, 4, 6], "em": [1, 6], "em_observation_nois": [1, 6], "em_process_nois": [1, 6], "predict_next": [1, 6], "predict_observ": [1, 6], "smooth_curr": [1, 6], "updat": [1, 4, 6, 9], "autoshap": [1, 6], "ddot": [1, 6], "ddot_t_right": [1, 6], "ddot_t_right_old": [1, 6], "dinv": [1, 6], "douter": [1, 6], "em_initial_st": [1, 6], "ensure_matrix": [1, 6], "ensure_st": [1, 6], "holt_winters_damped_matric": [1, 6], "new_kalman_param": [1, 6], "priv_smooth": [1, 6], "priv_update_with_nan_check": [1, 6], "random_matrix": [1, 6], "random_state_spac": [1, 6], "random_state_space_origin": [1, 6], "stable_pinv": [1, 6], "update_with_nan_check": [1, 6], "generate_harmonics_datafram": [1, 6], "fourier_extrapol": [1, 6], "fir_filt": [1, 8], "apply_fir_filter_time_domain": [1, 6], "apply_fir_filter_to_timeseri": [1, 6], "fft_fir_filter_to_timeseri": [1, 6], "generate_random_fir_param": [1, 6], "hierarchi": [1, 3, 8], "reconcil": [1, 6], "holiday_flag": [1, 6], "query_holidai": [1, 6], "imput": [1, 4, 8], "fillna": [1, 3, 4, 6, 9], "seasonalitymotifimput": [1, 6], "simpleseasonalitymotifimput": [1, 4, 6], "biased_ffil": [1, 6], "fake_date_fil": [1, 6], "fake_date_fill_old": [1, 6], "fill_forward": [1, 6], "fill_forward_alt": [1, 6], "fill_mean": [1, 6], "fill_mean_old": [1, 6], "fill_median": [1, 6], "fill_median_old": [1, 6], "fill_on": [1, 6], "fill_zero": [1, 6], "fillna_np": [1, 6], "rolling_mean": [1, 4, 6], "lunar": [1, 8], "dco": [1, 6], "dsin": [1, 6], "fixangl": [1, 6], "kepler": [1, 6], "moon_phas": [1, 6], "moon_phase_df": [1, 6], "phase_str": [1, 6], "todeg": [1, 6], "torad": [1, 6], "percentil": [1, 8], "nan_percentil": [1, 6], "nan_quantil": [1, 6], "trimmed_mean": [1, 6], "probabilist": [1, 3, 4, 7, 8, 9], "point_to_prob": [1, 6], "variable_point_to_prob": [1, 6], "historic_quantil": [1, 6], "inferred_norm": [1, 6], "percentileofscore_appli": [1, 6], "profil": [1, 4, 8], "data_profil": [1, 6], "profile_time_seri": [1, 6], "summarize_seri": [1, 6], "regressor": [1, 3, 4, 7, 8], "create_lagged_regressor": [1, 6, 8], "create_regressor": [1, 6, 8], "season": [1, 3, 4, 8, 9], "changepoint_fcst_from_last_row": [1, 6], "create_changepoint_featur": [1, 6], "create_datepart_compon": [1, 6], "create_seasonality_featur": [1, 6], "date_part": [1, 6], "fourier_df": [1, 6], "half_yr_spac": [1, 6], "random_datepart": [1, 6], "seasonal_independent_match": [1, 6], "seasonal_int": [1, 6], "seasonal_repeating_wavelet": [1, 6], "seasonal_window_match": [1, 6], "shape": [1, 2, 3, 4, 7, 8, 9], "numerictransform": [1, 6], "fit_transform": [1, 3, 6, 8, 9], "inverse_transform": [1, 6, 7, 8, 9], "clean_weight": [1, 6], "df_cleanup": [1, 6], "freq_to_timedelta": [1, 6], "infer_frequ": [1, 6, 8], "long_to_wid": [1, 6, 8, 9], "simple_train_test_split": [1, 6], "split_digits_and_non_digit": [1, 6], "subset_seri": [1, 6], "wide_to_3d": [1, 6], "threshold": [1, 3, 4, 8, 9], "nonparametricthreshold": [1, 6], "compare_to_epsilon": [1, 6], "find_epsilon": [1, 6], "prune_anom": [1, 6], "score_anomali": [1, 6], "consecutive_group": [1, 6], "nonparametr": [1, 3, 6], "alignlastdiff": [1, 6], "alignlastvalu": [1, 4, 6], "find_centerpoint": [1, 6], "anomalyremov": [1, 6], "bkbandpassfilt": [1, 6], "filter": [1, 3, 4, 6, 9], "btcd": [1, 6], "centerlastvalu": [1, 6], "centersplit": [1, 6], "changepointdetrend": [1, 6], "clipoutli": [1, 6], "cumsumtransform": [1, 6], "datepartregressiontransform": [1, 6], "detrend": [1, 4, 6, 9], "diffsmooth": [1, 6], "differencedtransform": [1, 3, 6, 9], "discret": [1, 6], "ewmafilt": [1, 6], "emptytransform": [1, 6], "fftdecomposit": [1, 6], "fftfilter": [1, 6], "firfilt": [1, 6], "fastica": [1, 6], "generaltransform": [1, 6, 8, 9], "fill_na": [1, 6, 8], "retrieve_transform": [1, 6, 8], "hpfilter": [1, 6], "historicvalu": [1, 6], "holidaytransform": [1, 6], "intermittentoccurr": [1, 6], "kalmansmooth": [1, 6], "levelshiftmag": [1, 6], "levelshifttransform": [1, 6], "locallineartrend": [1, 6], "meandiffer": [1, 6], "meanpercentsplitt": [1, 6], "pca": [1, 4, 6], "pctchangetransform": [1, 6], "positiveshift": [1, 6], "randomtransform": [1, 6, 8], "regressionfilt": [1, 6], "replaceconst": [1, 6], "rollingmeantransform": [1, 3, 6], "round": [1, 3, 4, 6, 7], "stlfilter": [1, 6], "scipyfilt": [1, 6, 9], "seasonaldiffer": [1, 6], "shiftfirstvalu": [1, 6], "sintrend": [1, 6], "fit_sin": [1, 6], "slice": [1, 3, 4, 6, 9], "standardscal": [1, 6], "statsmodelsfilt": [1, 6], "bkfilter": [1, 6, 9], "cffilter": [1, 6], "convolution_filt": [1, 6], "thetatransform": [1, 6], "bkfilter_st": [1, 6], "clip_outli": [1, 6], "exponential_decai": [1, 6], "get_transformer_param": [1, 6], "random_clean": [1, 6], "remove_outli": [1, 6], "simple_context_slic": [1, 6], "transformer_list_to_dict": [1, 6], "wavelet": [1, 8], "continuous_db2_wavelet": [1, 6], "create_daubechies_db2_wavelet": [1, 6], "create_gaussian_wavelet": [1, 6], "create_haar_wavelet": [1, 6], "create_mexican_hat_wavelet": [1, 6], "create_morlet_wavelet": [1, 6], "create_narrowing_wavelet": [1, 6], "create_real_morlet_wavelet": [1, 6], "create_wavelet": [1, 6], "offset_wavelet": [1, 6], "window_funct": [1, 8], "chunk_reshap": [1, 6], "last_window": [1, 4, 6], "np_2d_arang": [1, 6], "retrieve_closest_indic": [1, 6], "rolling_window_view": [1, 6], "sliding_window_view": [1, 6], "window_id_mak": [1, 6], "window_lin_reg": [1, 6], "window_lin_reg_mean": [1, 6], "window_lin_reg_mean_no_nan": [1, 6], "window_mak": [1, 6], "window_maker_2": [1, 6], "window_maker_3": [1, 6], "window_sum_mean": [1, 6], "window_sum_mean_nan_tail": [1, 6], "window_sum_nan_mean": [1, 6], "select": [1, 3, 4, 6, 7, 9], "http": [1, 2, 3, 4, 6, 9], "github": [1, 4, 6, 7, 9], "com": [1, 2, 4, 6, 9], "winedarksea": 1, "class": [1, 3, 4, 6, 7, 9], "output": [1, 2, 3, 4, 6, 7, 9], "multivari": [1, 3, 4, 6, 7, 9], "method": [1, 2, 3, 4, 6, 7, 9], "zscore": [1, 3, 6], "transform_dict": [1, 3, 6], "transformation_param": [1, 3, 4, 6, 9], "0": [1, 2, 3, 4, 5, 6, 7, 9], "datepart_method": [1, 3, 4, 6], "simple_3": [1, 3, 6], "regression_model": [1, 3, 4, 6], "elasticnet": [1, 3, 6], "model_param": [1, 3, 4, 6, 9], "forecast_param": [1, 3, 6, 9], "none": [1, 2, 3, 4, 6, 7, 9], "method_param": [1, 3, 6], "eval_period": [1, 3, 6, 9], "isolated_onli": [1, 3, 6], "fals": [1, 2, 3, 4, 5, 6, 7, 9], "n_job": [1, 3, 4, 6, 7, 9], "1": [1, 2, 3, 4, 5, 6, 7, 9], "object": [1, 2, 3, 4, 6, 7, 9], "df": [1, 2, 3, 4, 6, 7, 9], "all": [1, 2, 3, 4, 6, 7], "return": [1, 2, 3, 4, 6], "paramet": [1, 2, 3, 4, 6, 7], "pd": [1, 3, 4, 5, 6, 9], "datafram": [1, 2, 3, 4, 6, 7, 9], "wide": [1, 2, 3, 4, 6, 7], "style": [1, 2, 3, 4, 6, 7, 9], "classif": [1, 3, 6], "outlier": [1, 3, 6, 9], "": [1, 3, 4, 6, 7, 9], "static": [1, 3, 4, 6], "random": [1, 2, 3, 4, 6, 7, 9], "new": [1, 3, 4, 6, 7, 9], "combin": [1, 3, 4, 6, 7, 9], "str": [1, 2, 3, 4, 6, 9], "fast": [1, 3, 4, 5, 6, 7, 9], "deep": [1, 3, 7, 9], "default": [1, 2, 3, 4, 6, 7, 9], "ani": [1, 3, 4, 6, 7, 9], "name": [1, 2, 3, 4, 6, 7], "ie": [1, 2, 3, 4, 6, 7, 9], "iqr": [1, 3], "specifi": [1, 3, 4, 6, 9], "onli": [1, 3, 4, 6, 7, 9], "series_nam": [1, 3], "titl": [1, 3, 4], "marker_s": [1, 3], "plot_kwarg": [1, 3], "A": [1, 3, 4, 6, 7], "decisiontre": [1, 3, 4, 6], "ar": [1, 2, 3, 4, 6, 7, 9], "nonstandard": [1, 3, 6], "forecast_length": [1, 3, 4, 6, 7, 9], "int": [1, 2, 3, 4, 6], "14": [1, 3, 4, 9], "frequenc": [1, 2, 3, 4, 6, 7], "infer": [1, 3, 4, 6, 7, 9], "prediction_interv": [1, 3, 4, 6, 7, 9], "float": [1, 2, 3, 4, 6, 9], "9": [1, 2, 3, 4, 6, 7, 9], "max_gener": [1, 3, 7, 9], "25": [1, 3, 4, 6], "no_neg": [1, 3, 9], "bool": [1, 2, 3, 4, 6], "initial_templ": [1, 3, 9], "random_se": [1, 2, 3, 4, 6, 9], "2022": [1, 3, 4, 6], "holiday_countri": [1, 3, 4, 6], "u": [1, 2, 3, 4, 6, 7, 9], "subset": [1, 3, 4, 7, 9], "aggfunc": [1, 3, 6, 7, 9], "first": [1, 2, 3, 4, 6, 7, 9], "na_toler": [1, 3, 6], "metric_weight": [1, 3, 7, 9], "dict": [1, 2, 3, 4, 6, 7], "containment_weight": [1, 3, 9], "contour_weight": [1, 3, 9], "01": [1, 2, 3, 4, 6, 7, 9], "imle_weight": [1, 3, 9], "made_weight": [1, 3, 9], "05": [1, 2, 3, 4, 6, 9], "mae_weight": [1, 3, 9], "2": [1, 2, 3, 4, 6, 7, 9], "mage_weight": [1, 3, 9], "mle_weight": [1, 3, 9], "oda_weight": [1, 3], "001": [1, 3, 4, 6], "rmse_weight": [1, 3, 9], "runtime_weight": [1, 3, 7, 9], "smape_weight": [1, 3, 9], "5": [1, 2, 3, 4, 5, 6, 9], "spl_weight": [1, 3, 9], "wasserstein_weight": [1, 3], "drop_most_rec": [1, 3, 6, 7, 9], "drop_data_older_than_period": [1, 3, 6, 9], "scalabl": [1, 3, 7], "transformer_list": [1, 3, 5, 6, 7, 9], "auto": [1, 3, 4, 6, 7, 9], "transformer_max_depth": [1, 3, 5, 6, 7], "models_mod": [1, 3, 9], "num_valid": [1, 3, 4, 5, 7, 9], "models_to_valid": [1, 3, 7, 9], "15": [1, 3, 4, 6, 9], "max_per_model_class": [1, 3, 5, 9], "validation_method": [1, 3, 4, 7, 9], "backward": [1, 3, 4, 6, 7, 9], "min_allowed_train_perc": [1, 3, 4, 6], "prefill_na": [1, 3, 6, 9], "introduce_na": [1, 3], "preclean": [1, 3], "model_interrupt": [1, 3, 7], "true": [1, 2, 3, 4, 5, 6, 7, 9], "generation_timeout": [1, 3], "current_model_fil": [1, 3], "force_gc": [1, 3], "horizontal_ensemble_valid": [1, 3], "custom_metr": [1, 3, 4], "callabl": [1, 3], "ndarrai": [1, 3, 6], "verbos": [1, 3, 4, 6, 9], "genet": [1, 3, 7, 9], "algorithm": [1, 3, 4, 6, 7, 9], "number": [1, 2, 3, 4, 6, 7, 9], "period": [1, 2, 3, 4, 6, 9], "over": [1, 3, 4, 6, 7, 9], "which": [1, 2, 3, 4, 6, 7, 9], "can": [1, 2, 3, 4, 6, 7], "overriden": [1, 3], "later": [1, 3, 6], "when": [1, 3, 4, 6, 7, 9], "you": [1, 3, 4, 6, 7], "don": [1, 3, 4, 6, 9], "t": [1, 2, 3, 4, 6, 7], "have": [1, 2, 3, 4, 6, 7, 9], "much": [1, 2, 3, 6, 9], "histor": [1, 3, 4, 6, 9], "small": [1, 3, 4, 6, 9], "length": [1, 2, 3, 4, 6, 9], "full": [1, 3, 6, 9], "desir": [1, 3, 4, 6, 9], "lenght": [1, 3], "usual": [1, 2, 3, 4, 6, 7, 9], "best": [1, 3, 4, 6, 7, 9], "possibl": [1, 3, 4, 6, 7, 9], "approach": [1, 3, 4, 6, 9], "given": [1, 3, 4, 6, 7, 9], "limit": [1, 3, 4, 6, 7, 9], "specif": [1, 2, 3, 4, 6, 7, 9], "datetim": [1, 2, 3, 4, 6, 7, 9], "offset": [1, 3, 6, 9], "forc": [1, 3, 4, 9], "rollup": [1, 3, 9], "daili": [1, 2, 3, 4, 6, 7, 9], "input": [1, 3, 4, 6, 7, 9], "m": [1, 2, 3, 4, 6, 7, 9], "monthli": [1, 2, 3, 6, 7, 9], "uncertainti": [1, 3, 4, 6], "rang": [1, 3, 4, 6, 9], "upper": [1, 3, 4, 6, 7, 9], "lower": [1, 3, 4, 6, 7, 9], "adjust": [1, 3, 4, 6, 7, 9], "rare": [1, 3, 4, 9], "match": [1, 2, 3, 4, 6, 9], "actual": [1, 3, 4, 6, 9], "more": [1, 2, 3, 4, 6, 7], "longer": [1, 3, 9], "runtim": [1, 3, 4, 7, 9], "better": [1, 2, 3, 4, 9], "accuraci": [1, 3, 4, 7, 9], "It": [1, 3, 4, 6, 7, 9], "call": [1, 2, 3, 4, 6, 9], "max": [1, 2, 3, 4, 6, 7, 9], "becaus": [1, 3, 4, 6, 7, 9], "somedai": [1, 3], "earli": [1, 3], "stop": [1, 3, 6, 7], "option": [1, 3, 4, 6, 7], "now": [1, 3, 4, 6, 9], "thi": [1, 2, 3, 4, 6, 7, 9], "just": [1, 2, 3, 4, 6], "exact": [1, 3, 4, 6], "neg": [1, 3, 4], "up": [1, 2, 3, 6, 9], "valu": [1, 2, 3, 4, 6, 7, 9], "st": [1, 2, 3, 4, 6, 9], "dev": [1, 3, 4, 6, 9], "abov": [1, 3, 4, 6, 9], "below": [1, 2, 3, 4, 6, 9], "min": [1, 3, 4, 9], "constrain": [1, 3, 6, 9], "also": [1, 3, 4, 6, 7], "instead": [1, 2, 3, 4, 6], "accept": [1, 3, 6, 9], "dictionari": [1, 3, 4, 6, 9], "follow": [1, 3, 4, 6, 9], "kei": [1, 2, 3, 4, 9], "constraint_method": [1, 3, 4, 6], "one": [1, 3, 4, 6, 9], "stdev_min": [1, 3, 4], "stdev": [1, 3, 4], "mean": [1, 3, 4, 6, 9], "absolut": [1, 3, 4, 9], "arrai": [1, 3, 4, 6, 9], "final": [1, 3, 4, 6, 9], "each": [1, 2, 3, 4, 6, 7, 9], "quantil": [1, 3, 4, 6, 9], "constraint_regular": [1, 3, 4, 6], "where": [1, 3, 4, 6, 7, 9], "hard": [1, 3, 4, 9], "cutoff": [1, 3, 4, 6], "between": [1, 2, 3, 4, 6, 7, 9], "penalti": [1, 3, 4], "term": [1, 3, 4], "upper_constraint": [1, 3, 4, 6], "unus": [1, 3, 4, 6], "lower_constraint": [1, 3, 4, 6], "bound": [1, 3, 4, 6, 7, 9], "appli": [1, 3, 4, 6, 7, 9], "otherwis": [1, 2, 3, 4, 6], "list": [1, 2, 3, 4, 6, 7], "comma": [1, 3, 4, 9], "separ": [1, 3, 4, 6, 9], "string": [1, 3, 4, 6, 9], "simpl": [1, 3, 4, 6, 7], "distanc": [1, 3, 4, 6, 7, 9], "horizont": [1, 3, 4, 7, 9], "mosaic": [1, 3, 4, 7, 9], "subsampl": [1, 3], "randomli": [1, 3, 6], "start": [1, 2, 3, 4, 5, 6, 7, 9], "includ": [1, 3, 4, 6, 7, 9], "both": [1, 3, 6, 9], "previou": [1, 3, 6, 7], "self": [1, 3, 4, 6], "seed": [1, 2, 3, 6], "allow": [1, 3, 4, 6, 7, 9], "slightli": [1, 3, 6], "consist": [1, 3, 6, 9], "pass": [1, 2, 3, 4, 6, 7], "through": [1, 3, 4, 6, 7, 9], "some": [1, 2, 3, 4, 6, 7, 9], "maximum": [1, 2, 3, 6, 9], "onc": [1, 3, 4], "mani": [1, 3, 4, 6, 7, 9], "take": [1, 3, 4, 6, 7, 9], "column": [1, 2, 3, 4, 5, 6, 7], "unless": [1, 3, 4, 9], "case": [1, 2, 3, 4, 6, 9], "same": [1, 2, 3, 4, 6, 9], "roll": [1, 3, 4, 6, 9], "higher": [1, 3, 4, 6, 7, 9], "duplic": [1, 3, 6], "timestamp": [1, 3, 4, 6], "remov": [1, 3, 4, 6, 9], "try": [1, 2, 3, 6, 7, 9], "np": [1, 3, 4, 6, 9], "sum": [1, 3, 6, 9], "bewar": [1, 3, 6, 9], "numer": [1, 3, 4, 6, 9], "aggreg": [1, 3, 6, 7, 9], "like": [1, 2, 3, 4, 6, 9], "work": [1, 2, 3, 4, 6, 9], "non": [1, 3, 4, 6, 9], "chang": [1, 3, 6, 9], "nan": [1, 3, 4, 6, 7, 9], "drop": [1, 3, 5, 6, 9], "thei": [1, 3, 4, 6, 7, 9], "than": [1, 3, 4, 6, 9], "percent": [1, 2, 3, 6, 9], "95": [1, 3, 4, 6, 9], "here": [1, 3, 4, 6, 9], "would": [1, 3, 4, 9], "weight": [1, 3, 4, 6, 7, 9], "assign": [1, 3], "effect": [1, 3, 4, 6, 9], "rank": [1, 3, 4, 6], "n": [1, 3, 4, 6, 7, 9], "most": [1, 2, 3, 4, 6, 7, 9], "recent": [1, 2, 3, 4, 6, 9], "point": [1, 3, 4, 6, 7, 9], "sai": [1, 3, 7, 9], "sale": [1, 3, 6, 9], "current": [1, 2, 3, 4, 6, 7, 9], "unfinish": [1, 3], "month": [1, 3, 6, 7, 9], "occur": [1, 3, 6, 7, 9], "after": [1, 3, 4, 6, 7, 9], "aggregr": [1, 3], "so": [1, 2, 3, 4, 6, 7, 9], "whatev": [1, 3, 4], "alia": [1, 3, 4, 6], "prob": [1, 3], "affect": [1, 3, 4, 6], "algorithim": [1, 3], "from": [1, 2, 3, 4, 5, 6, 7, 9], "probabl": [1, 2, 3, 4, 6, 7, 9], "note": [1, 2, 3, 4, 6], "doe": [1, 3, 4, 6, 9], "initi": [1, 3, 4, 6, 7, 9], "alias": [1, 3, 4, 6], "superfast": [1, 3, 7, 9], "should": [1, 3, 4, 6, 9], "fewer": [1, 2, 3, 9], "memori": [1, 3, 4, 6, 7, 9], "issu": [1, 3, 4, 6, 7, 9], "scale": [1, 3, 4, 6, 7, 9], "sequenti": [1, 3], "faster": [1, 2, 3, 4, 6, 7], "newli": [1, 3], "sporad": [1, 3], "util": [1, 3, 4, 6, 7, 9], "slower": [1, 3, 7, 9], "user": [1, 3, 4, 6, 7, 9], "mode": [1, 3, 4, 7], "capabl": [1, 3, 9], "gradient_boost": [1, 3], "neuralnet": [1, 3, 4], "regress": [1, 3, 4, 6], "cross": [1, 3, 4, 7], "perform": [1, 3, 6, 7, 9], "train": [1, 3, 4, 6, 7], "test": [1, 2, 3, 4, 6, 7, 9], "split": [1, 3, 4, 6, 7, 9], "confus": [1, 3, 4, 6, 7, 9], "eval": [1, 3], "segment": [1, 3, 6, 9], "total": [1, 3, 4, 6], "avail": [1, 3, 4, 6, 7], "out": [1, 3, 4, 7, 9], "50": [1, 3, 4], "top": [1, 3, 6, 7, 9], "Or": [1, 3], "tri": [1, 3, 6, 7, 9], "99": [1, 3, 4], "100": [1, 3, 4, 6, 7, 9], "If": [1, 3, 4, 6, 7, 9], "addit": [1, 3, 4, 6, 7, 9], "per_seri": [1, 3, 4], "ad": [1, 3, 4, 6, 7], "what": [1, 2, 3, 4], "famili": [1, 3, 4], "even": [1, 3, 4, 7, 9], "integ": [1, 3, 6], "recenc": [1, 3], "shorter": [1, 3, 4, 6], "set": [1, 2, 3, 4, 6, 7, 9], "equal": [1, 3, 4, 6, 9], "size": [1, 3, 4, 6, 9], "poetic": [1, 3], "less": [1, 3, 4, 6, 9], "strategi": [1, 3], "other": [1, 2, 3, 4, 6, 7], "similar": [1, 3, 4, 6, 7, 9], "364": [1, 3, 6, 9], "year": [1, 3, 6], "immedi": [1, 3, 4, 6, 9], "automat": [1, 3, 6, 7, 9], "find": [1, 3, 4, 6, 7, 9], "section": [1, 3, 7, 9], "custom": [1, 3, 4, 6], "need": [1, 2, 3, 4, 6, 7], "validation_index": [1, 3, 9], "datetimeindex": [1, 3, 4, 6, 7, 9], "tail": [1, 3, 6, 9], "els": [1, 2, 3, 4, 6, 7, 9], "rais": [1, 3, 6], "error": [1, 3, 4, 6, 7, 9], "10": [1, 2, 3, 4, 6, 9], "mandat": [1, 3], "unrecommend": [1, 3], "replac": [1, 3, 4, 6], "lead": [1, 3, 7, 9], "zero": [1, 2, 3, 4, 6, 9], "collect": [1, 3, 4, 6, 7], "hasn": [1, 3], "yet": [1, 3, 4, 6, 9], "fill": [1, 3, 4, 6, 7], "leav": [1, 3, 9], "interpol": [1, 3, 4, 6], "recommend": [1, 3, 6, 7, 9], "median": [1, 3, 4, 6], "mai": [1, 2, 3, 4, 6, 7, 9], "assum": [1, 3, 6, 9], "whether": [1, 2, 3, 4, 6], "last": [1, 3, 4, 6, 9], "help": [1, 3, 4, 6, 7, 9], "make": [1, 2, 3, 4, 6, 7, 9], "robust": [1, 3, 4, 6], "introduc": [1, 3], "row": [1, 2, 3, 5, 6], "Will": [1, 3, 4, 6], "20": [1, 2, 3, 4, 6, 9], "keyboardinterrupt": [1, 3, 7], "quit": [1, 3, 6, 9], "entir": [1, 3, 6, 7, 9], "program": [1, 3], "attempt": [1, 3, 6, 9], "conjunct": [1, 3], "result_fil": [1, 3, 7], "accident": [1, 3], "complet": [1, 3, 4, 6], "termin": [1, 3], "end_gener": [1, 3], "end": [1, 2, 3, 4, 6], "skip": [1, 2, 3, 4, 6], "again": [1, 3, 9], "minut": [1, 3], "proceed": [1, 3, 9], "check": [1, 3, 6, 7, 9], "offer": [1, 3, 9], "approxim": [1, 3, 6], "timeout": [1, 2, 3, 7], "overal": [1, 3, 6, 9], "cap": [1, 3, 6], "per": [1, 3, 4, 6, 9], "file": [1, 3, 9], "path": [1, 3], "write": [1, 3, 4, 5], "disk": [1, 3], "debug": [1, 3], "crash": [1, 3, 4, 7], "json": [1, 3, 4, 5, 9], "append": [1, 3], "gc": [1, 3], "won": [1, 2, 3, 4, 6, 7, 9], "differ": [1, 3, 4, 6, 7, 9], "reliabl": [1, 3], "unstabl": [1, 3, 9], "horz": [1, 3], "function": [1, 3, 4, 6, 7, 9], "expect": [1, 3, 4, 6, 7, 9], "func": [1, 3, 4, 6], "f": [1, 3, 4, 7, 9], "df_train": [1, 3, 4, 6, 9], "three": [1, 3, 4, 7, 9], "2d": [1, 3, 4, 6], "reduc": [1, 2, 3, 4, 7, 9], "give": [1, 3, 6, 7], "core": [1, 3, 4, 6, 7], "parallel": [1, 3, 4, 7, 9], "joblib": [1, 3, 4, 9], "context": [1, 3, 4], "manag": [1, 3, 4, 6, 9], "type": [1, 2, 3, 4, 6, 7, 9], "id": [1, 2, 3, 4, 6, 7], "future_regressor": [1, 3, 4, 6, 9], "n_split": [1, 3, 9], "creat": [1, 2, 3, 4, 6, 7, 9], "backcast": [1, 3, 6], "back": [1, 3, 4, 6, 9], "OF": [1, 3], "sampl": [1, 2, 3, 4, 6, 7, 9], "often": [1, 3, 4, 6, 7, 9], "As": [1, 3, 6, 9], "repres": [1, 3, 4, 6, 9], "real": [1, 3, 4, 6, 9], "world": [1, 3, 4, 6, 9], "There": [1, 3, 7, 9], "jump": [1, 3, 9], "chunk": [1, 3, 4, 9], "arg": [1, 3, 4, 6], "except": [1, 3, 4], "piec": [1, 3, 9], "fastest": [1, 3], "observ": [1, 3, 4, 6], "level": [1, 2, 3, 4, 6, 7, 9], "standard": [1, 3, 4, 6], "access": [1, 3, 9], "isn": [1, 3, 4, 6, 9], "classic": [1, 3], "percentag": [1, 3, 4, 6, 9], "intend": [1, 3, 9], "quick": [1, 3, 9], "visual": [1, 3, 7, 9], "statist": [1, 3, 4, 6, 7], "see": [1, 3, 4, 6, 7, 9], "df_wide": [1, 3, 4, 6, 9], "rel": [1, 3, 4, 6, 7, 9], "unpredict": [1, 3], "target": [1, 3, 4, 6, 9], "waterfall_plot": [1, 3], "explain": [1, 3, 4], "caus": [1, 3, 4, 7, 9], "measur": [1, 2, 3, 6, 9], "outcom": [1, 3, 4, 9], "shap": [1, 3], "coeffici": [1, 3], "correl": [1, 3, 6], "show": [1, 2, 3, 4, 9], "waterfal": [1, 3], "enabl": [1, 3], "expand": [1, 3, 4, 6], "rerun": [1, 3, 9], "best_model_origin": [1, 3], "best_model_original_id": [1, 3], "refer": [1, 3, 9], "origin": [1, 3, 4, 6, 9], "expans": [1, 3], "necessari": [1, 3, 4, 6, 7, 9], "without": [1, 3, 6, 7, 9], "flag": [1, 3, 4, 6, 9], "filenam": [1, 3], "kwarg": [1, 2, 3, 4, 6], "ever": [1, 3, 6], "40": [1, 3, 6], "include_result": [1, 3], "unpack_ensembl": [1, 3], "min_metr": [1, 3], "mle": [1, 3, 9], "iml": [1, 3, 9], "ewma": [1, 3], "max_metr": [1, 3], "focus_model": [1, 3], "reusabl": [1, 3], "csv": [1, 2, 3, 5, 9], "slowest": [1, 3, 6, 9], "diagnost": [1, 3, 4], "compon": [1, 3, 4, 6], "larger": [1, 3, 4, 6, 9], "count": [1, 3, 4, 6], "lowest": [1, 3, 4, 6], "wai": [1, 3, 4, 6], "major": [1, 3, 9], "part": [1, 3, 4, 6, 9], "addon": [1, 3], "pull": [1, 2, 3, 4, 6], "result_set": [1, 3], "fraction": [1, 3, 9], "date_col": [1, 3, 6, 7, 9], "value_col": [1, 3, 6, 7, 9], "id_col": [1, 3, 6, 7, 9], "grouping_id": [1, 3, 6], "suppli": [1, 3, 4, 6, 9], "long": [1, 2, 3, 4, 6, 7, 9], "NOT": [1, 3, 4, 6, 9], "sever": [1, 2, 3, 7, 9], "identifi": [1, 3, 4, 6, 9], "singl": [1, 3, 4, 6, 7, 9], "extern": [1, 3, 9], "colname1": [1, 3], "colname2": [1, 3], "increas": [1, 2, 3, 4, 7, 9], "left": [1, 3, 6, 9], "blank": [1, 3], "its": [1, 3, 4, 9], "tabl": [1, 3, 4], "pickl": [1, 3], "inform": [1, 3, 4, 6], "series_id": [1, 3, 4, 6, 7, 9], "group_id": [1, 3, 6], "map": [1, 3, 4], "x": [1, 3, 4, 5, 6, 9], "retain": [1, 3], "potenti": [1, 3, 4, 6, 9], "futur": [1, 3, 4, 6, 7, 9], "holdout": [1, 3, 7, 9], "setup": [1, 3, 7], "involv": [1, 3], "percent_best": [1, 3], "among": [1, 3, 9], "across": [1, 3, 4, 7, 9], "model_id": [1, 3, 4], "must": [1, 2, 3, 4, 6, 9], "wa": [1, 2, 3, 4, 6, 9], "input_dict": [1, 3], "get": [1, 2, 3, 4, 6, 7, 9], "common": [1, 3, 6, 7, 9], "helper": [1, 3], "import_target": [1, 3], "enforce_model_list": [1, 3], "include_ensembl": [1, 3], "overrid": [1, 3, 6], "exist": [1, 3, 4, 6, 9], "add": [1, 3, 4, 6, 9], "anoth": [1, 3, 6], "add_on": [1, 3], "include_horizont": [1, 3], "force_valid": [1, 3], "previous": [1, 3, 6], "done": [1, 3, 7, 9], "befor": [1, 3, 4, 6, 7, 9], "locat": [1, 3], "alreadi": [1, 3, 4, 6, 7, 9], "keep": [1, 3, 4, 6], "init": [1, 3, 4], "anywai": [1, 3], "unpack": [1, 3], "kept": [1, 3], "overridden": [1, 3], "keep_ensembl": [1, 3, 5], "sent": [1, 3], "regardless": [1, 3, 4], "weird": [1, 3], "behavior": [1, 3, 6], "wtih": [1, 3], "In": [1, 3, 4, 6, 7, 9], "validate_import": [1, 3], "eras": [1, 3], "fail": [1, 3, 4, 9], "had": [1, 3, 4], "least": [1, 3, 6, 9], "success": [1, 3, 6], "funciton": [1, 3], "readabl": [1, 3, 9], "start_dat": [1, 2, 3, 4, 7, 9], "alpha": [1, 3, 4, 6], "facecolor": [1, 3, 4], "black": [1, 3, 4], "loc": [1, 3, 4], "accur": [1, 3, 7, 9], "chosen_param": [1, 3], "color1": [1, 3], "grei": [1, 3], "color2": [1, 3], "darkorang": [1, 3], "invers": [1, 3, 4, 6, 9], "present": [1, 2, 3, 4, 6, 7, 9], "color": [1, 3, 4], "gain": [1, 3, 6, 9], "improv": [1, 3, 6, 7, 9], "doesn": [1, 3, 6, 9], "account": [1, 3, 4, 6], "benefit": [1, 3, 9], "seen": [1, 3, 9], "max_seri": [1, 3], "chosen": [1, 2, 3, 7, 9], "color_list": [1, 3], "top_n": [1, 3], "frequent": [1, 3], "factor": [1, 3, 4], "nest": [1, 3, 9], "well": [1, 3, 4, 6, 7, 9], "do": [1, 3, 4, 6, 9], "slow": [1, 2, 3, 4, 6, 9], "captur": [1, 3, 4, 9], "roman": [1, 3], "bar": [1, 3, 6], "hex": [1, 3], "col": [1, 3, 4, 6], "The": [1, 3, 4, 6, 7, 9], "highli": [1, 3, 4, 9], "those": [1, 3, 4, 6, 9], "mostli": [1, 3, 4, 6, 9], "unscal": [1, 3, 9], "ones": [1, 3, 9], "failur": [1, 2, 3, 9], "rate": [1, 3, 4, 6], "ignor": [1, 2, 3, 4, 6], "due": [1, 2, 3, 4, 6, 9], "60": [1, 3, 4, 6], "max_row": [1, 3], "max_name_char": [1, 3], "ff9912": [1, 3], "figsiz": [1, 3, 4], "12": [1, 3, 4, 6, 7, 9], "4": [1, 3, 4, 5, 6, 7, 9], "kind": [1, 3, 6, 9], "upper_clip": [1, 3], "1000": [1, 3, 4, 6, 9], "avg": [1, 3, 4, 6], "sort": [1, 3, 6], "chop": [1, 3], "tupl": [1, 2, 3, 4, 6], "axi": [1, 3, 4, 6, 9], "pie": [1, 3, 9], "prevent": [1, 3, 4, 9], "unnecessari": [1, 3], "distort": [1, 3], "To": [1, 3, 9], "compat": [1, 3], "necessarili": [1, 3, 9], "maintain": [1, 3, 6, 7, 9], "prefer": [1, 3], "plot_group": [1, 3], "modelclass": [1, 3], "asses": [1, 3], "end_dat": [1, 3], "compare_horizont": [1, 3], "include_bound": [1, 3, 4], "35": [1, 3, 6, 9], "start_color": [1, 3], "darkr": [1, 3], "end_color": [1, 3], "a2ad9c": [1, 3], "reforecast": [1, 3], "validation_forecast": [1, 3], "cach": [1, 3], "validation_forecasts_templ": [1, 3], "store": [1, 3, 4, 6, 9], "best_model_id": [1, 3, 9], "overlap": [1, 3, 9], "graph": [1, 3, 4], "reader": [1, 3], "compar": [1, 3, 4, 6, 9], "place": [1, 3, 4, 6, 9], "begin": [1, 3, 4, 6, 9], "either": [1, 3, 4, 6, 7, 9], "worst": [1, 3], "versu": [1, 3], "vline": [1, 3, 4], "val": [1, 3, 4], "marker": [1, 3], "just_point_forecast": [1, 3, 4], "fail_on_forecast_nan": [1, 3], "date": [1, 2, 3, 4, 6, 7, 9], "update_fit": [1, 3], "underli": [1, 3, 4, 7, 9], "retrain": [1, 3], "interv": [1, 3, 4, 6], "design": [1, 3, 4, 6, 7, 9], "high": [1, 3, 4, 6, 7, 9], "suffici": [1, 3, 9], "ahead": [1, 3, 4, 6, 9], "__init__": [1, 3, 4], "prediction_object": [1, 3], "Not": [1, 2, 3, 4, 6], "implement": [1, 3, 4, 6, 9], "strongli": [1, 3], "ha": [1, 3, 4, 6, 7, 9], "metadata": [1, 3, 4], "conveni": [1, 3, 6, 9], "id_nam": [1, 3, 4], "seriesid": [1, 2, 3, 4], "value_nam": [1, 3, 4], "interval_nam": [1, 3, 4], "predictioninterv": [1, 3, 4], "preprocessing_transform": [1, 4], "basescal": [1, 4], "past_impacts_intervent": [1, 4], "common_fouri": [1, 4, 6], "ar_lag": [1, 4], "ar_interaction_season": [1, 4], "anomaly_detector_param": [1, 3, 4, 6], "anomaly_intervent": [1, 4], "holiday_detector_param": [1, 4, 6], "holiday_countries_us": [1, 4, 6], "multivariate_featur": [1, 4], "multivariate_transform": [1, 4], "regressor_transform": [1, 4], "regressors_us": [1, 4], "linear_model": [1, 4], "randomwalk_n": [1, 4], "trend_window": [1, 4], "30": [1, 3, 4, 6, 7], "trend_standin": [1, 4], "trend_anomaly_detector_param": [1, 4], "trend_transform": [1, 4], "trend_model": [1, 4], "modelparamet": [1, 3, 4, 5, 9], "trend_phi": [1, 4], "x_scaler": [1, 4], "max_colinear": [1, 4], "998": [1, 4], "max_multicolinear": [1, 4], "decomposit": [1, 4, 6], "advanc": [1, 3, 4], "trend": [1, 4, 6], "preprocess": [1, 4, 6, 7, 9], "tunc": [1, 4], "etiam": [1, 4], "fati": [1, 4], "aperit": [1, 4], "futuri": [1, 4], "ora": [1, 4], "dei": [1, 4], "iussu": [1, 4], "umquam": [1, 4], "credita": [1, 4], "teucri": [1, 4], "Nos": [1, 4], "delubra": [1, 4], "deum": [1, 4], "miseri": [1, 4], "quibu": [1, 4], "ultimu": [1, 4], "esset": [1, 4], "ill": [1, 4], "di": [1, 4], "festa": [1, 4], "velamu": [1, 4], "frond": [1, 4], "urbem": [1, 4], "aeneid": [1, 4], "246": [1, 4], "249": [1, 4], "impact": [1, 3, 4, 6, 9], "uniqu": [1, 3, 4, 6], "past": [1, 4, 6, 9], "outsid": [1, 4, 9], "unforecast": [1, 4, 6], "accordingli": [1, 4, 9], "product": [1, 4, 6, 7, 9], "goal": [1, 4], "temporari": [1, 4], "whose": [1, 4, 6], "known": [1, 3, 4, 7, 9], "essenti": [1, 3, 4, 9], "estim": [1, 4, 6, 9], "raw": [1, 4, 6], "presenc": [1, 4], "warn": [1, 3, 4, 6], "about": [1, 3, 4, 6], "remove_excess_anomali": [1, 4, 6], "detector": [1, 3, 4, 6], "reli": [1, 4, 9], "alwai": [1, 3, 4, 6, 9], "element": [1, 2, 4, 6], "histori": [1, 2, 3, 4, 6], "intern": [1, 3, 4, 6, 7, 9], "attribut": [1, 3, 4, 9], "figur": [1, 3, 4], "latest": [1, 4], "code": [1, 3, 4, 5, 6, 7], "dai": [1, 2, 3, 4, 6, 9], "7": [1, 2, 3, 4, 6, 9], "weekli": [1, 2, 4], "For": [1, 2, 3, 4, 7, 9], "slope": [1, 4], "analysi": [1, 4, 6], "posit": [1, 3, 4, 6, 9], "sign": [1, 4], "exactli": [1, 4, 6], "regression_typ": [1, 4, 6, 9], "pattern": [1, 2, 3, 4, 6, 9], "inaccur": [1, 4], "keep_col": [1, 4], "keep_cols_idx": [1, 4], "dtindex": [1, 4, 6], "regressor_per_seri": [1, 4], "flag_regressor": [1, 4], "categorical_group": [1, 4], "past_impact": [1, 4], "future_impact": [1, 4], "regressor_forecast_model": [1, 4], "regressor_forecast_model_param": [1, 4], "regressor_forecast_transform": [1, 4], "include_histori": [1, 4], "tune": [1, 4], "16": [1, 3, 4], "breakdown": [1, 4], "look": [1, 2, 4, 7, 9], "right": [1, 4, 6, 7], "wrong": [1, 4, 6, 9], "especi": [1, 4, 7, 9], "easier": [1, 4], "window": [1, 3, 4, 6, 9], "anomaly_color": [1, 4], "darkslateblu": [1, 4], "holiday_color": [1, 4], "darkgreen": [1, 4], "trend_anomaly_color": [1, 4], "slategrai": [1, 4], "point_siz": [1, 4], "know": [1, 4, 9], "d4f74f": [1, 4], "82ab5a": [1, 4], "ff6c05": [1, 4], "c12600": [1, 4], "new_df": [1, 4], "include_organ": [1, 4], "step": [1, 3, 4, 6, 9], "equival": [1, 4, 6, 9], "include_impact": [1, 4], "multipl": [1, 3, 4, 6, 7, 9], "trend_residu": [1, 4], "trans_method": [1, 4, 6, 9], "featur": [1, 4, 6, 7, 9], "space": [1, 2, 4, 6, 9], "intervention_d": [1, 4], "lower_limit": [1, 3, 6, 9], "upper_limit": [1, 3, 6, 9], "univariatemotif": [1, 3], "model_param_dict": [1, 3, 9], "distance_metr": [1, 3, 4, 6], "euclidean": [1, 3], "k": [1, 3, 4, 6, 7], "pointed_method": [1, 3], "return_result_window": [1, 3, 4], "model_transform_dict": [1, 3, 9], "pchip": [1, 3], "fix": [1, 3, 6, 9], "maxabsscal": [1, 3, 6], "model_forecast_kwarg": [1, 3], "321": [1, 3, 9], "future_regressor_train": [1, 3, 4, 9], "future_regressor_forecast": [1, 3, 4, 9], "close": [1, 3, 4, 6, 7, 9], "exceed": [1, 3, 6, 9], "four": [1, 3, 9], "calcul": [1, 3, 4, 6, 9], "direct": [1, 3, 4, 6, 9], "edg": [1, 2, 3, 6, 9], "y": [1, 2, 3, 4, 6, 9], "z": [1, 3, 4, 9], "primarili": [1, 3, 9], "num_seri": [1, 3, 4, 6, 9], "middl": [1, 3, 6], "too": [1, 2, 3, 6, 9], "flip": [1, 3], "ab": [1, 3, 4, 6], "l": [1, 3, 7], "timestep": [1, 3, 6, 9], "two": [1, 3, 6, 9], "neighbor": [1, 3, 4], "resolut": [1, 3], "greater": [1, 3, 6, 9], "class_method": [1, 3], "standalon": [1, 3], "item": [1, 3, 6], "generaet_result_window": [1, 3], "fit_forecast": [1, 3], "result_window": [1, 3, 4], "forecast_df": [1, 3], "up_forecast_df": [1, 3], "low_forecast_df": [1, 3], "lower_limit_2d": [1, 3, 9], "upper_limit_2d": [1, 3, 9], "upper_risk_arrai": [1, 3, 9], "lower_risk_arrai": [1, 3, 9], "event_risk": [1, 3], "multivariatemotif": [1, 3, 9], "autots_kwarg": [1, 3], "shortcut": [1, 3], "suggest": [1, 3, 6, 9], "normal": [1, 3, 4, 6], "model_method": [1, 3], "num_sampl": [1, 3], "column_idx": [1, 3], "grai": [1, 3], "838996": [1, 3], "c0c0c0": [1, 3], "dcdcdc": [1, 3], "a9a9a9": [1, 3], "808080": [1, 3], "989898": [1, 3], "757575": [1, 3], "696969": [1, 3], "c9c0bb": [1, 3], "c8c8c8": [1, 3], "323232": [1, 3], "e5e4e2": [1, 3], "778899": [1, 3], "4f666a": [1, 3], "848482": [1, 3], "414a4c": [1, 3], "8a7f80": [1, 3], "c4c3d0": [1, 3], "bebeb": [1, 3], "dbd7d2": [1, 3], "up_low_color": [1, 3], "ff4500": [1, 3], "ff5349": [1, 3], "bar_color": [1, 3], "6495ed": [1, 3], "bar_ylim": [1, 3], "8": [1, 3, 4, 6, 9], "ylim": [1, 3], "barplot": [1, 3], "df_test": [1, 3, 9], "actuals_color": [1, 3], "00bfff": [1, 3], "v": [1, 3, 6], "dt": [1, 2, 3, 6], "line": [1, 3, 4, 6, 9], "manual": [1, 3, 9], "appropri": [1, 3, 4, 6, 7, 9], "assess": [1, 3, 9], "target_shap": [1, 3], "handl": [1, 3, 4, 9], "overview": [1, 3], "defin": [1, 3, 4, 6, 7, 9], "group": [1, 3, 4, 6], "reconcili": [1, 6, 9], "2020": [1, 3, 4, 6, 9], "mathemat": [1, 6], "chronolog": [1, 6], "fulli": [1, 4, 6], "under": [1, 6, 9], "condit": [1, 6], "primari": [1, 6], "intent": [1, 6], "na": [1, 4, 6], "cannot": [1, 4, 6, 9], "rollingmean": [1, 6], "pctchang": [1, 6], "cumsum": [1, 6], "ffill": [1, 6], "forward": [1, 3, 6, 9], "until": [1, 6, 9], "reach": [1, 6, 7], "miss": [1, 6, 9], "averag": [1, 3, 4, 6, 9], "rolling_mean_24": [1, 6], "24": [1, 4, 6, 9], "ffill_mean_bias": [1, 6], "fake_d": [1, 6], "shift": [1, 4, 6], "thu": [1, 3, 6, 9], "incorrect": [1, 6], "iterativeimput": [1, 6, 9], "iter": [1, 6], "minmaxscal": [1, 6], "powertransform": [1, 6], "quantiletransform": [1, 6], "robustscal": [1, 6], "worth": [1, 6, 9], "n_compon": [1, 4, 6], "receiv": [1, 6, 7], "second_transform": [1, 6], "fixedrollingmean": [1, 6], "disabl": [1, 6], "rollingmean10": [1, 6], "rollingmean100thn": [1, 6], "len": [1, 3, 4, 6], "minimum": [1, 4, 6, 9], "convert": [1, 4, 6, 9], "pct_chang": [1, 6], "lot": [1, 4, 6, 9], "sin": [1, 6], "log": [1, 3, 6, 9], "lag": [1, 4, 6], "seasonaldifferencemean": [1, 6], "seasonaldifference7": [1, 6], "28": [1, 3, 4, 6], "parameter": [1, 6], "center": [1, 6], "around": [1, 4, 6], "record": [1, 2, 3, 5, 6, 7], "bin": [1, 3, 6], "move": [1, 3, 4, 6], "lose": [1, 6], "smoother": [1, 6], "scipi": [1, 4, 6, 9], "hp_filter": [1, 6], "decompos": [1, 6], "exponenti": [1, 4, 6, 9], "joint": [1, 6], "differenc": [1, 4, 6], "vector": [1, 3, 4, 6], "box": [1, 6], "tiao": [1, 6], "align": [1, 6], "tailor": [1, 6], "wish": [1, 6], "good": [1, 6, 9], "cheer": [1, 6], "local": [1, 4, 6], "state": [1, 4, 6], "clip": [1, 6], "std": [1, 4, 6], "awai": [1, 6], "compens": [1, 6], "croston": [1, 6], "inspir": [1, 6, 9], "magnitud": [1, 2, 4, 6, 9], "occurr": [1, 6, 9], "intermitt": [1, 2, 6], "fourier": [1, 6], "harmon": [1, 6], "reintroduc": [1, 6], "within": [1, 6], "diff": [1, 3, 6], "overwrit": [1, 6, 9], "baxter": [1, 6], "king": [1, 4, 6], "bandpass": [1, 6], "fir": [1, 6], "firwin": [1, 6], "basi": [1, 4, 6], "recombin": [1, 3, 6], "changepoint": [1, 4, 6], "thrown": [1, 4, 6], "fun": [1, 6], "poisson": [1, 6], "applic": [1, 6], "argument": [1, 6], "techniqu": [1, 6], "directli": [1, 6, 7, 9], "fillzero": [1, 6], "undo": [1, 6], "mad": [1, 6], "classmethod": [1, 6], "retriev": [1, 2, 6], "legaci": [1, 6], "min_occurr": [1, 3, 6], "splash_threshold": [1, 3, 6], "65": [1, 3, 6], "use_dayofmonth_holidai": [1, 3, 6], "use_wkdom_holidai": [1, 3, 6], "use_wkdeom_holidai": [1, 3, 6], "use_lunar_holidai": [1, 3, 6], "use_lunar_weekdai": [1, 3, 6], "use_islamic_holidai": [1, 3, 6], "use_hebrew_holidai": [1, 3, 6], "use_hindu_holidai": [1, 3, 6], "holiday_impact": [1, 3, 6], "popul": [1, 3, 6], "day_holidai": [1, 3, 6], "join": [1, 2, 3, 6], "rather": [1, 3, 6, 9], "format": [1, 2, 3, 4, 6, 7, 9], "series_flag": [1, 3, 6], "contan": [1, 3, 6], "holiday_nam": [1, 3, 6], "anomaly_scor": [1, 3, 6], "include_anomali": [1, 3], "transformation_dict": [1, 3, 4], "model_str": [1, 3], "parameter_dict": [1, 3], "starttimestamp": [1, 3], "return_model": [1, 3], "model_count": [1, 3], "feed": [1, 3], "pipelin": [1, 3], "width": [1, 3, 6], "ask": [1, 3], "few": [1, 3], "tranform": [1, 3], "03": [1, 4, 6], "02": [1, 4, 6], "005": [1, 6], "002": [1, 6], "06": [1, 4, 6], "04": [1, 6], "na_prob_dict": [1, 6], "datepartregressionimput": [1, 6], "025": [1, 6], "iterativeimputerextratre": [1, 6], "0001": [1, 4, 6], "knnimput": [1, 6], "seasonalitymotifimputer1k": [1, 6], "seasonalitymotifimputerlinmix": [1, 6], "fast_param": [1, 6], "superfast_param": [1, 6], "traditional_ord": [1, 6], "transformer_min_depth": [1, 6], "allow_non": [1, 6], "no_nan_fil": [1, 6], "choosen": [1, 6, 9], "signal": [1, 6, 9], "transformt": [1, 8], "summar": [1, 4, 6, 9], "backfil": [1, 6], "bfill": [1, 6], "head": [1, 3, 5, 6, 9], "regressor_train": [1, 6], "iloc": [1, 6, 9], "thing": [1, 4, 6, 9], "feature_agglomer": [1, 6], "gaussian_random_project": [1, 6], "deal": [1, 6, 9], "prefil": [1, 6], "elsewher": [1, 6], "regressor_forecast": [1, 6], "simple_binar": [1, 6], "encode_holiday_typ": [1, 6], "distribut": [1, 2, 3, 6, 7], "gamma": [1, 2, 4, 6], "univari": [1, 4, 6, 9], "holiday_regr_styl": [1, 6], "preprocessing_param": [1, 6], "datepart": [1, 4, 6], "been": [1, 3, 6, 9], "peopl": [1, 6], "machin": [1, 6, 7], "elabor": [1, 6], "build": [1, 6, 9], "And": [1, 4, 6, 7], "post": [1, 6, 7, 9], "hoc": [1, 6], "want": [1, 6, 9], "easili": [1, 6, 9], "categor": [1, 2, 6], "discard": [1, 6], "annoi": [1, 6], "countri": [1, 6], "req": [1, 3, 6], "pkg": [1, 6], "subdiv": [1, 6], "subdivis": [1, 6], "resampl": [1, 6], "creation": [1, 4, 6], "swappabl": [1, 6], "infer_freq": [1, 6], "date_start": [1, 2], "date_end": [1, 2], "artif": [1, 2, 9], "wiki": [1, 2, 3], "united_st": [1, 2], "germani": [1, 2], "list_of_highest": [1, 2], "grossing_film": [1, 2], "jesu": [1, 2], "michael_jackson": [1, 2], "list_of_united_states_cities_by_popul": [1, 2], "microsoft_offic": [1, 2], "google_chrom": [1, 2], "periodic_t": [1, 2], "standard_devi": [1, 2, 9], "easter": [1, 2], "christma": [1, 2, 9], "chinese_new_year": [1, 2], "thanksgiv": [1, 2, 9], "list_of_countries_that_have_gained_independence_from_the_united_kingdom": [1, 2], "history_of_the_hamburg": [1, 2], "elizabeth_ii": [1, 2], "william_shakespear": [1, 2], "george_washington": [1, 2], "cleopatra": [1, 2], "df2": [1, 2], "observation_start": [1, 2], "2017": [1, 2, 6], "weather_year": [1, 2], "trends_list": [1, 2, 9], "gov_domain_list": [1, 2, 9], "wikipedia_pag": [1, 2, 9], "fred_seri": [1, 2, 9], "dgs10": [1, 2], "t5yie": [1, 2], "sp500": [1, 2], "dexuseu": [1, 2], "sleep_second": [1, 2, 9], "fred_kei": [1, 2], "93873d40f10c20fe6f6e75b1ad0aed4d": [1, 2], "weather_data_typ": [1, 2], "wsf2": [1, 2], "prcp": [1, 2], "weather_st": [1, 2, 9], "usw00014771": [1, 2], "ticker": [1, 2, 9], "london_air_st": [1, 2, 9], "weather_event_typ": [1, 2, 9], "earthquake_min_magnitud": [1, 2, 9], "data_file_nam": [1, 2], "zip": [1, 2], "to_csv": [1, 2], "compress": [1, 2], "archive_nam": [1, 2], "compresslevel": [1, 2], "sourc": [1, 2, 4, 6, 9], "wikimedia": [1, 2], "foundat": [1, 2], "traffic": [1, 2, 9], "mn": [1, 2], "dot": [1, 2], "via": [1, 2], "uci": [1, 2], "repositori": [1, 2], "2021": [1, 2, 3, 4, 9], "introduce_nan": [1, 2], "introduce_random": [1, 2], "123": [1, 2, 3, 6], "null": [1, 2, 6], "observation_end": [1, 2], "dcoilwtico": [1, 2], "wpu0911": [1, 2], "msft": [1, 2], "cycl": [1, 2, 4], "microsoft": [1, 2], "trends_geo": [1, 2], "awnd": [1, 2], "tavg": [1, 2], "usw00094846": [1, 2], "usw00014925": [1, 2], "ct3": [1, 2], "sk8": [1, 2], "london_air_speci": [1, 2], "pm25": [1, 2], "london_air_dai": [1, 2], "180": [1, 2], "earthquake_dai": [1, 2], "gsa_kei": [1, 2], "nasa": [1, 2], "gov": [1, 2], "gov_domain_limit": [1, 2], "600": [1, 2], "wiki_languag": [1, 2], "en": [1, 2, 3, 6, 9], "28z": [1, 2], "29": [1, 2], "winter": [1, 2, 9], "weather": [1, 2, 9], "storm": [1, 2], "caiso_queri": [1, 2], "eia_kei": [1, 2], "eia_respond": [1, 2], "miso": [1, 2], "pjm": [1, 2], "tva": [1, 2], "us48": [1, 2], "300": [1, 2, 4], "activ": [1, 2, 4, 9], "internet": [1, 2, 9], "connect": [1, 2, 9], "respect": [1, 2, 6, 9], "free": [1, 2, 7], "heavili": [1, 2, 4, 6, 9], "exclud": [1, 2, 6], "d": [1, 2, 3, 4, 6, 7, 9], "earliest": [1, 2, 4], "get_seri": [1, 2], "yfinanc": [1, 2, 9], "api": [1, 2, 7, 9], "restrict": [1, 2, 4], "stlouisf": [1, 2], "org": [1, 2, 3, 4, 6, 9], "doc": [1, 2, 4, 6, 7, 9], "api_kei": [1, 2], "html": [1, 2, 4, 6, 9], "fredapi": [1, 2, 9], "stock": [1, 2, 7, 9], "pypi": [1, 2], "keyword": [1, 2], "pytrend": [1, 2, 9], "ncei": [1, 2], "noaa": [1, 2], "ghcn": [1, 2], "snow": [1, 2], "tmax": [1, 2], "tmin": [1, 2], "wsf1": [1, 2], "wsf5": [1, 2], "wsfg": [1, 2], "station": [1, 2], "londonair": [1, 2], "uk": [1, 2], "london_speci": [1, 2], "london": [1, 2], "air": [1, 2], "smallest": [1, 2, 3], "earthquak": [1, 2], "usg": [1, 2], "open": [1, 2, 5, 9], "gsa": [1, 2], "dap": [1, 2], "dist": [1, 2, 4, 9], "govern": [1, 2], "domain": [1, 2, 6], "veri": [1, 2, 4, 6, 9], "usp": [1, 2], "ncbi": [1, 2], "nlm": [1, 2], "nih": [1, 2], "cdc": [1, 2], "ir": [1, 2], "usajob": [1, 2], "studentaid": [1, 2], "usembassi": [1, 2], "tsunami": [1, 2], "smaller": [1, 2, 3, 4, 6, 9], "10000": [1, 2], "wikipedia": [1, 2, 3], "encod": [1, 2, 3, 9], "underscor": [1, 2], "www1": [1, 2], "ncdc": [1, 2], "pub": [1, 2, 6], "swdi": [1, 2], "stormev": [1, 2], "csvfile": [1, 2], "pdf": [1, 2, 6], "ene_slr": [1, 2], "hardcod": [1, 2], "queri": [1, 2, 6], "server": [1, 2], "download": [1, 2, 9], "feder": [1, 2], "reserv": [1, 2], "loui": [1, 2], "econom": [1, 2], "indic": [1, 2, 3, 6], "week": [1, 2], "petroleum": [1, 2], "industri": [1, 2], "eia": [1, 2], "annual": [1, 2], "cleaner": [1, 6], "pivot_t": [1, 6], "determin": [1, 4, 6], "provid": [1, 3, 4, 6, 9], "template_col": [1, 3], "transformationparamet": [1, 3, 4, 5], "horizontal_subset": [1, 3], "internal_valid": [1, 3], "albeit": [1, 3, 9], "she": [1, 3], "turn": [1, 3], "me": [1, 3], "newt": [1, 3], "got": [1, 3, 4], "cpu": [1, 3, 4, 6, 7, 9], "meant": [1, 3], "nich": [1, 3], "tell": [1, 3, 4, 9], "insid": [1, 3, 9], "instal": [2, 4, 6], "fredkei": 2, "seriesnamedict": 2, "simplest": [2, 9], "sure": [2, 6, 7, 9], "request": [2, 6, 7, 9], "pair": 2, "seriesnam": 2, "anyth": [2, 4, 6], "second": [2, 4, 6, 9], "sleep": 2, "chanc": 2, "mon": [3, 6], "jul": [3, 6], "18": [3, 4], "19": [3, 4], "55": 3, "author": [3, 4, 6], "colin": [3, 4, 6, 9], "mid": [3, 6], "submitted_paramet": 3, "sort_column": 3, "sort_ascend": 3, "max_result": 3, "recursive_count": 3, "old": [3, 4, 9], "No": [3, 4, 6, 7], "mate": 3, "sanderson": 3, "submitted_paramt": 3, "hyperparamet": 3, "per_timestamp_smap": 3, "per_series_metr": [3, 4], "per_series_ma": 3, "per_series_rms": 3, "per_series_mad": 3, "per_series_contour": 3, "per_series_spl": 3, "per_series_ml": 3, "per_series_iml": 3, "per_series_max": 3, "per_series_oda": 3, "per_series_mqa": 3, "per_series_dwa": 3, "per_series_ewma": 3, "per_series_uwms": 3, "per_series_smooth": 3, "per_series_m": 3, "per_series_mats": 3, "per_series_wasserstein": 3, "per_series_dwd": 3, "correspond": [3, 4, 6], "order": [3, 4, 6, 9], "another_ev": 3, "merg": 3, "onto": 3, "validation_round": 3, "current_gener": 3, "traceback": 3, "mosaic_us": 3, "additional_msg": 3, "who": [3, 4], "tim": 3, "hyperparamt": 3, "prepar": 3, "info": [3, 6], "print": [3, 5, 6, 7, 9], "statement": 3, "keyboard": 3, "interrupt": [3, 7], "caught": [3, 4], "break": 3, "tracebook": 3, "represent": 3, "everi": [3, 4, 6, 9], "existing_templ": 3, "new_poss": 3, "selection_col": 3, "new_possibl": 3, "namess": 3, "judg": [3, 9], "hash": 3, "b": [3, 6, 7], "ident": [3, 4], "return_score_dict": 3, "made": [3, 4, 6, 9], "mage": [3, 9], "bigger": 3, "results_object": 3, "total_valid": 3, "models_to_us": [3, 4], "model_prob": 3, "counter": [3, 6], "n_model": 3, "keyword_format": 3, "preceed": [3, 9], "dict_arrai": 3, "recurs": [3, 5, 9], "unnest": 3, "validation_result": [3, 5, 7], "groupby_col": 3, "all_result": 3, "corr": 3, "onehot": 3, "poli": 3, "100000": [3, 6], "dimens": [3, 4, 6, 9], "fake": [3, 6], "purpos": [3, 6, 9], "fri": [3, 6], "nov": 3, "13": [3, 4, 9], "45": [3, 4], "base_models_onli": 3, "tensorflow": [3, 4, 9], "jan": [3, 4], "27": [3, 6], "36": [3, 4], "lag_1": [3, 4, 6], "lag_2": [3, 4], "nearest": [3, 4, 6], "ndim": 3, "ae": 3, "precalcul": 3, "arr": [3, 6], "loss": [3, 4, 9], "chi": 3, "squar": [3, 6, 9], "histogram": 3, "unchang": 3, "flat": [3, 6, 9], "concern": [3, 9], "bluff": 3, "river": 3, "elev": 3, "equiavel": 3, "last_of_arrai": [3, 4], "direciton": 3, "growth": [3, 4, 6], "declin": [3, 4], "scaler": [3, 4, 6], "cumsum_a": [3, 4], "diff_a": [3, 4], "extra": [3, 9], "precomput": [3, 4], "effici": [3, 4, 6, 9], "loop": [3, 4], "worri": 3, "them": [3, 9], "detail": [3, 4, 6, 7, 9], "bandwidth": 3, "kl": 3, "diverg": 3, "p": [3, 4, 6, 7, 9], "q": [3, 4, 6, 7, 9], "epsilon": [3, 4, 6], "1e": [3, 6], "perecentag": 3, "progress": [3, 7, 9], "along": [3, 6, 9], "differenti": [3, 9], "sole": 3, "optim": [3, 4, 7, 9], "unanchor": 3, "1d": [3, 6], "nan_flag": [3, 6], "baselin": 3, "naiv": [3, 4, 7, 9], "poorli": [3, 6, 9], "85": [3, 5], "largest": [3, 9], "full_error": 3, "le": 3, "y_pred": [3, 4], "y_true": [3, 4], "penal": [3, 9], "underestim": [3, 9], "overestim": [3, 9], "avoid": [3, 6, 7, 9], "divid": 3, "aren": [3, 4], "down": [3, 6, 9], "bad": [3, 9], "er": 3, "push": 3, "exclus": 3, "sqe": 3, "catlin": [3, 6, 7], "syllepsi": 3, "live": [3, 7], "22": [3, 4, 6], "categori": [3, 6], "OR": 3, "being": [3, 4, 6, 7, 9], "pinbal": [3, 9], "gradient": 3, "volatil": [3, 6, 9], "precomputed_spl": 3, "unmatch": 3, "poor": [3, 9], "penalty_threshold": 3, "view": [3, 6, 9], "strength": [3, 6], "earth": 3, "perhap": [3, 6], "relev": [3, 6], "unsort": 3, "extract": [3, 4], "py": [3, 6, 7, 9], "amfm": 3, "possibli": [3, 4, 6], "modif": 3, "structur": [3, 4, 6], "11": [3, 4, 9], "2023": [3, 4, 6, 7], "validation_param": 3, "etc": [3, 6, 9], "clean": [3, 6, 9], "beyond": [3, 4, 6], "constant": [4, 6], "vol": 4, "garch": 4, "o": [4, 6, 7], "power": [4, 9], "rescal": 4, "maxit": 4, "200": [4, 6], "linux": [4, 6, 9], "distro": 4, "confid": [4, 6], "multiprocess": [4, 6, 9], "uniniti": 4, "fit_runtim": 4, "timedelta": 4, "hold": 4, "timeseri": [4, 6, 9], "last_dat": 4, "forecast_index": 4, "forecast_column": 4, "predict_runtim": 4, "transformation_runtim": 4, "per_timestamp": 4, "avg_metr": 4, "avg_metrics_weight": 4, "form": [4, 6, 9], "exce": 4, "constraint_valu": [4, 6], "constraint_direct": [4, 6], "horizon": [4, 6, 9], "window_agg": 4, "go": [4, 9], "soft": 4, "decim": [4, 6], "dampen": 4, "gradual": 4, "flatten": 4, "98": 4, "series_weight": 4, "per_timestamp_error": 4, "column_nam": 4, "evalut": 4, "against": 4, "suboptim": 4, "update_datetime_nam": 4, "datetime_column": 4, "remove_zero": [4, 9], "title_substr": 4, "ax": [4, 6], "matplotlib": [4, 9], "dash": 4, "vertic": 4, "intens": 4, "shade": 4, "region": [4, 6], "xlim_right": 4, "grid": [4, 7], "certain": 4, "group_col": 4, "y_col": 4, "totalruntimesecond": 4, "train_last_d": 4, "cmap_nam": 4, "gist_rainbow": 4, "runtimes_data": 4, "xlim": 4, "title_suffix": 4, "point_method": 4, "canberra": [4, 6], "sample_fract": [4, 6], "comparison_transform": 4, "combination_transform": 4, "adapt": 4, "struggl": 4, "short": 4, "max_window": [4, 6], "weighted_mean": 4, "midhing": [4, 6], "cdist": [4, 9], "closest": [4, 6, 9], "consid": [4, 9], "extend_df": 4, "mean_rolling_period": 4, "macd_period": 4, "std_rolling_period": 4, "max_rolling_period": 4, "min_rolling_period": 4, "ewm_var_alpha": 4, "quantile90_rolling_period": 4, "quantile10_rolling_period": 4, "ewm_alpha": 4, "additional_lag_period": 4, "abs_energi": 4, "rolling_autocorr_period": 4, "nonzero_last_n": 4, "polynomial_degre": [4, 6], "scale_full_x": 4, "cointegration_lag": 4, "series_hash": 4, "frac_slic": 4, "ala": 4, "ml": [4, 9], "static_regressor": 4, "2024": [4, 6, 9], "changepoint_spac": [4, 6], "changepoint_distance_end": [4, 6], "lambda_": 4, "ridg": 4, "minim": [4, 9], "covari": [4, 6], "ratio": 4, "num_regressor_seri": 4, "nan_euclidean": [4, 6, 9], "include_differenc": [4, 6], "stride_s": [4, 6], "ob": [4, 6], "n_harmon": [4, 6], "state_transit": [4, 6], "process_nois": [4, 6], "observation_model": [4, 6], "observation_nois": [4, 6], "em_it": [4, 6], "undefin": 4, "solv": [4, 6, 9], "kalman": [4, 6, 9], "expens": [4, 7], "comparison": [4, 6], "mse": [4, 9], "minkowski": 4, "5000": [4, 6], "tradeoff": [4, 6], "own": [4, 9], "gather": 4, "phrase_len": 4, "magnitude_pct_change_sign": 4, "share": 4, "l2": 4, "max_motif": 4, "recency_weight": 4, "cutoff_threshold": 4, "cutoff_minimum": 4, "dark": [4, 6], "magic": [4, 6], "evil": 4, "mastermind": 4, "project": [4, 7], "knn": 4, "interest": [4, 9], "togeth": [4, 6, 9], "pairwise_dist": 4, "amount": [4, 6, 9], "choos": [4, 9], "sign_biased_mean": 4, "ridge_param": 4, "5e": 4, "warmup_pt": [4, 6], "seed_pt": 4, "seed_weight": 4, "batch_siz": 4, "batch_method": 4, "input_ord": 4, "nonlinear": 4, "variabl": [4, 6, 9], "autoregress": 4, "next": [4, 6, 9], "reservoir": 4, "quantinfo": 4, "ng": 4, "rc": 4, "paper": [4, 7], "gauthier": 4, "j": [4, 6, 7], "bollt": 4, "e": [4, 6, 7], "griffith": 4, "al": 4, "nat": 4, "commun": [4, 9], "5564": 4, "doi": 4, "1038": 4, "s41467": 4, "021": 4, "25801": 4, "pointless": 4, "lambda": [4, 6], "realiti": 4, "warmup": 4, "fine": [4, 9], "linearli": 4, "batch": [4, 7], "lastvalu": [4, 6], "concerto": 4, "g": [4, 6, 7], "minor": 4, "op": 4, "rv": 4, "315": 4, "produc": [4, 9], "phi": [4, 6], "max_cycl": 4, "2000": 4, "var_dampen": 4, "apply_pca": 4, "pca_n_compon": 4, "threshold_method": [4, 6], "threshold_valu": 4, "base_sc": 4, "x_scale": 4, "var_preprocess": 4, "var_postprocess": 4, "vari": [4, 6, 7, 9], "seem": [4, 9], "beta": [4, 6], "xa": 4, "xb": 4, "r_arr": 4, "inner": 4, "hungri": 4, "big": 4, "linpack": [4, 7, 9], "sensit": [4, 6, 9], "address": 4, "tue": 4, "sep": [4, 6], "57": 4, "assist": 4, "crgillespie22": 4, "gaussian_prior_mean": 4, "wishart_prior_scal": 4, "wishart_dof_excess": 4, "bayesian": [4, 6], "conjug": 4, "prior": [4, 6], "encourag": [4, 9], "coef": 4, "regular": [4, 6, 9], "peak": [4, 6], "matrix": [4, 6], "varianc": 4, "nois": [4, 6], "while": [4, 7, 9], "return_std": 4, "n_sampl": 4, "in_d": 4, "prefix": 4, "regr_": 4, "15000": 4, "l1": 4, "cost": 4, "lin": 4, "reg": 4, "lamb": [4, 6], "identity_matrix": 4, "neural": 4, "net": 4, "256": 4, "feature_subsample_r": 4, "adam": 4, "epoch": [4, 6], "32": [4, 6], "relu": 4, "rnn_type": 4, "lstm": 4, "kernel_initi": 4, "lecun_uniform": 4, "hidden_layer_s": 4, "huber": 4, "wrapper": [4, 6], "kera": 4, "rnn": 4, "cell": 4, "gru": 4, "layer": 4, "compil": [4, 9], "tf": 4, "set_se": 4, "head_siz": 4, "num_head": 4, "ff_dim": 4, "num_transformer_block": 4, "mlp_unit": 4, "128": 4, "mlp_dropout": 4, "dropout": 4, "io": [4, 6], "timeseries_transformer_classif": 4, "input_shap": 4, "output_shap": [4, 6], "ensemble_param": 4, "forecasts_runtim": 4, "model_weight": 4, "incompat": [4, 9], "bestn": [4, 9], "forecast_id": 4, "forecast_runtim": 4, "forecasts_list": 4, "ensemble_str": 4, "prematched_seri": 4, "use_valid": 4, "subset_flag": 4, "per_series2": 4, "only_specifi": 4, "outer": [4, 6], "full_mae_v": 4, "total_v": 4, "validation_test_index": 4, "known_match": 4, "available_model": 4, "full_model": 4, "error_matrix": 4, "error_list": 4, "col_nam": 4, "smoothing_window": 4, "metric_nam": 4, "id_to_group_map": 4, "unpredictability_adjust": 4, "classifier_param": 4, "classifi": 4, "unknown": 4, "construct": [4, 5, 6, 9], "x_predict": 4, "ensemble_list": 4, "models_sourc": 4, "all_seri": 4, "forecast_period": [4, 9], "datestamp": 4, "retur": 4, "safety_model": 4, "local_result": 4, "releas": 4, "amazon": 4, "realli": [4, 6], "mxnet": [4, 9], "gui": 4, "sorta": 4, "mayb": 4, "deprec": [4, 6, 9], "sad": 4, "excel": [4, 9], "routin": 4, "stabil": 4, "strong": 4, "suit": 4, "gluon_model": 4, "deepar": 4, "learning_r": 4, "context_length": 4, "npt": 4, "deepstat": 4, "wavenet": 4, "deepfactor": 4, "sff": 4, "mqcnn": 4, "deepvar": 4, "gpvar": 4, "nbeat": 4, "network": 4, "2forecastlength": [4, 6], "nforecastlength": 4, "unlik": [4, 6, 9], "df_index": 4, "freq": [4, 6, 9], "model_templ": 4, "silverkit": 4, "unitedst": 4, "inner_n_job": 4, "relat": [4, 9], "borrow": 4, "xinyu": 4, "chen": 4, "xinychen": 4, "transdim": 4, "medium": [4, 9], "articl": 4, "nan_to_num": 4, "pinv": 4, "On": [4, 9], "entri": 4, "dlascl": 4, "illeg": 4, "amplitude_threshold": 4, "eigenvalue_threshold": 4, "dynam": [4, 6, 9], "time_horizon": 4, "time_lag": 4, "lambda0": 4, "33333333": 4, "low": [4, 6, 9], "tensor": 4, "arxiv": [4, 6], "2104": 4, "14936": 4, "blob": 4, "master": 4, "mat": 4, "predictor": 4, "ipynb": 4, "rho": 4, "inner_maxit": 4, "tempor": 4, "sparse_mat": 4, "ind": 4, "w": [4, 5, 6], "psi": 4, "r": [4, 5, 6, 7], "pred_step": 4, "sparse_tensor": 4, "rho0": 4, "recogn": [4, 6, 7], "pred_time_step": 4, "time_interv": 4, "kernel": [4, 7], "dim": [4, 6], "tau": 4, "aq": 4, "rold": 4, "delta": 4, "sun": 4, "expanded_binar": [4, 6], "aspect": 4, "n_seri": [4, 6], "variou": [4, 6], "nixtla": 4, "Be": [4, 7], "commerci": 4, "mqloss": 4, "input_s": 4, "max_step": [4, 6], "early_stop_patience_step": 4, "scaler_typ": 4, "model_arg": 4, "point_quantil": 4, "document": [4, 6, 7, 9], "temp": 4, "za": 4, "facebook": 4, "sinc": [4, 9], "finicki": [4, 9], "yearly_season": 4, "weekly_season": 4, "daily_season": 4, "n_changepoint": 4, "changepoint_prior_scal": 4, "seasonality_mod": 4, "changepoint_rang": 4, "seasonality_prior_scal": 4, "weekly_seasonality_prior_scal": 4, "yearly_seasonality_prior_scal": 4, "yearly_seasonality_ord": 4, "holidays_prior_scal": 4, "thou": 4, "shall": 4, "neither": 4, "prece": 4, "off": [4, 6, 9], "changepoints_rang": 4, "trend_reg": 4, "trend_reg_threshold": 4, "ar_spars": 4, "seasonality_reg": 4, "n_lag": 4, "num_hidden_lay": 4, "d_hidden": 4, "loss_func": 4, "train_spe": 4, "training_start_d": 4, "training_end_d": 4, "custom_changepoint": 4, "distinct": [4, 7, 9], "uniform": [4, 6], "ecosystem": 4, "analyt": [4, 9], "control": [4, 9], "could": [4, 9], "93": 4, "mark": 4, "cours": [4, 7], "benn": 4, "yyyi": 4, "mm": 4, "dd": 4, "quotat": 4, "datetime64": 4, "dtype": [4, 6], "90": [4, 6], "max_epoch": 4, "max_encoder_length": 4, "hidden_s": 4, "n_layer": 4, "add_target_scal": 4, "target_norm": 4, "encodernorm": 4, "temporalfusiontransform": 4, "64": [4, 6], "78": 4, "model_kwarg": 4, "trainer_kwarg": 4, "callback": 4, "obsess": 4, "pt": 4, "lightn": [4, 9], "trainer": 4, "quantileloss": 4, "lesser": 4, "decis": [4, 7, 9], "tree": 4, "elast": 4, "forest": 4, "mlpregressor": 4, "adaboost": 4, "principl": 4, "nthn": 4, "max_depth": [4, 6], "min_samples_split": [4, 6], "forward_lag": [4, 6], "randomforest": 4, "quantile_param": 4, "min_samples_leaf": 4, "n_estim": 4, "250": 4, "frame": [4, 6], "multiari": 4, "window_s": [4, 6], "max_histori": 4, "one_step": 4, "processed_i": 4, "normalize_window": [4, 6], "sigma": [4, 6], "random_st": [4, 6], "extratre": 4, "add_date_part": 4, "x_transform": 4, "wise": [4, 9], "scienc": 4, "am": 4, "arthur": 4, "briton": 4, "ve": 4, "think": 4, "your": [4, 7, 9], "selv": 4, "re": 4, "individu": [4, 9], "ye": [4, 7, 9], "we": [4, 9], "rbf": 4, "noise_var": 4, "lambda_prim": 4, "polynomi": [4, 6], "locally_period": 4, "littl": [4, 9], "flexibl": [4, 6, 9], "toler": [4, 9], "\u03b3": 4, "reason": [4, 6, 9], "might": [4, 9], "365": [4, 6], "input_dim": [4, 6], "output_dim": [4, 6], "shuffl": [4, 6], "fourier_encoding_compon": 4, "model_dict": 4, "bootstrap": 4, "verbose_bool": 4, "multioutput": 4, "framework": [4, 6, 7], "mean_rol": 4, "slice_index": 4, "series_id_to_multiindex": 4, "bit": 4, "exog": 4, "exog_oo": 4, "exog_fc": 4, "sometim": 4, "c": [4, 6, 7, 9], "causal": 4, "ct": 4, "stationar": 4, "hour": [4, 6, 9], "k_factor": 4, "factor_ord": 4, "mamodel": 4, "mapr": 4, "factor_multipl": 4, "idiosyncratic_ar1": 4, "damped_trend": 4, "seasonal_period": 4, "formerli": 4, "damp": 4, "deseason": 4, "use_test": 4, "use_ml": 4, "damped_cycl": 4, "irregular": 4, "stochastic_cycl": 4, "stochastic_trend": 4, "stochastic_level": 4, "cov_typ": 4, "opg": 4, "lbfg": 4, "maxlag": [4, 6], "ic": 4, "fpe": 4, "determinist": 4, "k_ar_diff": [4, 6], "coint_rank": 4, "current_seri": 4, "xf": 4, "negloglik": 4, "conf_int": 4, "ar_ord": 4, "fit_method": 4, "hmc": 4, "num_step": 4, "tensorflowprob": 4, "42": 4, "0009999": 4, "layer_norm": 4, "dropout_r": 4, "512": [4, 6], "num_lay": 4, "hist_len": 4, "720": 4, "decoder_output_dim": 4, "final_decoder_hidden": 4, "num_split": 4, "min_num_epoch": 4, "train_epoch": 4, "patienc": 4, "epoch_len": 4, "permut": 4, "gpu_index": 4, "googl": 4, "research": 4, "mlp": 4, "num_cov_col": 4, "cat_cov_col": 4, "ts_col": 4, "train_rang": 4, "val_rang": 4, "test_rang": 4, "pred_len": 4, "loader": 4, "84": 5, "86": 5, "87": 5, "88": 5, "sort_valu": 5, "ascend": [5, 9], "groupbi": [5, 6], "reset_index": 5, "export2": 5, "export_fin": 5, "to_json": 5, "orient": [5, 6], "pprint": 5, "read_csv": 5, "autots_forecast_template_gen": 5, "jsn": 5, "json_temp": 5, "read": 5, "txt": 5, "dump": 5, "indent": 5, "sort_kei": 5, "41": 6, "21": [6, 7], "contextu": 6, "fall": [6, 7, 9], "densiti": 6, "sequenc": [6, 9], "anomal": 6, "itself": 6, "regard": 6, "1802": 6, "04431": 6, "anomaly_df": 6, "df_col": 6, "wkdom_holidai": 6, "wkdeom_holidai": 6, "lunar_holidai": 6, "lunar_weekdai": 6, "islamic_holidai": 6, "hebrew_holidai": 6, "hindu_holidai": 6, "max_featur": 6, "predict_interv": 6, "job": 6, "tol": 6, "max_it": 6, "responsibility_threshold": 6, "norm": 6, "rolling_period": 6, "surviv": 6, "outlieri": 6, "dataframm": 6, "rolling_zscor": 6, "sf": 6, "rolliing_zscor": 6, "convers": [6, 7], "chines": 6, "arab": 6, "datetime_index": 6, "christian": 6, "aspir": 6, "hebrew": 6, "pyluach": 6, "simlist": 6, "hindu": 6, "variat": [6, 9], "llm": 6, "put": 6, "appear": [6, 9], "still": [6, 7, 9], "welcom": 6, "epoch_adjust": 6, "islam": 6, "convertd": 6, "fitnr": 6, "timezon": 6, "new_moon": 6, "continu": 6, "pre": 6, "full_moon": 6, "julian": 6, "johansen": 6, "barba": 6, "towardsdatasci": 6, "canon": 6, "forgotten": 6, "4d1213396da1": 6, "p_mat": 6, "max_lag": 6, "return_eigenvalu": 6, "endog": 6, "det_ord": 6, "abbrevi": 6, "series_ord": 6, "trim": 6, "ex": 6, "modifi": 6, "train_min": 6, "train_max": 6, "final_growth": 6, "multiproces": 6, "conserv": 6, "intel": 6, "hyperthread": 6, "logic": 6, "psutil": [6, 9], "fallsback": 6, "mkl": [6, 9], "simd": 6, "otto": 6, "seiskari": 6, "mit": 6, "licens": 6, "resourc": [6, 9], "found": [6, 7, 9], "kevinkotz": 6, "www": [6, 9], "notebook": 6, "statespace_dfm_coincid": 6, "introduct": 6, "commandeur": 6, "koopman": 6, "chp": 6, "andrew": 6, "harvei": 6, "notat": 6, "transit": 6, "x_k": 6, "x_": 6, "q_": 6, "qquad": 6, "sim": 6, "y_k": 6, "h": [6, 7], "r_k": 6, "hidden": 6, "system": [6, 9], "matric": 6, "suitabl": 6, "definit": 6, "simo": 6, "sarkk\u00e4": 6, "2013": 6, "cambridg": 6, "univers": 6, "press": [6, 7], "aalto": 6, "fi": 6, "ssarkka": 6, "cup_book_online_20131111": 6, "simdkalman": 6, "kf": 6, "diag": 6, "denot": 6, "initial_valu": 6, "initial_covari": 6, "ey": 6, "third": [6, 9], "cov": 6, "29311384": 6, "06948961": 6, "19959416": 6, "00777587": 6, "02528967": 6, "pred_mean": 6, "pred_stdev": 6, "sqrt": 6, "71543": 6, "65322": 6, "multi": 6, "dimension": 6, "howev": [6, 9], "flexibli": 6, "broadcast": 6, "rule": 6, "oper": 6, "n_state": 6, "n_var": 6, "n_measur": 6, "main": 6, "interfac": 6, "accord": 6, "natur": [6, 9], "scalar": 6, "3d": 6, "lock": 6, "n_test": 6, "likelihood": 6, "log_likelihood": 6, "explan": 6, "With": [6, 9], "boolean": 6, "pairwis": [6, 9], "member": 6, "subresult": 6, "field": 6, "pairwise_covari": 6, "n_iter": 6, "interpret": 6, "mathbb": 6, "x_0": 6, "rm": 6, "prior_mean": 6, "prior_cov": 6, "x_j": 6, "simgl": 6, "y_1": 6, "ldot": 6, "y_j": 6, "y_t": 6, "smooth_mean": 6, "smooth_covari": 6, "smoothing_gain": 6, "y_": 6, "posterior_mean": 6, "posterior_covari": 6, "posterior": 6, "operand": 6, "transpos": 6, "initial_mean": 6, "correct": 6, "allow_auto": 6, "next_smooth_mean": 6, "next_smooth_covari": 6, "prior_covari": 6, "statespac": 6, "oct": 6, "07": 6, "37": 6, "colincatlin": 6, "n_harm": 6, "freq_rang": 6, "23": [6, 9], "59": 6, "sampling_frequ": 6, "numtap": 6, "cutoff_hz": 6, "ham": 6, "convolut": 6, "lfilter": 6, "pad": 6, "tap": 6, "hz": 6, "hann": 6, "filtered_data": 6, "chunk_siz": 6, "data_typ": 6, "time_seri": 6, "grouping_method": 6, "tile": 6, "n_group": 6, "hier_id": 6, "bottom": 6, "holidays_subdiv": 6, "fallback": 6, "unavail": 6, "bias": 6, "simple_2": 6, "linear_mix": 6, "mean_weight": 6, "back_method": 6, "half": [6, 9], "remaind": 6, "slice_al": 6, "keepna": 6, "phase": 6, "moon": 6, "stackoverflow": 6, "2531541": 6, "9492254": 6, "keturn": 6, "earlier": 6, "john": 6, "walker": 6, "ecc": 6, "016718": 6, "equat": 6, "2444237": 6, "905": 6, "ecliptic_longitude_epoch": 6, "278": 6, "83354": 6, "ecliptic_longitude_perige": 6, "282": 6, "596403": 6, "eccentr": 6, "moon_mean_longitude_epoch": 6, "975464": 6, "moon_mean_perigee_epoch": 6, "349": 6, "383063": 6, "illumin": 6, "zone": 6, "2444238": 6, "asia": 6, "matter": 6, "central": 6, "precis": 6, "75": 6, "nextnew": 6, "krstn": 6, "eu": 6, "nanpercentil": 6, "in_arr": 6, "rollov": 6, "support": [6, 7, 9], "driven": 6, "placehold": 6, "mixtur": 6, "gum": 6, "diseas": 6, "credibl": 6, "spell": 6, "cast": 6, "variable_pct_chang": 6, "upon": 6, "upper_error": 6, "lower_error": 6, "errorrang": 6, "cum": 6, "qtp": 6, "xn": 6, "broaden": 6, "although": [6, 7, 9], "corrupt": 6, "bay": 6, "theorem": 6, "adi_threshold": 6, "cvar_threshold": 6, "flat_threshold": 6, "92": 6, "new_product_threshold": 6, "seasonal_threshold": 6, "errat": 6, "lumpi": 6, "new_product": 6, "finiki": 6, "declar": 6, "new_product_correct": 6, "demand_profil": 6, "x_t_last_row": 6, "n_forecast": 6, "120": 6, "ensur": 6, "consecut": 6, "belong": 6, "hot": 6, "history_dai": 6, "set_index": 6, "weekdai": 6, "recur": 6, "commonli": [6, 9], "repeat": [6, 9], "ag": 6, "degre": 6, "holdiay_countri": 6, "dtindex_futur": 6, "full_sort": 6, "nan_arrai": 6, "include_on": 6, "very_smal": 6, "typic": [6, 9], "wavelet_typ": 6, "morlet": 6, "reshap": [6, 9], "na_str": 6, "categorical_fillna": 6, "handle_unknown": [6, 9], "use_encoded_valu": 6, "downcast": 6, "unalt": 6, "missing_valu": 6, "ordinalencod": [6, 9], "to_numer": 6, "messag": [6, 9], "convert_dtyp": 6, "polish": 6, "999": 6, "dateoffset": [6, 9], "somewher": 6, "pydata": [6, 9], "stabl": [6, 9], "user_guid": [6, 9], "cut": 6, "older": [6, 9], "eventu": 6, "incomplet": [6, 9], "upsampl": [6, 7], "silenc": 6, "rest": 6, "configur": 6, "wide_arr": 6, "gst": 6, "sgt": 6, "46": 6, "error_buff": 6, "z_init": 6, "z_limit": 6, "z_step": 6, "max_contamin": 6, "sd_weight": 6, "anomaly_count_weight": 6, "errors_al": 6, "obj": 6, "maxim": 6, "reduct": 6, "invert": 6, "meet": [6, 9], "yield": 6, "itertool": 6, "more_itertool": 6, "descript": [6, 9], "circa": 6, "decay_span": 6, "displacement_row": 6, "span": 6, "decai": 6, "soften": 6, "first_value_onli": 6, "on_invers": 6, "lanczos_factor": 6, "return_diff": 6, "on_transform": 6, "implent": 6, "somewhat": 6, "statmodelsfilt": 6, "linearregress": 6, "suffix": 6, "_lltmicro": 6, "vagu": 6, "gap": 6, "link": [6, 7], "std_threshold": 6, "purg": 6, "THE": 6, "historic_growth": 6, "bounds_onli": 6, "cumul": 6, "imprecis": 6, "missing": 6, "scatter": 6, "dure": 6, "reverse_align": 6, "n_bin": 6, "kmean": 6, "kbin": 6, "irrevers": 6, "exponeti": 6, "extrapol": 6, "n_harmnon": 6, "quadrat": 6, "revers": [6, 9], "highest": [6, 7, 9], "But": 6, "1600": 6, "upstream": 6, "regression_param": 6, "grouping_forward_limit": 6, "max_level_shift": 6, "old_wai": 6, "serious": 6, "alter": 6, "rolling_window": 6, "n_futur": 6, "macro_micro": 6, "simpli": [6, 9], "residu": 6, "demand": [6, 9], "plai": 6, "center_on": 6, "assur": [6, 9], "run_ord": 6, "season_first": 6, "holiday_param": [6, 9], "trend_method": 6, "local_linear": 6, "dv": 6, "reintroduction_model": 6, "reintroducion": 6, "built": 6, "force_int": 6, "ceil": 6, "floor": 6, "decomp_typ": 6, "stl": 6, "seaonal": 6, "seaonsal": 6, "hilbert": 6, "method_arg": 6, "wiener": 6, "savgol_filt": 6, "butter": 6, "cheby1": 6, "cheby2": 6, "ellip": 6, "bessel": 6, "oh": 6, "nice": 6, "ash": 6, "my": 6, "tomato": 6, "pippin": 6, "lm": 6, "tt": 6, "yy": 6, "amp": 6, "omega": 6, "fitfunc": 6, "unsym": 6, "question": 6, "16716302": 6, "sine": 6, "curv": 6, "pylab": 6, "deviat": [6, 9], "revert": 6, "theta_valu": 6, "reconstruct": 6, "halflif": 6, "23199796": 6, "condens": 6, "context_slic": 6, "halfmax": 6, "forecastlength": 6, "twice": 6, "daubechi": 6, "db2": 6, "cosin": 6, "wave": 6, "envelop": 6, "haar": 6, "mexican": 6, "hat": 6, "ricker": 6, "complex": [6, 7], "max_ord": 6, "phase_shift": 6, "anchor": 6, "choic": [6, 9], "unit": [6, 9], "apart": 6, "7734": 6, "float32": 6, "n_record": 6, "num_column": 6, "num_indic": 6, "braycurti": 6, "start_index": 6, "include_last": 6, "indici": 6, "include_differ": 6, "window_shap": 6, "writeabl": 6, "neighbourhood": 6, "gist": 6, "seberg": 6, "3866040": 6, "newer": 6, "toggl": 6, "__version__": 6, "skip_siz": 6, "downsampl": 6, "num": 6, "window_length": 6, "70296498": 6, "numba": 6, "70304475": 6, "1234": 6, "1step": 6, "num_ob": 6, "stride": 6, "trick": 6, "lib": [6, 9], "stride_trick": 6, "rapidli": 7, "deploi": 7, "m6": 7, "competit": 7, "deliv": 7, "invest": 7, "market": 7, "dozen": 7, "usabl": [7, 9], "These": [7, 9], "addition": [7, 9], "proprietari": 7, "readili": 7, "ten": 7, "hundr": 7, "thousand": [7, 9], "exogen": 7, "integr": 7, "automl": 7, "flagship": 7, "abil": [7, 9], "flowchart": 7, "additon": 7, "advis": 7, "come": [7, 9], "ideal": [7, 9], "_hourli": [7, 9], "_monthli": 7, "_weekli": [7, 9], "_yearli": [7, 9], "_live_daili": 7, "fast_parallel": 7, "2019": [7, 9], "forecasts_df": [7, 9], "forecasts_up": 7, "forecasts_low": 7, "particular": [7, 9], "extended_tutori": 7, "md": 7, "guid": 7, "production_exampl": [7, 9], "predefin": 7, "pretti": [7, 9], "environ": [7, 9], "toward": [7, 9], "prioriti": 7, "ram": 7, "instanc": 7, "pretrain": 7, "crtl": 7, "recov": 7, "udf": 7, "obvious": [7, 9], "2x": 7, "3x": 7, "5x": 7, "no_shared_fast": 7, "decreas": 7, "poorer": 7, "satisfactori": [7, 9], "shortag": 7, "pleas": 7, "report": 7, "significantli": 7, "bla": [7, 9], "feedback": 7, "feel": 7, "favorit": 7, "codebas": 7, "td": 7, "Into": 7, "cat": 7, "henc": 7, "logo": 7, "subpackag": 8, "modul": 8, "_daili": 9, "autot": 9, "df_long": 9, "transact": 9, "altern": 9, "coerc": 9, "handi": 9, "side": 9, "oldest": 9, "advantag": 9, "interg": 9, "troubl": 9, "sudden": 9, "overs": 9, "misrepres": 9, "promot": 9, "critic": 9, "discontinu": 9, "tricki": 9, "necess": 9, "leakag": 9, "firstli": 9, "resembl": 9, "enough": 9, "taken": 9, "valdat": 9, "june": 9, "messi": 9, "act": 9, "treat": 9, "suspect": 9, "fairli": 9, "whole": 9, "idea": 9, "suffer": 9, "interst": 9, "94": 9, "minneapoli": 9, "paul": 9, "minnesota": 9, "great": 9, "demonstr": 9, "road": 9, "influenc": 9, "alongsid": 9, "volum": 9, "carri": 9, "care": 9, "weights_hourli": 9, "traffic_volum": 9, "49": 9, "168": 9, "lieu": 9, "upper_forecasts_df": 9, "lower_forecasts_df": 9, "By": 9, "impract": 9, "engin": 9, "simplic": 9, "fault": 9, "switch": 9, "evolv": 9, "develop": 9, "example_filenam": 9, "example_export": 9, "deeper": 9, "subsidiari": 9, "df_forecast": 9, "future_regressor_train2d": 9, "future_regressor_forecast2d": 9, "consider": 9, "overfit": 9, "secondli": 9, "composit": 9, "balanc": 9, "qualiti": 9, "favor": 9, "translat": 9, "symmetr": 9, "versatil": 9, "human": 9, "coverage_fract": 9, "logarithm": 9, "hiearchial": 9, "went": 9, "wavi": 9, "seriou": 9, "someth": 9, "score_breakdown": 9, "skew": 9, "pyplot": 9, "plt": 9, "2018": 9, "09": 9, "26": 9, "mosaic_df": 9, "situat": 9, "tradition": 9, "problem": 9, "exagger": 9, "unfortun": 9, "inher": 9, "sub": 9, "reassign": 9, "drive": 9, "label": 9, "recogniz": 9, "usal": 9, "splice": 9, "latter": 9, "depth": 9, "happen": 9, "no_shar": 9, "possbl": 9, "horizontal_gener": 9, "enembl": 9, "extens": 9, "theoret": 9, "studio": 9, "apt": 9, "yum": 9, "sudo": 9, "openbla": 9, "show_config": 9, "doubl": 9, "haven": 9, "broken": 9, "slide": 9, "poissonreg": 9, "squared_error": 9, "histgradientboostingregressor": 9, "uecm": 9, "uniform_filter1d": 9, "stat": 9, "spatial": 9, "Of": 9, "tend": 9, "cu91": 9, "cu101mkl": 9, "lightgbm": 9, "xgboost": 9, "bring": 9, "venv": 9, "anaconda": 9, "miniforg": 9, "numexpr": 9, "bottleneck": 9, "action": 9, "pystan": 9, "forg": 9, "dep": 9, "ext": 9, "pmdarima": 9, "dill": 9, "upgrad": 9, "pointlessli": 9, "mamba": 9, "tqdm": 9, "intelex": 9, "spyder": 9, "torchvis": 9, "torchaudio": 9, "cpuonli": 9, "gpu": 9, "cuda": 9, "mix": 9, "session": 9, "nvidia": 9, "smi": 9, "cudatoolkit": 9, "cudnn": 9, "nccl": 9, "ld_library_path": 9, "conda_prefix": 9, "perman": 9, "bashrc": 9, "env": 9, "mine": 9, "home": 9, "mambaforg": 9, "torch": 9, "url": 9, "whl": 9, "cu113": 9, "cu112": 9, "command": 9, "interchang": 9, "env_nam": 9, "softwar": 9, "oneapi": 9, "ai": 9, "toolkit": 9, "aikit37": 9, "aikit": 9, "modin": 9, "dpctl": 9, "config": 9, "omp_num_thread": 9, "use_daal4py_sklearn": 9, "bench": 9, "hang": 9, "clear": 9, "overload": 9, "consumpt": 9, "acceler": 9, "persist": 9, "discuss": 9, "reboot": 9, "heavi": 9, "odd": 9, "shouldn": 9, "greatli": 9, "proper": 9, "future_": 9, "certaini": 9, "Such": 9, "plan": 9, "organ": 9, "inorgan": 9, "busi": 9, "anticp": 9, "describ": 9, "hand": 9, "confusingli": 9, "why": 9, "harm": 9, "experi": 9, "scenario": 9, "examin": 9, "enforc": 9, "future_regressor_forecast_2": 9, "prediction_2": 9, "forecasts_df_2": 9, "respons": 9, "multilabel_confusion_matrix": 9, "classification_report": 9, "df_full": 9, "historic_lower_limit": 9, "risk_df_upp": 9, "risk_df_low": 9, "historic_upper_risk_df": 9, "historic_lower_risk_df": 9, "eval_low": 9, "eval_upp": 9, "pred_low": 9, "pred_upp": 9, "zero_divis": 9, "target_nam": 9, "effectiv": 9, "far": 9, "tighter": 9, "extrem": 9, "portion": 9, "analyz": 9, "pick": 9, "anti": 9, "signific": 9, "wiki_pag": 9, "mod": 9, "ll": 9, "full_dat": 9, "date_rang": 9, "2014": 9, "prophet_holidai": 9, "familiar": 9, "manuali": 9, "clarifi": 9, "text": 9, "editor": 9, "guarante": 9, "incorpor": 9, "crude": 9, "meaning": 9, "properli": 9, "coercibl": 9, "unconnect": 9, "transformer_dict": 9, "tran": 9, "df_tran": 9, "df_inv_return": 9, "tradit": 9, "draw": 9, "pool": 9, "massiv": 9, "global": 9, "pars": 9, "gradientboostingregressor": 9, "experiment": 9, "lapack": 9, "nyi": 9, "_": 9}, "objects": {"": [[1, 0, 0, "-", "autots"]], "autots": [[1, 1, 1, "", "AnomalyDetector"], [1, 1, 1, "", "AutoTS"], [1, 1, 1, "", "Cassandra"], [1, 1, 1, "", "EventRiskForecast"], [1, 1, 1, "", "GeneralTransformer"], [1, 1, 1, "", "HolidayDetector"], [1, 1, 1, "", "ModelPrediction"], [1, 4, 1, "", "RandomTransform"], [1, 3, 1, "", "TransformTS"], [1, 4, 1, "", "create_lagged_regressor"], [1, 4, 1, "", "create_regressor"], [2, 0, 0, "-", "datasets"], [3, 0, 0, "-", "evaluator"], [1, 4, 1, "", "infer_frequency"], [1, 4, 1, "", "load_artificial"], [1, 4, 1, "", "load_daily"], [1, 4, 1, "", "load_hourly"], [1, 4, 1, "", "load_linear"], [1, 4, 1, "", "load_live_daily"], [1, 4, 1, "", "load_monthly"], [1, 4, 1, "", "load_sine"], [1, 4, 1, "", "load_weekdays"], [1, 4, 1, "", "load_weekly"], [1, 4, 1, "", "load_yearly"], [1, 4, 1, "", "long_to_wide"], [1, 4, 1, "", "model_forecast"], [4, 0, 0, "-", "models"], [5, 0, 0, "-", "templates"], [6, 0, 0, "-", "tools"]], "autots.AnomalyDetector": [[1, 2, 1, "", "detect"], [1, 2, 1, "", "fit"], [1, 2, 1, "", "fit_anomaly_classifier"], [1, 2, 1, "", "get_new_params"], [1, 2, 1, "", "plot"], [1, 2, 1, "", "score_to_anomaly"]], "autots.AutoTS": [[1, 2, 1, "", "back_forecast"], [1, 3, 1, "", "best_model"], [1, 3, 1, "", "best_model_ensemble"], [1, 3, 1, "", "best_model_name"], [1, 3, 1, "", "best_model_params"], [1, 2, 1, "", "best_model_per_series_mape"], [1, 2, 1, "", "best_model_per_series_score"], [1, 3, 1, "", "best_model_transformation_params"], [1, 2, 1, "", "create_unpredictability_score"], [1, 3, 1, "", "df_wide_numeric"], [1, 2, 1, "", "diagnose_params"], [1, 2, 1, "", "expand_horizontal"], [1, 2, 1, "", "export_best_model"], [1, 2, 1, "", "export_template"], [1, 2, 1, "", "failure_rate"], [1, 2, 1, "", "fit"], [1, 2, 1, "", "fit_data"], [1, 2, 1, "", "get_metric_corr"], [1, 2, 1, "", "get_new_params"], [1, 2, 1, "", "get_params_from_id"], [1, 2, 1, "", "get_top_n_counts"], [1, 2, 1, "", "horizontal_per_generation"], [1, 2, 1, "", "horizontal_to_df"], [1, 2, 1, "", "import_best_model"], [1, 2, 1, "", "import_results"], [1, 2, 1, "", "import_template"], [1, 2, 1, "", "list_failed_model_types"], [1, 2, 1, "", "load_template"], [1, 2, 1, "", "mosaic_to_df"], [1, 2, 1, "", "parse_best_model"], [1, 2, 1, "", "plot_back_forecast"], [1, 2, 1, "", "plot_backforecast"], [1, 2, 1, "", "plot_chosen_transformer"], [1, 2, 1, "", "plot_failure_rate"], [1, 2, 1, "", "plot_generation_loss"], [1, 2, 1, "", "plot_horizontal"], [1, 2, 1, "", "plot_horizontal_model_count"], [1, 2, 1, "", "plot_horizontal_per_generation"], [1, 2, 1, "", "plot_horizontal_transformers"], [1, 2, 1, "", "plot_metric_corr"], [1, 2, 1, "", "plot_model_failure_rate"], [1, 2, 1, "", "plot_mosaic"], [1, 2, 1, "", "plot_per_series_error"], [1, 2, 1, "", "plot_per_series_mape"], [1, 2, 1, "", "plot_per_series_smape"], [1, 2, 1, "", "plot_series_corr"], [1, 2, 1, "", "plot_transformer_by_class"], [1, 2, 1, "", "plot_transformer_failure_rate"], [1, 2, 1, "", "plot_unpredictability"], [1, 2, 1, "", "plot_validations"], [1, 2, 1, "", "predict"], [1, 3, 1, "", "regression_check"], [1, 2, 1, "", "results"], [1, 2, 1, "", "retrieve_validation_forecasts"], [1, 2, 1, "", "save_template"], [1, 3, 1, "", "score_per_series"], [1, 2, 1, "", "validation_agg"]], "autots.AutoTS.initial_results": [[1, 3, 1, "", "model_results"]], "autots.Cassandra..anomaly_detector": [[1, 3, 1, "", "anomalies"], [1, 3, 1, "", "scores"]], "autots.Cassandra.": [[1, 3, 1, "", "holiday_count"], [1, 3, 1, "", "holidays"], [1, 3, 1, "", "params"], [1, 3, 1, "", "predict_x_array"], [1, 3, 1, "", "predicted_trend"], [1, 3, 1, "", "trend_train"], [1, 3, 1, "", "x_array"]], "autots.Cassandra": [[1, 2, 1, "", "analyze_trend"], [1, 2, 1, "", "auto_fit"], [1, 2, 1, "", "base_scaler"], [1, 2, 1, "", "compare_actual_components"], [1, 2, 1, "", "create_forecast_index"], [1, 2, 1, "", "create_t"], [1, 2, 1, "", "cross_validate"], [1, 2, 1, "", "feature_importance"], [1, 2, 1, "id0", "fit"], [1, 2, 1, "", "fit_data"], [1, 2, 1, "id1", "get_new_params"], [1, 2, 1, "", "get_params"], [1, 2, 1, "", "next_fit"], [1, 2, 1, "id2", "plot_components"], [1, 2, 1, "id3", "plot_forecast"], [1, 2, 1, "", "plot_things"], [1, 2, 1, "id4", "plot_trend"], [1, 2, 1, "id5", "predict"], [1, 2, 1, "", "predict_new_product"], [1, 2, 1, "", "process_components"], [1, 2, 1, "id6", "return_components"], [1, 2, 1, "", "rolling_trend"], [1, 2, 1, "", "scale_data"], [1, 2, 1, "", "to_origin_space"], [1, 2, 1, "", "treatment_causal_impact"], [1, 2, 1, "", "trend_analysis"]], "autots.Cassandra.holiday_detector": [[1, 2, 1, "", "dates_to_holidays"]], "autots.EventRiskForecast": [[1, 2, 1, "id9", "fit"], [1, 2, 1, "id10", "generate_historic_risk_array"], [1, 2, 1, "id11", "generate_result_windows"], [1, 2, 1, "id12", "generate_risk_array"], [1, 2, 1, "id13", "plot"], [1, 2, 1, "", "plot_eval"], [1, 2, 1, "id14", "predict"], [1, 2, 1, "id15", "predict_historic"], [1, 2, 1, "id16", "set_limit"]], "autots.GeneralTransformer": [[1, 2, 1, "", "fill_na"], [1, 2, 1, "", "fit"], [1, 2, 1, "", "fit_transform"], [1, 2, 1, "", "get_new_params"], [1, 2, 1, "", "inverse_transform"], [1, 2, 1, "", "retrieve_transformer"], [1, 2, 1, "", "transform"]], "autots.HolidayDetector": [[1, 2, 1, "", "dates_to_holidays"], [1, 2, 1, "", "detect"], [1, 2, 1, "", "fit"], [1, 2, 1, "", "get_new_params"], [1, 2, 1, "", "plot"], [1, 2, 1, "", "plot_anomaly"]], "autots.ModelPrediction": [[1, 2, 1, "", "fit"], [1, 2, 1, "", "fit_data"], [1, 2, 1, "", "fit_predict"], [1, 2, 1, "", "predict"]], "autots.datasets": [[2, 0, 0, "-", "fred"], [2, 4, 1, "", "load_artificial"], [2, 4, 1, "", "load_daily"], [2, 4, 1, "", "load_hourly"], [2, 4, 1, "", "load_linear"], [2, 4, 1, "", "load_live_daily"], [2, 4, 1, "", "load_monthly"], [2, 4, 1, "", "load_sine"], [2, 4, 1, "", "load_weekdays"], [2, 4, 1, "", "load_weekly"], [2, 4, 1, "", "load_yearly"], [2, 4, 1, "", "load_zeroes"]], "autots.datasets.fred": [[2, 4, 1, "", "get_fred_data"]], "autots.evaluator": [[3, 0, 0, "-", "anomaly_detector"], [3, 0, 0, "-", "auto_model"], [3, 0, 0, "-", "auto_ts"], [3, 0, 0, "-", "benchmark"], [3, 0, 0, "-", "event_forecasting"], [3, 0, 0, "-", "metrics"], [3, 0, 0, "-", "validation"]], "autots.evaluator.anomaly_detector": [[3, 1, 1, "", "AnomalyDetector"], [3, 1, 1, "", "HolidayDetector"]], "autots.evaluator.anomaly_detector.AnomalyDetector": [[3, 2, 1, "", "detect"], [3, 2, 1, "", "fit"], [3, 2, 1, "", "fit_anomaly_classifier"], [3, 2, 1, "", "get_new_params"], [3, 2, 1, "", "plot"], [3, 2, 1, "", "score_to_anomaly"]], "autots.evaluator.anomaly_detector.HolidayDetector": [[3, 2, 1, "", "dates_to_holidays"], [3, 2, 1, "", "detect"], [3, 2, 1, "", "fit"], [3, 2, 1, "", "get_new_params"], [3, 2, 1, "", "plot"], [3, 2, 1, "", "plot_anomaly"]], "autots.evaluator.auto_model": [[3, 4, 1, "", "ModelMonster"], [3, 1, 1, "", "ModelPrediction"], [3, 4, 1, "", "NewGeneticTemplate"], [3, 4, 1, "", "RandomTemplate"], [3, 1, 1, "", "TemplateEvalObject"], [3, 4, 1, "", "TemplateWizard"], [3, 4, 1, "", "UniqueTemplates"], [3, 4, 1, "", "back_forecast"], [3, 4, 1, "", "create_model_id"], [3, 4, 1, "", "dict_recombination"], [3, 4, 1, "", "generate_score"], [3, 4, 1, "", "generate_score_per_series"], [3, 4, 1, "", "horizontal_template_to_model_list"], [3, 4, 1, "", "model_forecast"], [3, 4, 1, "", "random_model"], [3, 4, 1, "", "remove_leading_zeros"], [3, 4, 1, "", "trans_dict_recomb"], [3, 4, 1, "", "unpack_ensemble_models"], [3, 4, 1, "", "validation_aggregation"]], "autots.evaluator.auto_model.ModelPrediction": [[3, 2, 1, "", "fit"], [3, 2, 1, "", "fit_data"], [3, 2, 1, "", "fit_predict"], [3, 2, 1, "", "predict"]], "autots.evaluator.auto_model.TemplateEvalObject": [[3, 2, 1, "", "concat"], [3, 3, 1, "", "full_mae_errors"], [3, 3, 1, "", "full_mae_ids"], [3, 2, 1, "", "load"], [3, 2, 1, "", "save"]], "autots.evaluator.auto_ts": [[3, 1, 1, "", "AutoTS"], [3, 4, 1, "", "error_correlations"], [3, 4, 1, "", "fake_regressor"]], "autots.evaluator.auto_ts.AutoTS": [[3, 2, 1, "", "back_forecast"], [3, 3, 1, "", "best_model"], [3, 3, 1, "", "best_model_ensemble"], [3, 3, 1, "", "best_model_name"], [3, 3, 1, "", "best_model_params"], [3, 2, 1, "", "best_model_per_series_mape"], [3, 2, 1, "", "best_model_per_series_score"], [3, 3, 1, "", "best_model_transformation_params"], [3, 2, 1, "", "create_unpredictability_score"], [3, 3, 1, "", "df_wide_numeric"], [3, 2, 1, "", "diagnose_params"], [3, 2, 1, "", "expand_horizontal"], [3, 2, 1, "", "export_best_model"], [3, 2, 1, "", "export_template"], [3, 2, 1, "", "failure_rate"], [3, 2, 1, "", "fit"], [3, 2, 1, "", "fit_data"], [3, 2, 1, "", "get_metric_corr"], [3, 2, 1, "", "get_new_params"], [3, 2, 1, "", "get_params_from_id"], [3, 2, 1, "", "get_top_n_counts"], [3, 2, 1, "", "horizontal_per_generation"], [3, 2, 1, "", "horizontal_to_df"], [3, 2, 1, "", "import_best_model"], [3, 2, 1, "", "import_results"], [3, 2, 1, "", "import_template"], [3, 2, 1, "", "list_failed_model_types"], [3, 2, 1, "", "load_template"], [3, 2, 1, "", "mosaic_to_df"], [3, 2, 1, "", "parse_best_model"], [3, 2, 1, "", "plot_back_forecast"], [3, 2, 1, "", "plot_backforecast"], [3, 2, 1, "", "plot_chosen_transformer"], [3, 2, 1, "", "plot_failure_rate"], [3, 2, 1, "", "plot_generation_loss"], [3, 2, 1, "", "plot_horizontal"], [3, 2, 1, "", "plot_horizontal_model_count"], [3, 2, 1, "", "plot_horizontal_per_generation"], [3, 2, 1, "", "plot_horizontal_transformers"], [3, 2, 1, "", "plot_metric_corr"], [3, 2, 1, "", "plot_model_failure_rate"], [3, 2, 1, "", "plot_mosaic"], [3, 2, 1, "", "plot_per_series_error"], [3, 2, 1, "", "plot_per_series_mape"], [3, 2, 1, "", "plot_per_series_smape"], [3, 2, 1, "", "plot_series_corr"], [3, 2, 1, "", "plot_transformer_by_class"], [3, 2, 1, "", "plot_transformer_failure_rate"], [3, 2, 1, "", "plot_unpredictability"], [3, 2, 1, "", "plot_validations"], [3, 2, 1, "", "predict"], [3, 3, 1, "", "regression_check"], [3, 2, 1, "", "results"], [3, 2, 1, "", "retrieve_validation_forecasts"], [3, 2, 1, "", "save_template"], [3, 3, 1, "", "score_per_series"], [3, 2, 1, "", "validation_agg"]], "autots.evaluator.auto_ts.AutoTS.initial_results": [[3, 3, 1, "", "model_results"]], "autots.evaluator.benchmark": [[3, 1, 1, "", "Benchmark"]], "autots.evaluator.benchmark.Benchmark": [[3, 2, 1, "", "run"]], "autots.evaluator.event_forecasting": [[3, 1, 1, "", "EventRiskForecast"], [3, 4, 1, "", "extract_result_windows"], [3, 4, 1, "", "extract_window_index"], [3, 4, 1, "", "set_limit_forecast"], [3, 4, 1, "", "set_limit_forecast_historic"]], "autots.evaluator.event_forecasting.EventRiskForecast": [[3, 2, 1, "id0", "fit"], [3, 2, 1, "id7", "generate_historic_risk_array"], [3, 2, 1, "id8", "generate_result_windows"], [3, 2, 1, "id9", "generate_risk_array"], [3, 2, 1, "id10", "plot"], [3, 2, 1, "", "plot_eval"], [3, 2, 1, "id11", "predict"], [3, 2, 1, "id12", "predict_historic"], [3, 2, 1, "id13", "set_limit"]], "autots.evaluator.metrics": [[3, 4, 1, "", "array_last_val"], [3, 4, 1, "", "chi_squared_hist_distribution_loss"], [3, 4, 1, "", "containment"], [3, 4, 1, "", "contour"], [3, 4, 1, "", "default_scaler"], [3, 4, 1, "", "dwae"], [3, 4, 1, "", "full_metric_evaluation"], [3, 4, 1, "", "kde"], [3, 4, 1, "", "kde_kl_distance"], [3, 4, 1, "", "kl_divergence"], [3, 4, 1, "", "linearity"], [3, 4, 1, "", "mae"], [3, 4, 1, "", "mda"], [3, 4, 1, "", "mean_absolute_differential_error"], [3, 4, 1, "", "mean_absolute_error"], [3, 4, 1, "", "medae"], [3, 4, 1, "", "median_absolute_error"], [3, 4, 1, "", "mlvb"], [3, 4, 1, "", "mqae"], [3, 4, 1, "", "msle"], [3, 4, 1, "", "numpy_ffill"], [3, 4, 1, "", "oda"], [3, 4, 1, "", "pinball_loss"], [3, 4, 1, "", "precomp_wasserstein"], [3, 4, 1, "", "qae"], [3, 4, 1, "", "rmse"], [3, 4, 1, "", "root_mean_square_error"], [3, 4, 1, "", "rps"], [3, 4, 1, "", "scaled_pinball_loss"], [3, 4, 1, "", "smape"], [3, 4, 1, "", "smoothness"], [3, 4, 1, "", "spl"], [3, 4, 1, "", "symmetric_mean_absolute_percentage_error"], [3, 4, 1, "", "threshold_loss"], [3, 4, 1, "", "unsorted_wasserstein"], [3, 4, 1, "", "wasserstein"]], "autots.evaluator.validation": [[3, 4, 1, "", "extract_seasonal_val_periods"], [3, 4, 1, "", "generate_validation_indices"], [3, 4, 1, "", "validate_num_validations"]], "autots.models": [[4, 0, 0, "-", "arch"], [4, 0, 0, "-", "base"], [4, 0, 0, "-", "basics"], [4, 0, 0, "-", "cassandra"], [4, 0, 0, "-", "dnn"], [4, 0, 0, "-", "ensemble"], [4, 0, 0, "-", "gluonts"], [4, 0, 0, "-", "greykite"], [4, 0, 0, "-", "matrix_var"], [4, 0, 0, "-", "mlensemble"], [4, 0, 0, "-", "model_list"], [4, 0, 0, "-", "neural_forecast"], [4, 0, 0, "-", "prophet"], [4, 0, 0, "-", "pytorch"], [4, 0, 0, "-", "sklearn"], [4, 0, 0, "-", "statsmodels"], [4, 0, 0, "-", "tfp"], [4, 0, 0, "-", "tide"]], "autots.models.arch": [[4, 1, 1, "", "ARCH"]], "autots.models.arch.ARCH": [[4, 2, 1, "", "fit"], [4, 2, 1, "", "get_new_params"], [4, 2, 1, "", "get_params"], [4, 2, 1, "", "predict"]], "autots.models.base": [[4, 1, 1, "", "ModelObject"], [4, 1, 1, "", "PredictionObject"], [4, 4, 1, "", "apply_constraints"], [4, 4, 1, "", "calculate_peak_density"], [4, 4, 1, "", "create_forecast_index"], [4, 4, 1, "", "create_seaborn_palette_from_cmap"], [4, 4, 1, "", "extract_single_series_from_horz"], [4, 4, 1, "", "extract_single_transformer"], [4, 4, 1, "", "plot_distributions"]], "autots.models.base.ModelObject": [[4, 2, 1, "", "basic_profile"], [4, 2, 1, "", "create_forecast_index"], [4, 2, 1, "", "fit_data"], [4, 2, 1, "", "get_new_params"], [4, 2, 1, "", "get_params"], [4, 2, 1, "", "time"]], "autots.models.base.PredictionObject": [[4, 2, 1, "id0", "apply_constraints"], [4, 2, 1, "id1", "evaluate"], [4, 2, 1, "", "extract_ensemble_runtimes"], [4, 3, 1, "", "forecast"], [4, 2, 1, "id2", "long_form_results"], [4, 3, 1, "", "lower_forecast"], [4, 3, 1, "", "model_name"], [4, 3, 1, "", "model_parameters"], [4, 2, 1, "id3", "plot"], [4, 2, 1, "", "plot_df"], [4, 2, 1, "", "plot_ensemble_runtimes"], [4, 2, 1, "", "plot_grid"], [4, 2, 1, "id4", "total_runtime"], [4, 3, 1, "", "transformation_parameters"], [4, 3, 1, "", "upper_forecast"]], "autots.models.basics": [[4, 1, 1, "", "AverageValueNaive"], [4, 1, 1, "", "BallTreeMultivariateMotif"], [4, 1, 1, "", "BallTreeRegressionMotif"], [4, 1, 1, "", "BasicLinearModel"], [4, 1, 1, "", "ConstantNaive"], [4, 1, 1, "", "FFT"], [4, 1, 1, "", "KalmanStateSpace"], [4, 1, 1, "", "LastValueNaive"], [4, 1, 1, "", "MetricMotif"], [4, 1, 1, "", "Motif"], [4, 1, 1, "", "MotifSimulation"], [4, 1, 1, "", "NVAR"], [4, 1, 1, "", "SeasonalNaive"], [4, 1, 1, "", "SeasonalityMotif"], [4, 1, 1, "", "SectionalMotif"], [4, 1, 1, "", "TVVAR"], [4, 3, 1, "", "ZeroesNaive"], [4, 4, 1, "", "looped_motif"], [4, 4, 1, "", "predict_reservoir"]], "autots.models.basics.AverageValueNaive": [[4, 2, 1, "", "fit"], [4, 2, 1, "", "get_new_params"], [4, 2, 1, "", "get_params"], [4, 2, 1, "", "predict"]], "autots.models.basics.BallTreeMultivariateMotif": [[4, 2, 1, "", "fit"], [4, 2, 1, "", "get_new_params"], [4, 2, 1, "", "get_params"], [4, 2, 1, "", "predict"]], "autots.models.basics.BallTreeRegressionMotif": [[4, 2, 1, "", "fit"], [4, 2, 1, "", "get_new_params"], [4, 2, 1, "", "get_params"], [4, 2, 1, "", "predict"]], "autots.models.basics.BasicLinearModel": [[4, 2, 1, "", "base_scaler"], [4, 2, 1, "", "coefficient_summary"], [4, 2, 1, "", "create_x"], [4, 2, 1, "", "fit"], [4, 2, 1, "", "get_new_params"], [4, 2, 1, "", "get_params"], [4, 2, 1, "", "predict"], [4, 2, 1, "", "process_components"], [4, 2, 1, "", "return_components"], [4, 2, 1, "", "scale_data"], [4, 2, 1, "", "to_origin_space"]], "autots.models.basics.ConstantNaive": [[4, 2, 1, "", "fit"], [4, 2, 1, "", "get_new_params"], [4, 2, 1, "", "get_params"], [4, 2, 1, "", "predict"]], "autots.models.basics.FFT": [[4, 2, 1, "", "fit"], [4, 2, 1, "", "get_new_params"], [4, 2, 1, "", "get_params"], [4, 2, 1, "", "predict"]], "autots.models.basics.KalmanStateSpace": [[4, 2, 1, "", "cost_function"], [4, 2, 1, "", "fit"], [4, 2, 1, "", "fit_data"], [4, 2, 1, "", "get_new_params"], [4, 2, 1, "", "get_params"], [4, 2, 1, "", "predict"], [4, 2, 1, "", "tune_observational_noise"]], "autots.models.basics.LastValueNaive": [[4, 2, 1, "", "fit"], [4, 2, 1, "", "get_new_params"], [4, 2, 1, "", "get_params"], [4, 2, 1, "", "predict"]], "autots.models.basics.MetricMotif": [[4, 2, 1, "", "fit"], [4, 2, 1, "", "get_new_params"], [4, 2, 1, "", "get_params"], [4, 2, 1, "", "predict"]], "autots.models.basics.Motif": [[4, 2, 1, "", "fit"], [4, 2, 1, "", "get_new_params"], [4, 2, 1, "", "get_params"], [4, 2, 1, "", "predict"]], "autots.models.basics.MotifSimulation": [[4, 2, 1, "", "fit"], [4, 2, 1, "", "get_new_params"], [4, 2, 1, "", "get_params"], [4, 2, 1, "", "predict"]], "autots.models.basics.NVAR": [[4, 2, 1, "", "fit"], [4, 2, 1, "", "get_new_params"], [4, 2, 1, "", "get_params"], [4, 2, 1, "", "predict"]], "autots.models.basics.SeasonalNaive": [[4, 2, 1, "", "fit"], [4, 2, 1, "", "get_new_params"], [4, 2, 1, "", "get_params"], [4, 2, 1, "", "predict"]], "autots.models.basics.SeasonalityMotif": [[4, 2, 1, "", "fit"], [4, 2, 1, "", "get_new_params"], [4, 2, 1, "", "get_params"], [4, 2, 1, "", "predict"]], "autots.models.basics.SectionalMotif": [[4, 2, 1, "", "fit"], [4, 2, 1, "", "get_new_params"], [4, 2, 1, "", "get_params"], [4, 2, 1, "", "predict"]], "autots.models.basics.TVVAR": [[4, 2, 1, "", "apply_beta_threshold"], [4, 2, 1, "", "create_VAR_features"], [4, 2, 1, "", "empty_scaler"], [4, 2, 1, "", "fit"], [4, 2, 1, "", "get_new_params"], [4, 2, 1, "", "get_params"], [4, 2, 1, "", "predict"], [4, 2, 1, "", "process_components"]], "autots.models.cassandra": [[4, 1, 1, "", "BayesianMultiOutputRegression"], [4, 1, 1, "", "Cassandra"], [4, 4, 1, "", "clean_regressor"], [4, 4, 1, "", "cost_function_dwae"], [4, 4, 1, "", "cost_function_l1"], [4, 4, 1, "", "cost_function_l1_positive"], [4, 4, 1, "", "cost_function_l2"], [4, 4, 1, "", "cost_function_quantile"], [4, 4, 1, "", "create_t"], [4, 4, 1, "", "fit_linear_model"], [4, 4, 1, "", "lstsq_minimize"], [4, 4, 1, "", "lstsq_solve"]], "autots.models.cassandra.BayesianMultiOutputRegression": [[4, 2, 1, "", "fit"], [4, 2, 1, "", "predict"], [4, 2, 1, "", "sample_posterior"]], "autots.models.cassandra.Cassandra..anomaly_detector": [[4, 3, 1, "", "anomalies"], [4, 3, 1, "", "scores"]], "autots.models.cassandra.Cassandra.": [[4, 3, 1, "", "holiday_count"], [4, 3, 1, "", "holidays"], [4, 3, 1, "", "params"], [4, 3, 1, "", "predict_x_array"], [4, 3, 1, "", "predicted_trend"], [4, 3, 1, "", "trend_train"], [4, 3, 1, "", "x_array"]], "autots.models.cassandra.Cassandra": [[4, 2, 1, "", "analyze_trend"], [4, 2, 1, "", "auto_fit"], [4, 2, 1, "", "base_scaler"], [4, 2, 1, "", "compare_actual_components"], [4, 2, 1, "", "create_forecast_index"], [4, 2, 1, "", "create_t"], [4, 2, 1, "", "cross_validate"], [4, 2, 1, "", "feature_importance"], [4, 2, 1, "id5", "fit"], [4, 2, 1, "", "fit_data"], [4, 2, 1, "id6", "get_new_params"], [4, 2, 1, "", "get_params"], [4, 2, 1, "", "next_fit"], [4, 2, 1, "id7", "plot_components"], [4, 2, 1, "id8", "plot_forecast"], [4, 2, 1, "", "plot_things"], [4, 2, 1, "id9", "plot_trend"], [4, 2, 1, "id10", "predict"], [4, 2, 1, "", "predict_new_product"], [4, 2, 1, "", "process_components"], [4, 2, 1, "id11", "return_components"], [4, 2, 1, "", "rolling_trend"], [4, 2, 1, "", "scale_data"], [4, 2, 1, "", "to_origin_space"], [4, 2, 1, "", "treatment_causal_impact"], [4, 2, 1, "", "trend_analysis"]], "autots.models.cassandra.Cassandra.holiday_detector": [[4, 2, 1, "", "dates_to_holidays"]], "autots.models.dnn": [[4, 1, 1, "", "ElasticNetwork"], [4, 1, 1, "", "KerasRNN"], [4, 1, 1, "", "Transformer"], [4, 4, 1, "", "transformer_build_model"], [4, 4, 1, "", "transformer_encoder"]], "autots.models.dnn.ElasticNetwork": [[4, 2, 1, "", "fit"], [4, 2, 1, "", "predict"]], "autots.models.dnn.KerasRNN": [[4, 2, 1, "", "fit"], [4, 2, 1, "", "predict"]], "autots.models.dnn.Transformer": [[4, 2, 1, "", "fit"], [4, 2, 1, "", "predict"]], "autots.models.ensemble": [[4, 4, 1, "", "BestNEnsemble"], [4, 4, 1, "", "DistEnsemble"], [4, 4, 1, "", "EnsembleForecast"], [4, 4, 1, "", "EnsembleTemplateGenerator"], [4, 4, 1, "", "HDistEnsemble"], [4, 4, 1, "", "HorizontalEnsemble"], [4, 4, 1, "", "HorizontalTemplateGenerator"], [4, 4, 1, "", "MosaicEnsemble"], [4, 4, 1, "", "create_unpredictability_score"], [4, 4, 1, "", "find_pattern"], [4, 4, 1, "", "generalize_horizontal"], [4, 4, 1, "", "generate_crosshair_score"], [4, 4, 1, "", "generate_crosshair_score_list"], [4, 4, 1, "", "generate_mosaic_template"], [4, 4, 1, "", "horizontal_classifier"], [4, 4, 1, "", "horizontal_xy"], [4, 4, 1, "", "is_horizontal"], [4, 4, 1, "", "is_mosaic"], [4, 4, 1, "", "mlens_helper"], [4, 4, 1, "", "mosaic_classifier"], [4, 4, 1, "", "mosaic_or_horizontal"], [4, 4, 1, "", "mosaic_to_horizontal"], [4, 4, 1, "", "mosaic_xy"], [4, 4, 1, "", "n_limited_horz"], [4, 4, 1, "", "parse_forecast_length"], [4, 4, 1, "", "parse_horizontal"], [4, 4, 1, "", "parse_mosaic"], [4, 4, 1, "", "process_mosaic_arrays"]], "autots.models.gluonts": [[4, 1, 1, "", "GluonTS"]], "autots.models.gluonts.GluonTS": [[4, 2, 1, "", "fit"], [4, 2, 1, "", "fit_data"], [4, 2, 1, "", "get_new_params"], [4, 2, 1, "", "get_params"], [4, 2, 1, "", "predict"]], "autots.models.greykite": [[4, 1, 1, "", "Greykite"], [4, 4, 1, "", "seek_the_oracle"]], "autots.models.greykite.Greykite": [[4, 2, 1, "", "fit"], [4, 2, 1, "", "get_new_params"], [4, 2, 1, "", "get_params"], [4, 2, 1, "", "predict"]], "autots.models.matrix_var": [[4, 1, 1, "", "DMD"], [4, 1, 1, "", "LATC"], [4, 1, 1, "", "MAR"], [4, 1, 1, "", "RRVAR"], [4, 1, 1, "", "TMF"], [4, 4, 1, "", "conj_grad_w"], [4, 4, 1, "", "conj_grad_x"], [4, 4, 1, "", "dmd"], [4, 4, 1, "", "dmd4cast"], [4, 4, 1, "", "dmd_forecast"], [4, 4, 1, "", "ell_w"], [4, 4, 1, "", "ell_x"], [4, 4, 1, "", "generate_Psi"], [4, 4, 1, "", "latc_imputer"], [4, 4, 1, "", "latc_predictor"], [4, 4, 1, "", "mar"], [4, 4, 1, "", "mat2ten"], [4, 4, 1, "", "rrvar"], [4, 4, 1, "", "svt_tnn"], [4, 4, 1, "", "ten2mat"], [4, 4, 1, "", "tmf"], [4, 4, 1, "", "update_cg"], [4, 4, 1, "", "var"], [4, 4, 1, "", "var4cast"]], "autots.models.matrix_var.DMD": [[4, 2, 1, "", "fit"], [4, 2, 1, "", "get_new_params"], [4, 2, 1, "", "get_params"], [4, 2, 1, "", "predict"]], "autots.models.matrix_var.LATC": [[4, 2, 1, "", "fit"], [4, 2, 1, "", "get_new_params"], [4, 2, 1, "", "get_params"], [4, 2, 1, "", "predict"]], "autots.models.matrix_var.MAR": [[4, 2, 1, "", "fit"], [4, 2, 1, "", "get_new_params"], [4, 2, 1, "", "get_params"], [4, 2, 1, "", "predict"]], "autots.models.matrix_var.RRVAR": [[4, 2, 1, "", "fit"], [4, 2, 1, "", "get_new_params"], [4, 2, 1, "", "get_params"], [4, 2, 1, "", "predict"]], "autots.models.matrix_var.TMF": [[4, 2, 1, "", "fit"], [4, 2, 1, "", "get_new_params"], [4, 2, 1, "", "get_params"], [4, 2, 1, "", "predict"]], "autots.models.mlensemble": [[4, 1, 1, "", "MLEnsemble"], [4, 4, 1, "", "create_feature"]], "autots.models.mlensemble.MLEnsemble": [[4, 2, 1, "", "fit"], [4, 2, 1, "", "get_new_params"], [4, 2, 1, "", "get_params"], [4, 2, 1, "", "predict"]], "autots.models.model_list": [[4, 4, 1, "", "auto_model_list"], [4, 4, 1, "", "model_list_to_dict"]], "autots.models.neural_forecast": [[4, 1, 1, "", "NeuralForecast"]], "autots.models.neural_forecast.NeuralForecast": [[4, 2, 1, "", "fit"], [4, 2, 1, "", "get_new_params"], [4, 2, 1, "", "get_params"], [4, 2, 1, "", "predict"]], "autots.models.prophet": [[4, 1, 1, "", "FBProphet"], [4, 1, 1, "", "NeuralProphet"], [4, 4, 1, "", "get_changepoints"]], "autots.models.prophet.FBProphet": [[4, 2, 1, "", "fit"], [4, 2, 1, "", "get_new_params"], [4, 2, 1, "", "get_params"], [4, 2, 1, "", "predict"]], "autots.models.prophet.NeuralProphet": [[4, 2, 1, "", "fit"], [4, 2, 1, "", "get_new_params"], [4, 2, 1, "", "get_params"], [4, 2, 1, "", "predict"]], "autots.models.pytorch": [[4, 1, 1, "", "PytorchForecasting"]], "autots.models.pytorch.PytorchForecasting": [[4, 2, 1, "", "fit"], [4, 2, 1, "", "get_new_params"], [4, 2, 1, "", "get_params"], [4, 2, 1, "", "predict"]], "autots.models.sklearn": [[4, 1, 1, "", "ComponentAnalysis"], [4, 1, 1, "", "DatepartRegression"], [4, 1, 1, "", "MultivariateRegression"], [4, 1, 1, "", "PreprocessingRegression"], [4, 1, 1, "", "RandomFourierEncoding"], [4, 1, 1, "", "RollingRegression"], [4, 1, 1, "", "UnivariateRegression"], [4, 1, 1, "", "VectorizedMultiOutputGPR"], [4, 1, 1, "", "WindowRegression"], [4, 4, 1, "", "generate_classifier_params"], [4, 4, 1, "", "generate_regressor_params"], [4, 4, 1, "", "retrieve_classifier"], [4, 4, 1, "", "retrieve_regressor"], [4, 4, 1, "", "rolling_x_regressor"], [4, 4, 1, "", "rolling_x_regressor_regressor"]], "autots.models.sklearn.ComponentAnalysis": [[4, 2, 1, "", "fit"], [4, 2, 1, "", "get_new_params"], [4, 2, 1, "", "get_params"], [4, 2, 1, "", "predict"]], "autots.models.sklearn.DatepartRegression": [[4, 2, 1, "", "fit"], [4, 2, 1, "", "fit_data"], [4, 2, 1, "", "get_new_params"], [4, 2, 1, "", "get_params"], [4, 2, 1, "", "predict"]], "autots.models.sklearn.MultivariateRegression": [[4, 2, 1, "", "base_scaler"], [4, 2, 1, "", "fit"], [4, 2, 1, "", "fit_data"], [4, 2, 1, "", "get_new_params"], [4, 2, 1, "", "get_params"], [4, 2, 1, "", "predict"], [4, 2, 1, "", "scale_data"], [4, 2, 1, "", "to_origin_space"]], "autots.models.sklearn.PreprocessingRegression": [[4, 2, 1, "", "fit"], [4, 2, 1, "", "fit_data"], [4, 2, 1, "", "get_new_params"], [4, 2, 1, "", "get_params"], [4, 2, 1, "", "predict"]], "autots.models.sklearn.RandomFourierEncoding": [[4, 2, 1, "", "fit"], [4, 2, 1, "", "transform"]], "autots.models.sklearn.RollingRegression": [[4, 2, 1, "", "fit"], [4, 2, 1, "", "get_new_params"], [4, 2, 1, "", "get_params"], [4, 2, 1, "", "predict"]], "autots.models.sklearn.UnivariateRegression": [[4, 2, 1, "", "fit"], [4, 2, 1, "", "get_new_params"], [4, 2, 1, "", "get_params"], [4, 2, 1, "", "predict"]], "autots.models.sklearn.VectorizedMultiOutputGPR": [[4, 2, 1, "", "fit"], [4, 2, 1, "", "predict"], [4, 2, 1, "", "predict_proba"]], "autots.models.sklearn.WindowRegression": [[4, 2, 1, "", "fit"], [4, 2, 1, "", "fit_data"], [4, 2, 1, "", "get_new_params"], [4, 2, 1, "", "get_params"], [4, 2, 1, "", "predict"]], "autots.models.statsmodels": [[4, 1, 1, "", "ARDL"], [4, 1, 1, "", "ARIMA"], [4, 1, 1, "", "DynamicFactor"], [4, 1, 1, "", "DynamicFactorMQ"], [4, 1, 1, "", "ETS"], [4, 1, 1, "", "GLM"], [4, 1, 1, "", "GLS"], [4, 1, 1, "", "Theta"], [4, 1, 1, "", "UnobservedComponents"], [4, 1, 1, "", "VAR"], [4, 1, 1, "", "VARMAX"], [4, 1, 1, "", "VECM"], [4, 4, 1, "", "arima_seek_the_oracle"], [4, 4, 1, "", "glm_forecast_by_column"]], "autots.models.statsmodels.ARDL": [[4, 2, 1, "", "fit"], [4, 2, 1, "", "get_new_params"], [4, 2, 1, "", "get_params"], [4, 2, 1, "", "predict"]], "autots.models.statsmodels.ARIMA": [[4, 2, 1, "", "fit"], [4, 2, 1, "", "get_new_params"], [4, 2, 1, "", "get_params"], [4, 2, 1, "", "predict"]], "autots.models.statsmodels.DynamicFactor": [[4, 2, 1, "", "fit"], [4, 2, 1, "", "get_new_params"], [4, 2, 1, "", "get_params"], [4, 2, 1, "", "predict"]], "autots.models.statsmodels.DynamicFactorMQ": [[4, 2, 1, "", "fit"], [4, 2, 1, "", "get_new_params"], [4, 2, 1, "", "get_params"], [4, 2, 1, "", "predict"]], "autots.models.statsmodels.ETS": [[4, 2, 1, "", "fit"], [4, 2, 1, "", "get_new_params"], [4, 2, 1, "", "get_params"], [4, 2, 1, "", "predict"]], "autots.models.statsmodels.GLM": [[4, 2, 1, "", "fit"], [4, 2, 1, "", "get_new_params"], [4, 2, 1, "", "get_params"], [4, 2, 1, "", "predict"]], "autots.models.statsmodels.GLS": [[4, 2, 1, "", "fit"], [4, 2, 1, "", "get_new_params"], [4, 2, 1, "", "get_params"], [4, 2, 1, "", "predict"]], "autots.models.statsmodels.Theta": [[4, 2, 1, "", "fit"], [4, 2, 1, "", "get_new_params"], [4, 2, 1, "", "get_params"], [4, 2, 1, "", "predict"]], "autots.models.statsmodels.UnobservedComponents": [[4, 2, 1, "", "fit"], [4, 2, 1, "", "get_new_params"], [4, 2, 1, "", "get_params"], [4, 2, 1, "", "predict"]], "autots.models.statsmodels.VAR": [[4, 2, 1, "", "fit"], [4, 2, 1, "", "get_new_params"], [4, 2, 1, "", "get_params"], [4, 2, 1, "", "predict"]], "autots.models.statsmodels.VARMAX": [[4, 2, 1, "", "fit"], [4, 2, 1, "", "get_new_params"], [4, 2, 1, "", "get_params"], [4, 2, 1, "", "predict"]], "autots.models.statsmodels.VECM": [[4, 2, 1, "", "fit"], [4, 2, 1, "", "get_new_params"], [4, 2, 1, "", "get_params"], [4, 2, 1, "", "predict"]], "autots.models.tfp": [[4, 1, 1, "", "TFPRegression"], [4, 1, 1, "", "TFPRegressor"], [4, 1, 1, "", "TensorflowSTS"]], "autots.models.tfp.TFPRegression": [[4, 2, 1, "", "fit"], [4, 2, 1, "", "get_new_params"], [4, 2, 1, "", "get_params"], [4, 2, 1, "", "predict"]], "autots.models.tfp.TFPRegressor": [[4, 2, 1, "", "fit"], [4, 2, 1, "", "predict"]], "autots.models.tfp.TensorflowSTS": [[4, 2, 1, "", "fit"], [4, 2, 1, "", "get_new_params"], [4, 2, 1, "", "get_params"], [4, 2, 1, "", "predict"]], "autots.models.tide": [[4, 1, 1, "", "TiDE"], [4, 1, 1, "", "TimeCovariates"], [4, 1, 1, "", "TimeSeriesdata"], [4, 4, 1, "", "get_HOLIDAYS"], [4, 4, 1, "", "mae_loss"], [4, 4, 1, "", "mape"], [4, 4, 1, "", "nrmse"], [4, 4, 1, "", "rmse"], [4, 4, 1, "", "smape"], [4, 4, 1, "", "wape"]], "autots.models.tide.TiDE": [[4, 2, 1, "", "fit"], [4, 2, 1, "", "get_new_params"], [4, 2, 1, "", "get_params"], [4, 2, 1, "", "predict"]], "autots.models.tide.TimeCovariates": [[4, 2, 1, "", "get_covariates"]], "autots.models.tide.TimeSeriesdata": [[4, 2, 1, "", "test_val_gen"], [4, 2, 1, "", "tf_dataset"], [4, 2, 1, "", "train_gen"]], "autots.templates": [[5, 0, 0, "-", "general"]], "autots.templates.general": [[5, 5, 1, "", "general_template"]], "autots.tools": [[6, 0, 0, "-", "anomaly_utils"], [6, 0, 0, "-", "calendar"], [6, 0, 0, "-", "cointegration"], [6, 0, 0, "-", "constraint"], [6, 0, 0, "-", "cpu_count"], [6, 0, 0, "-", "fast_kalman"], [6, 0, 0, "-", "fft"], [6, 0, 0, "-", "fir_filter"], [6, 0, 0, "-", "hierarchial"], [6, 0, 0, "-", "holiday"], [6, 0, 0, "-", "impute"], [6, 0, 0, "-", "lunar"], [6, 0, 0, "-", "percentile"], [6, 0, 0, "-", "probabilistic"], [6, 0, 0, "-", "profile"], [6, 0, 0, "-", "regressor"], [6, 0, 0, "-", "seasonal"], [6, 0, 0, "-", "shaping"], [6, 0, 0, "-", "thresholding"], [6, 0, 0, "-", "transform"], [6, 0, 0, "-", "wavelet"], [6, 0, 0, "-", "window_functions"]], "autots.tools.anomaly_utils": [[6, 4, 1, "", "anomaly_df_to_holidays"], [6, 4, 1, "", "anomaly_new_params"], [6, 4, 1, "", "create_dates_df"], [6, 4, 1, "", "dates_to_holidays"], [6, 4, 1, "", "detect_anomalies"], [6, 4, 1, "", "gaussian_mixture"], [6, 4, 1, "", "holiday_new_params"], [6, 4, 1, "", "limits_to_anomalies"], [6, 4, 1, "", "loop_sk_outliers"], [6, 4, 1, "", "nonparametric_multivariate"], [6, 4, 1, "", "sk_outliers"], [6, 4, 1, "", "values_to_anomalies"], [6, 4, 1, "", "zscore_survival_function"]], "autots.tools.calendar": [[6, 4, 1, "", "gregorian_to_chinese"], [6, 4, 1, "", "gregorian_to_christian_lunar"], [6, 4, 1, "", "gregorian_to_hebrew"], [6, 4, 1, "", "gregorian_to_hindu"], [6, 4, 1, "", "gregorian_to_islamic"], [6, 4, 1, "", "heb_is_leap"], [6, 4, 1, "", "lunar_from_lunar"], [6, 4, 1, "", "lunar_from_lunar_full"], [6, 4, 1, "", "to_jd"]], "autots.tools.cointegration": [[6, 4, 1, "", "btcd_decompose"], [6, 4, 1, "", "coint_johansen"], [6, 4, 1, "", "fourier_series"], [6, 4, 1, "", "lagmat"]], "autots.tools.constraint": [[6, 4, 1, "", "apply_constraint_single"], [6, 4, 1, "", "apply_fit_constraint"], [6, 4, 1, "", "constant_growth_rate"], [6, 4, 1, "", "constraint_new_params"], [6, 4, 1, "", "fit_constraint"]], "autots.tools.cpu_count": [[6, 4, 1, "", "cpu_count"], [6, 4, 1, "", "set_n_jobs"]], "autots.tools.fast_kalman": [[6, 1, 1, "", "Gaussian"], [6, 1, 1, "", "KalmanFilter"], [6, 4, 1, "", "autoshape"], [6, 4, 1, "", "ddot"], [6, 4, 1, "", "ddot_t_right"], [6, 4, 1, "", "ddot_t_right_old"], [6, 4, 1, "", "dinv"], [6, 4, 1, "", "douter"], [6, 4, 1, "", "em_initial_state"], [6, 4, 1, "", "ensure_matrix"], [6, 4, 1, "", "ensure_stability"], [6, 4, 1, "", "holt_winters_damped_matrices"], [6, 4, 1, "", "new_kalman_params"], [6, 4, 1, "", "predict"], [6, 4, 1, "", "predict_observation"], [6, 4, 1, "", "priv_smooth"], [6, 4, 1, "", "priv_update_with_nan_check"], [6, 4, 1, "", "random_matrix"], [6, 4, 1, "", "random_state_space"], [6, 4, 1, "", "random_state_space_original"], [6, 4, 1, "", "smooth"], [6, 4, 1, "", "stable_pinv"], [6, 4, 1, "", "update"], [6, 4, 1, "", "update_with_nan_check"]], "autots.tools.fast_kalman.Gaussian": [[6, 2, 1, "", "empty"], [6, 2, 1, "", "unvectorize_state"], [6, 2, 1, "", "unvectorize_vars"]], "autots.tools.fast_kalman.KalmanFilter": [[6, 1, 1, "", "Result"], [6, 2, 1, "", "compute"], [6, 2, 1, "", "em"], [6, 2, 1, "", "em_observation_noise"], [6, 2, 1, "", "em_process_noise"], [6, 2, 1, "", "predict"], [6, 2, 1, "", "predict_next"], [6, 2, 1, "", "predict_observation"], [6, 2, 1, "", "smooth"], [6, 2, 1, "", "smooth_current"], [6, 2, 1, "", "update"]], "autots.tools.fft": [[6, 1, 1, "", "FFT"], [6, 4, 1, "", "fourier_extrapolation"]], "autots.tools.fft.FFT": [[6, 2, 1, "", "fit"], [6, 2, 1, "", "generate_harmonics_dataframe"], [6, 2, 1, "", "predict"]], "autots.tools.fir_filter": [[6, 4, 1, "", "apply_fir_filter_time_domain"], [6, 4, 1, "", "apply_fir_filter_to_timeseries"], [6, 4, 1, "", "fft_fir_filter_to_timeseries"], [6, 4, 1, "", "generate_random_fir_params"]], "autots.tools.hierarchial": [[6, 1, 1, "", "hierarchial"]], "autots.tools.hierarchial.hierarchial": [[6, 2, 1, "", "fit"], [6, 2, 1, "", "reconcile"], [6, 2, 1, "", "transform"]], "autots.tools.holiday": [[6, 4, 1, "", "holiday_flag"], [6, 4, 1, "", "query_holidays"]], "autots.tools.impute": [[6, 4, 1, "", "FillNA"], [6, 1, 1, "", "SeasonalityMotifImputer"], [6, 1, 1, "", "SimpleSeasonalityMotifImputer"], [6, 4, 1, "", "biased_ffill"], [6, 4, 1, "", "fake_date_fill"], [6, 4, 1, "", "fake_date_fill_old"], [6, 4, 1, "", "fill_forward"], [6, 4, 1, "", "fill_forward_alt"], [6, 4, 1, "", "fill_mean"], [6, 4, 1, "", "fill_mean_old"], [6, 4, 1, "", "fill_median"], [6, 4, 1, "", "fill_median_old"], [6, 4, 1, "", "fill_one"], [6, 4, 1, "", "fill_zero"], [6, 4, 1, "", "fillna_np"], [6, 4, 1, "", "rolling_mean"]], "autots.tools.impute.SeasonalityMotifImputer": [[6, 2, 1, "", "impute"]], "autots.tools.impute.SimpleSeasonalityMotifImputer": [[6, 2, 1, "", "impute"]], "autots.tools.lunar": [[6, 4, 1, "", "dcos"], [6, 4, 1, "", "dsin"], [6, 4, 1, "", "fixangle"], [6, 4, 1, "", "kepler"], [6, 4, 1, "", "moon_phase"], [6, 4, 1, "", "moon_phase_df"], [6, 4, 1, "", "phase_string"], [6, 4, 1, "", "todeg"], [6, 4, 1, "", "torad"]], "autots.tools.percentile": [[6, 4, 1, "", "nan_percentile"], [6, 4, 1, "", "nan_quantile"], [6, 4, 1, "", "trimmed_mean"]], "autots.tools.probabilistic": [[6, 4, 1, "", "Point_to_Probability"], [6, 4, 1, "", "Variable_Point_to_Probability"], [6, 4, 1, "", "historic_quantile"], [6, 4, 1, "", "inferred_normal"], [6, 4, 1, "", "percentileofscore_appliable"]], "autots.tools.profile": [[6, 4, 1, "", "data_profile"], [6, 4, 1, "", "profile_time_series"], [6, 4, 1, "", "summarize_series"]], "autots.tools.regressor": [[6, 4, 1, "", "create_lagged_regressor"], [6, 4, 1, "", "create_regressor"]], "autots.tools.seasonal": [[6, 4, 1, "", "changepoint_fcst_from_last_row"], [6, 4, 1, "", "create_changepoint_features"], [6, 4, 1, "", "create_datepart_components"], [6, 4, 1, "", "create_seasonality_feature"], [6, 4, 1, "", "date_part"], [6, 4, 1, "", "fourier_df"], [6, 4, 1, "", "fourier_series"], [6, 4, 1, "", "half_yr_spacing"], [6, 4, 1, "", "random_datepart"], [6, 4, 1, "", "seasonal_independent_match"], [6, 4, 1, "", "seasonal_int"], [6, 4, 1, "", "seasonal_repeating_wavelet"], [6, 4, 1, "", "seasonal_window_match"]], "autots.tools.shaping": [[6, 1, 1, "", "NumericTransformer"], [6, 4, 1, "", "clean_weights"], [6, 4, 1, "", "df_cleanup"], [6, 4, 1, "", "freq_to_timedelta"], [6, 4, 1, "", "infer_frequency"], [6, 4, 1, "", "long_to_wide"], [6, 4, 1, "", "simple_train_test_split"], [6, 4, 1, "", "split_digits_and_non_digits"], [6, 4, 1, "", "subset_series"], [6, 4, 1, "", "wide_to_3d"]], "autots.tools.shaping.NumericTransformer": [[6, 2, 1, "", "fit"], [6, 2, 1, "", "fit_transform"], [6, 2, 1, "", "inverse_transform"], [6, 2, 1, "", "transform"]], "autots.tools.thresholding": [[6, 1, 1, "", "NonparametricThreshold"], [6, 4, 1, "", "consecutive_groups"], [6, 4, 1, "", "nonparametric"]], "autots.tools.thresholding.NonparametricThreshold": [[6, 2, 1, "", "compare_to_epsilon"], [6, 2, 1, "", "find_epsilon"], [6, 2, 1, "", "prune_anoms"], [6, 2, 1, "", "score_anomalies"]], "autots.tools.transform": [[6, 1, 1, "", "AlignLastDiff"], [6, 1, 1, "", "AlignLastValue"], [6, 1, 1, "", "AnomalyRemoval"], [6, 1, 1, "", "BKBandpassFilter"], [6, 1, 1, "", "BTCD"], [6, 1, 1, "", "CenterLastValue"], [6, 1, 1, "", "CenterSplit"], [6, 1, 1, "", "ChangepointDetrend"], [6, 1, 1, "", "ClipOutliers"], [6, 1, 1, "", "Cointegration"], [6, 1, 1, "", "Constraint"], [6, 1, 1, "", "CumSumTransformer"], [6, 3, 1, "", "DatepartRegression"], [6, 1, 1, "", "DatepartRegressionTransformer"], [6, 1, 1, "", "Detrend"], [6, 1, 1, "", "DiffSmoother"], [6, 1, 1, "", "DifferencedTransformer"], [6, 1, 1, "", "Discretize"], [6, 1, 1, "", "EWMAFilter"], [6, 1, 1, "", "EmptyTransformer"], [6, 1, 1, "", "FFTDecomposition"], [6, 1, 1, "", "FFTFilter"], [6, 1, 1, "", "FIRFilter"], [6, 1, 1, "", "FastICA"], [6, 1, 1, "", "GeneralTransformer"], [6, 1, 1, "", "HPFilter"], [6, 1, 1, "", "HistoricValues"], [6, 1, 1, "", "HolidayTransformer"], [6, 1, 1, "", "IntermittentOccurrence"], [6, 1, 1, "", "KalmanSmoothing"], [6, 1, 1, "", "LevelShiftMagic"], [6, 3, 1, "", "LevelShiftTransformer"], [6, 1, 1, "", "LocalLinearTrend"], [6, 1, 1, "", "MeanDifference"], [6, 1, 1, "", "MeanPercentSplitter"], [6, 1, 1, "", "PCA"], [6, 1, 1, "", "PctChangeTransformer"], [6, 1, 1, "", "PositiveShift"], [6, 4, 1, "", "RandomTransform"], [6, 1, 1, "", "RegressionFilter"], [6, 1, 1, "", "ReplaceConstant"], [6, 1, 1, "", "RollingMeanTransformer"], [6, 1, 1, "", "Round"], [6, 1, 1, "", "STLFilter"], [6, 1, 1, "", "ScipyFilter"], [6, 1, 1, "", "SeasonalDifference"], [6, 1, 1, "", "ShiftFirstValue"], [6, 1, 1, "", "SinTrend"], [6, 1, 1, "", "Slice"], [6, 1, 1, "", "StandardScaler"], [6, 1, 1, "", "StatsmodelsFilter"], [6, 1, 1, "", "ThetaTransformer"], [6, 4, 1, "", "bkfilter_st"], [6, 4, 1, "", "clip_outliers"], [6, 4, 1, "", "exponential_decay"], [6, 4, 1, "", "get_transformer_params"], [6, 4, 1, "", "random_cleaners"], [6, 4, 1, "", "remove_outliers"], [6, 4, 1, "", "simple_context_slicer"], [6, 4, 1, "", "transformer_list_to_dict"]], "autots.tools.transform.AlignLastDiff": [[6, 2, 1, "", "fit"], [6, 2, 1, "", "fit_transform"], [6, 2, 1, "", "get_new_params"], [6, 2, 1, "", "inverse_transform"], [6, 2, 1, "", "transform"]], "autots.tools.transform.AlignLastValue": [[6, 2, 1, "", "find_centerpoint"], [6, 2, 1, "", "fit"], [6, 2, 1, "", "fit_transform"], [6, 2, 1, "", "get_new_params"], [6, 2, 1, "", "inverse_transform"], [6, 2, 1, "", "transform"]], "autots.tools.transform.AnomalyRemoval": [[6, 2, 1, "", "fit"], [6, 2, 1, "", "fit_anomaly_classifier"], [6, 2, 1, "", "fit_transform"], [6, 2, 1, "", "get_new_params"], [6, 2, 1, "", "inverse_transform"], [6, 2, 1, "", "score_to_anomaly"], [6, 2, 1, "", "transform"]], "autots.tools.transform.BKBandpassFilter": [[6, 2, 1, "", "filter"], [6, 2, 1, "", "fit"], [6, 2, 1, "", "fit_transform"], [6, 2, 1, "", "get_new_params"], [6, 2, 1, "", "inverse_transform"], [6, 2, 1, "", "transform"]], "autots.tools.transform.BTCD": [[6, 2, 1, "", "fit"], [6, 2, 1, "", "fit_transform"], [6, 2, 1, "", "get_new_params"], [6, 2, 1, "", "inverse_transform"], [6, 2, 1, "", "transform"]], "autots.tools.transform.CenterLastValue": [[6, 2, 1, "", "fit"], [6, 2, 1, "", "fit_transform"], [6, 2, 1, "", "get_new_params"], [6, 2, 1, "", "inverse_transform"], [6, 2, 1, "", "transform"]], "autots.tools.transform.CenterSplit": [[6, 2, 1, "", "fit"], [6, 2, 1, "", "fit_transform"], [6, 2, 1, "", "get_new_params"], [6, 2, 1, "", "inverse_transform"], [6, 2, 1, "", "transform"]], "autots.tools.transform.ChangepointDetrend": [[6, 2, 1, "", "fit"], [6, 2, 1, "", "fit_transform"], [6, 2, 1, "", "get_new_params"], [6, 2, 1, "", "inverse_transform"], [6, 2, 1, "", "transform"]], "autots.tools.transform.ClipOutliers": [[6, 2, 1, "", "fit"], [6, 2, 1, "", "fit_transform"], [6, 2, 1, "", "get_new_params"], [6, 2, 1, "", "inverse_transform"], [6, 2, 1, "", "transform"]], "autots.tools.transform.Cointegration": [[6, 2, 1, "", "fit"], [6, 2, 1, "", "fit_transform"], [6, 2, 1, "", "get_new_params"], [6, 2, 1, "", "inverse_transform"], [6, 2, 1, "", "transform"]], "autots.tools.transform.Constraint": [[6, 2, 1, "", "fit"], [6, 2, 1, "", "fit_transform"], [6, 2, 1, "", "get_new_params"], [6, 2, 1, "", "inverse_transform"], [6, 2, 1, "", "transform"]], "autots.tools.transform.CumSumTransformer": [[6, 2, 1, "", "fit"], [6, 2, 1, "", "fit_transform"], [6, 2, 1, "", "inverse_transform"], [6, 2, 1, "", "transform"]], "autots.tools.transform.DatepartRegressionTransformer": [[6, 2, 1, "", "fit"], [6, 2, 1, "", "fit_transform"], [6, 2, 1, "", "get_new_params"], [6, 2, 1, "", "impute"], [6, 2, 1, "", "inverse_transform"], [6, 2, 1, "", "transform"]], "autots.tools.transform.Detrend": [[6, 2, 1, "", "fit"], [6, 2, 1, "", "fit_transform"], [6, 2, 1, "", "get_new_params"], [6, 2, 1, "", "inverse_transform"], [6, 2, 1, "", "transform"]], "autots.tools.transform.DiffSmoother": [[6, 2, 1, "", "fit"], [6, 2, 1, "", "fit_transform"], [6, 2, 1, "", "get_new_params"], [6, 2, 1, "", "transform"]], "autots.tools.transform.DifferencedTransformer": [[6, 2, 1, "", "fit"], [6, 2, 1, "", "fit_transform"], [6, 2, 1, "", "get_new_params"], [6, 2, 1, "", "inverse_transform"], [6, 2, 1, "", "transform"]], "autots.tools.transform.Discretize": [[6, 2, 1, "", "fit"], [6, 2, 1, "", "fit_transform"], [6, 2, 1, "", "get_new_params"], [6, 2, 1, "", "inverse_transform"], [6, 2, 1, "", "transform"]], "autots.tools.transform.EWMAFilter": [[6, 2, 1, "", "fit_transform"], [6, 2, 1, "", "get_new_params"], [6, 2, 1, "", "transform"]], "autots.tools.transform.EmptyTransformer": [[6, 2, 1, "", "fit"], [6, 2, 1, "", "fit_transform"], [6, 2, 1, "", "get_new_params"], [6, 2, 1, "", "inverse_transform"], [6, 2, 1, "", "transform"]], "autots.tools.transform.FFTDecomposition": [[6, 2, 1, "", "fit"], [6, 2, 1, "", "fit_transform"], [6, 2, 1, "", "get_new_params"], [6, 2, 1, "", "inverse_transform"], [6, 2, 1, "", "transform"]], "autots.tools.transform.FFTFilter": [[6, 2, 1, "", "fit"], [6, 2, 1, "", "fit_transform"], [6, 2, 1, "", "get_new_params"], [6, 2, 1, "", "inverse_transform"], [6, 2, 1, "", "transform"]], "autots.tools.transform.FIRFilter": [[6, 2, 1, "", "filter"], [6, 2, 1, "", "fit"], [6, 2, 1, "", "fit_transform"], [6, 2, 1, "", "get_new_params"], [6, 2, 1, "", "inverse_transform"], [6, 2, 1, "", "transform"]], "autots.tools.transform.FastICA": [[6, 2, 1, "", "fit"], [6, 2, 1, "", "fit_transform"], [6, 2, 1, "", "get_new_params"], [6, 2, 1, "", "inverse_transform"], [6, 2, 1, "", "transform"]], "autots.tools.transform.GeneralTransformer": [[6, 2, 1, "", "fill_na"], [6, 2, 1, "", "fit"], [6, 2, 1, "", "fit_transform"], [6, 2, 1, "", "get_new_params"], [6, 2, 1, "", "inverse_transform"], [6, 2, 1, "", "retrieve_transformer"], [6, 2, 1, "", "transform"]], "autots.tools.transform.HPFilter": [[6, 2, 1, "", "fit_transform"], [6, 2, 1, "", "get_new_params"], [6, 2, 1, "", "transform"]], "autots.tools.transform.HistoricValues": [[6, 2, 1, "", "fit"], [6, 2, 1, "", "fit_transform"], [6, 2, 1, "", "get_new_params"], [6, 2, 1, "", "inverse_transform"], [6, 2, 1, "", "transform"]], "autots.tools.transform.HolidayTransformer": [[6, 2, 1, "", "dates_to_holidays"], [6, 2, 1, "", "fit"], [6, 2, 1, "", "fit_transform"], [6, 2, 1, "", "get_new_params"], [6, 2, 1, "", "inverse_transform"], [6, 2, 1, "", "transform"]], "autots.tools.transform.IntermittentOccurrence": [[6, 2, 1, "", "fit"], [6, 2, 1, "", "fit_transform"], [6, 2, 1, "", "get_new_params"], [6, 2, 1, "", "inverse_transform"], [6, 2, 1, "", "transform"]], "autots.tools.transform.KalmanSmoothing": [[6, 2, 1, "", "fit"], [6, 2, 1, "", "fit_transform"], [6, 2, 1, "", "get_new_params"], [6, 2, 1, "", "inverse_transform"], [6, 2, 1, "", "transform"]], "autots.tools.transform.LevelShiftMagic": [[6, 2, 1, "", "fit"], [6, 2, 1, "", "fit_transform"], [6, 2, 1, "", "get_new_params"], [6, 2, 1, "", "inverse_transform"], [6, 2, 1, "", "transform"]], "autots.tools.transform.LocalLinearTrend": [[6, 2, 1, "", "fit"], [6, 2, 1, "", "fit_transform"], [6, 2, 1, "", "get_new_params"], [6, 2, 1, "", "inverse_transform"], [6, 2, 1, "", "transform"]], "autots.tools.transform.MeanDifference": [[6, 2, 1, "", "fit"], [6, 2, 1, "", "fit_transform"], [6, 2, 1, "", "inverse_transform"], [6, 2, 1, "", "transform"]], "autots.tools.transform.MeanPercentSplitter": [[6, 2, 1, "", "fit"], [6, 2, 1, "", "fit_transform"], [6, 2, 1, "", "get_new_params"], [6, 2, 1, "", "inverse_transform"], [6, 2, 1, "", "transform"]], "autots.tools.transform.PCA": [[6, 2, 1, "", "fit"], [6, 2, 1, "", "fit_transform"], [6, 2, 1, "", "get_new_params"], [6, 2, 1, "", "inverse_transform"], [6, 2, 1, "", "transform"]], "autots.tools.transform.PctChangeTransformer": [[6, 2, 1, "", "fit"], [6, 2, 1, "", "fit_transform"], [6, 2, 1, "", "inverse_transform"], [6, 2, 1, "", "transform"]], "autots.tools.transform.PositiveShift": [[6, 2, 1, "", "fit"], [6, 2, 1, "", "fit_transform"], [6, 2, 1, "", "inverse_transform"], [6, 2, 1, "", "transform"]], "autots.tools.transform.RegressionFilter": [[6, 2, 1, "", "fit"], [6, 2, 1, "", "fit_transform"], [6, 2, 1, "", "get_new_params"], [6, 2, 1, "", "inverse_transform"], [6, 2, 1, "", "transform"]], "autots.tools.transform.ReplaceConstant": [[6, 2, 1, "", "fit"], [6, 2, 1, "", "fit_transform"], [6, 2, 1, "", "get_new_params"], [6, 2, 1, "", "inverse_transform"], [6, 2, 1, "", "transform"]], "autots.tools.transform.RollingMeanTransformer": [[6, 2, 1, "", "fit"], [6, 2, 1, "", "fit_transform"], [6, 2, 1, "", "get_new_params"], [6, 2, 1, "", "inverse_transform"], [6, 2, 1, "", "transform"]], "autots.tools.transform.Round": [[6, 2, 1, "", "fit"], [6, 2, 1, "", "fit_transform"], [6, 2, 1, "", "get_new_params"], [6, 2, 1, "", "inverse_transform"], [6, 2, 1, "", "transform"]], "autots.tools.transform.STLFilter": [[6, 2, 1, "", "fit_transform"], [6, 2, 1, "", "get_new_params"], [6, 2, 1, "", "transform"]], "autots.tools.transform.ScipyFilter": [[6, 2, 1, "", "fit"], [6, 2, 1, "", "fit_transform"], [6, 2, 1, "", "get_new_params"], [6, 2, 1, "", "inverse_transform"], [6, 2, 1, "", "transform"]], "autots.tools.transform.SeasonalDifference": [[6, 2, 1, "", "fit"], [6, 2, 1, "", "fit_transform"], [6, 2, 1, "", "get_new_params"], [6, 2, 1, "", "inverse_transform"], [6, 2, 1, "", "transform"]], "autots.tools.transform.ShiftFirstValue": [[6, 2, 1, "", "fit"], [6, 2, 1, "", "fit_transform"], [6, 2, 1, "", "get_new_params"], [6, 2, 1, "", "inverse_transform"], [6, 2, 1, "", "transform"]], "autots.tools.transform.SinTrend": [[6, 2, 1, "", "fit"], [6, 2, 1, "", "fit_sin"], [6, 2, 1, "", "fit_transform"], [6, 2, 1, "", "get_new_params"], [6, 2, 1, "", "inverse_transform"], [6, 2, 1, "", "transform"]], "autots.tools.transform.Slice": [[6, 2, 1, "", "fit"], [6, 2, 1, "", "fit_transform"], [6, 2, 1, "", "get_new_params"], [6, 2, 1, "", "inverse_transform"], [6, 2, 1, "", "transform"]], "autots.tools.transform.StandardScaler": [[6, 2, 1, "", "fit"], [6, 2, 1, "", "fit_transform"], [6, 2, 1, "", "inverse_transform"], [6, 2, 1, "", "transform"]], "autots.tools.transform.StatsmodelsFilter": [[6, 2, 1, "", "bkfilter"], [6, 2, 1, "", "cffilter"], [6, 2, 1, "", "convolution_filter"], [6, 2, 1, "", "fit_transform"], [6, 2, 1, "", "transform"]], "autots.tools.transform.ThetaTransformer": [[6, 2, 1, "", "fit"], [6, 2, 1, "", "fit_transform"], [6, 2, 1, "", "get_new_params"], [6, 2, 1, "", "inverse_transform"], [6, 2, 1, "", "transform"]], "autots.tools.wavelet": [[6, 4, 1, "", "continuous_db2_wavelet"], [6, 4, 1, "", "create_daubechies_db2_wavelet"], [6, 4, 1, "", "create_gaussian_wavelet"], [6, 4, 1, "", "create_haar_wavelet"], [6, 4, 1, "", "create_mexican_hat_wavelet"], [6, 4, 1, "", "create_morlet_wavelet"], [6, 4, 1, "", "create_narrowing_wavelets"], [6, 4, 1, "", "create_real_morlet_wavelet"], [6, 4, 1, "", "create_wavelet"], [6, 4, 1, "", "offset_wavelet"]], "autots.tools.window_functions": [[6, 4, 1, "", "chunk_reshape"], [6, 4, 1, "", "last_window"], [6, 4, 1, "", "np_2d_arange"], [6, 4, 1, "", "retrieve_closest_indices"], [6, 4, 1, "", "rolling_window_view"], [6, 4, 1, "", "sliding_window_view"], [6, 4, 1, "", "window_id_maker"], [6, 4, 1, "", "window_lin_reg"], [6, 4, 1, "", "window_lin_reg_mean"], [6, 4, 1, "", "window_lin_reg_mean_no_nan"], [6, 4, 1, "", "window_maker"], [6, 4, 1, "", "window_maker_2"], [6, 4, 1, "", "window_maker_3"], [6, 4, 1, "", "window_sum_mean"], [6, 4, 1, "", "window_sum_mean_nan_tail"], [6, 4, 1, "", "window_sum_nan_mean"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:attribute", "4": "py:function", "5": "py:data"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "data", "Python data"]}, "titleterms": {"autot": [0, 1, 2, 3, 4, 5, 6, 7, 8], "instal": [0, 7, 9], "get": 0, "start": 0, "modul": [0, 1, 2, 3, 4, 5, 6], "api": 0, "indic": 0, "tabl": [0, 7, 9], "packag": [1, 2, 3, 4, 5, 6, 9], "subpackag": 1, "content": [1, 2, 3, 4, 5, 6, 7, 9], "dataset": 2, "submodul": [2, 3, 4, 5, 6], "fred": 2, "evalu": 3, "anomaly_detector": 3, "auto_model": 3, "auto_t": 3, "benchmark": [3, 9], "event_forecast": 3, "metric": [3, 9], "valid": [3, 9], "model": [4, 9], "arch": 4, "base": 4, "basic": [4, 7], "cassandra": 4, "dnn": 4, "ensembl": [4, 9], "gluont": 4, "greykit": 4, "matrix_var": 4, "mlensembl": 4, "model_list": 4, "neural_forecast": 4, "prophet": 4, "pytorch": 4, "sklearn": 4, "statsmodel": 4, "tfp": 4, "tide": 4, "templat": [5, 9], "gener": 5, "tool": 6, "anomaly_util": 6, "calendar": 6, "cointegr": 6, "constraint": 6, "cpu_count": 6, "fast_kalman": 6, "usag": 6, "exampl": [6, 9], "fft": 6, "fir_filt": 6, "hierarchi": [6, 9], "holidai": 6, "imput": 6, "lunar": 6, "percentil": 6, "probabilist": 6, "profil": 6, "regressor": [6, 9], "season": 6, "shape": 6, "threshold": 6, "transform": [6, 9], "wavelet": 6, "window_funct": 6, "intro": 7, "us": [7, 9], "tip": 7, "speed": [7, 9], "larg": 7, "data": [7, 9], "how": 7, "contribut": 7, "process": [7, 9], "tutori": 9, "extend": 9, "A": 9, "simpl": 9, "import": 9, "you": 9, "can": 9, "tailor": 9, "few": 9, "wai": 9, "what": 9, "worri": 9, "about": 9, "cross": 9, "anoth": 9, "list": 9, "deploy": 9, "export": 9, "run": 9, "just": 9, "One": 9, "group": 9, "forecast": 9, "depend": 9, "version": 9, "requir": 9, "option": 9, "safest": 9, "bet": 9, "intel": 9, "conda": 9, "channel": 9, "sometim": 9, "faster": 9, "also": 9, "more": 9, "prone": 9, "bug": 9, "caveat": 9, "advic": 9, "mysteri": 9, "crash": 9, "seri": 9, "id": 9, "realli": 9, "need": 9, "uniqu": 9, "column": 9, "name": 9, "all": 9, "wide": 9, "short": 9, "train": 9, "histori": 9, "ad": 9, "other": 9, "inform": 9, "simul": 9, "event": 9, "risk": 9, "anomali": 9, "detect": 9, "hack": 9, "pass": 9, "paramet": 9, "aren": 9, "t": 9, "otherwis": 9, "avail": 9, "categor": 9, "custom": 9, "unusu": 9, "frequenc": 9, "independ": 9, "note": 9, "regress": 9}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 60}, "alltitles": {"AutoTS": [[0, "autots"], [7, "autots"]], "Installation": [[0, "installation"], [7, "id1"]], "Getting Started": [[0, "getting-started"]], "Modules API": [[0, "modules-api"]], "Indices and tables": [[0, "indices-and-tables"]], "autots package": [[1, "autots-package"]], "Subpackages": [[1, "subpackages"]], "Module contents": [[1, "module-autots"], [2, "module-autots.datasets"], [3, "module-autots.evaluator"], [4, "module-autots.models"], [5, "module-autots.templates"], [6, "module-autots.tools"]], ")": [[1, "id19"], [2, "id3"]], "autots.datasets package": [[2, "autots-datasets-package"]], "Submodules": [[2, "submodules"], [3, "submodules"], [4, "submodules"], [5, "submodules"], [6, "submodules"]], "autots.datasets.fred module": [[2, "module-autots.datasets.fred"]], "autots.evaluator package": [[3, "autots-evaluator-package"]], "autots.evaluator.anomaly_detector module": [[3, "module-autots.evaluator.anomaly_detector"]], "autots.evaluator.auto_model module": [[3, "module-autots.evaluator.auto_model"]], "autots.evaluator.auto_ts module": [[3, "module-autots.evaluator.auto_ts"]], "autots.evaluator.benchmark module": [[3, "module-autots.evaluator.benchmark"]], "autots.evaluator.event_forecasting module": [[3, "module-autots.evaluator.event_forecasting"]], "autots.evaluator.metrics module": [[3, "module-autots.evaluator.metrics"]], "autots.evaluator.validation module": [[3, "module-autots.evaluator.validation"]], "autots.models package": [[4, "autots-models-package"]], "autots.models.arch module": [[4, "module-autots.models.arch"]], "autots.models.base module": [[4, "module-autots.models.base"]], "autots.models.basics module": [[4, "module-autots.models.basics"]], "autots.models.cassandra module": [[4, "module-autots.models.cassandra"]], "autots.models.dnn module": [[4, "module-autots.models.dnn"]], "autots.models.ensemble module": [[4, "module-autots.models.ensemble"]], "autots.models.gluonts module": [[4, "module-autots.models.gluonts"]], "autots.models.greykite module": [[4, "module-autots.models.greykite"]], "autots.models.matrix_var module": [[4, "module-autots.models.matrix_var"]], "autots.models.mlensemble module": [[4, "module-autots.models.mlensemble"]], "autots.models.model_list module": [[4, "module-autots.models.model_list"]], "autots.models.neural_forecast module": [[4, "module-autots.models.neural_forecast"]], "autots.models.prophet module": [[4, "module-autots.models.prophet"]], "autots.models.pytorch module": [[4, "module-autots.models.pytorch"]], "autots.models.sklearn module": [[4, "module-autots.models.sklearn"]], "autots.models.statsmodels module": [[4, "module-autots.models.statsmodels"]], "autots.models.tfp module": [[4, "module-autots.models.tfp"]], "autots.models.tide module": [[4, "module-autots.models.tide"]], "autots.templates package": [[5, "autots-templates-package"]], "autots.templates.general module": [[5, "module-autots.templates.general"]], "autots.tools package": [[6, "autots-tools-package"]], "autots.tools.anomaly_utils module": [[6, "module-autots.tools.anomaly_utils"]], "autots.tools.calendar module": [[6, "module-autots.tools.calendar"]], "autots.tools.cointegration module": [[6, "module-autots.tools.cointegration"]], "autots.tools.constraint module": [[6, "module-autots.tools.constraint"]], "autots.tools.cpu_count module": [[6, "module-autots.tools.cpu_count"]], "autots.tools.fast_kalman module": [[6, "module-autots.tools.fast_kalman"]], "Usage example": [[6, "usage-example"]], "autots.tools.fft module": [[6, "module-autots.tools.fft"]], "autots.tools.fir_filter module": [[6, "module-autots.tools.fir_filter"]], "autots.tools.hierarchial module": [[6, "module-autots.tools.hierarchial"]], "autots.tools.holiday module": [[6, "module-autots.tools.holiday"]], "autots.tools.impute module": [[6, "module-autots.tools.impute"]], "autots.tools.lunar module": [[6, "module-autots.tools.lunar"]], "autots.tools.percentile module": [[6, "module-autots.tools.percentile"]], "autots.tools.probabilistic module": [[6, "module-autots.tools.probabilistic"]], "autots.tools.profile module": [[6, "module-autots.tools.profile"]], "autots.tools.regressor module": [[6, "module-autots.tools.regressor"]], "autots.tools.seasonal module": [[6, "module-autots.tools.seasonal"]], "autots.tools.shaping module": [[6, "module-autots.tools.shaping"]], "autots.tools.thresholding module": [[6, "module-autots.tools.thresholding"]], "autots.tools.transform module": [[6, "module-autots.tools.transform"]], "autots.tools.wavelet module": [[6, "module-autots.tools.wavelet"]], "autots.tools.window_functions module": [[6, "module-autots.tools.window_functions"]], "Intro": [[7, "intro"]], "Table of Contents": [[7, "table-of-contents"], [9, "table-of-contents"]], "Basic Use": [[7, "id2"]], "Tips for Speed and Large Data:": [[7, "id3"]], "How to Contribute:": [[7, "how-to-contribute"]], "AutoTS Process": [[7, "autots-process"]], "autots": [[8, "autots"]], "Tutorial": [[9, "tutorial"]], "Extended Tutorial": [[9, "extended-tutorial"]], "A simple example": [[9, "id1"]], "Import of data": [[9, "import-of-data"]], "You can tailor the process in a few ways\u2026": [[9, "you-can-tailor-the-process-in-a-few-ways"]], "What to Worry About": [[9, "what-to-worry-about"]], "Validation and Cross Validation": [[9, "id2"]], "Another Example:": [[9, "id3"]], "Model Lists": [[9, "id4"]], "Deployment and Template Import/Export": [[9, "deployment-and-template-import-export"]], "Running Just One Model": [[9, "id5"]], "Metrics": [[9, "id6"]], "Hierarchial and Grouped Forecasts": [[9, "hierarchial-and-grouped-forecasts"]], "Ensembles": [[9, "id7"]], "Installation and Dependency Versioning": [[9, "installation-and-dependency-versioning"]], "Requirements:": [[9, "requirements"]], "Optional Packages": [[9, "optional-packages"]], "Safest bet for installation:": [[9, "safest-bet-for-installation"]], "Intel conda channel installation (sometime faster, also, more prone to bugs)": [[9, "intel-conda-channel-installation-sometime-faster-also-more-prone-to-bugs"]], "Speed Benchmark": [[9, "speed-benchmark"]], "Caveats and Advice": [[9, "caveats-and-advice"]], "Mysterious crashes": [[9, "mysterious-crashes"]], "Series IDs really need to be unique (or column names need to be all unique in wide data)": [[9, "series-ids-really-need-to-be-unique-or-column-names-need-to-be-all-unique-in-wide-data"]], "Short Training History": [[9, "short-training-history"]], "Adding regressors and other information": [[9, "adding-regressors-and-other-information"]], "Simulation Forecasting": [[9, "id8"]], "Event Risk Forecasting and Anomaly Detection": [[9, "event-risk-forecasting-and-anomaly-detection"]], "A Hack for Passing in Parameters (that aren\u2019t otherwise available)": [[9, "a-hack-for-passing-in-parameters-that-aren-t-otherwise-available"]], "Categorical Data": [[9, "categorical-data"]], "Custom and Unusual Frequencies": [[9, "custom-and-unusual-frequencies"]], "Using the Transformers independently": [[9, "using-the-transformers-independently"]], "Note on ~Regression Models": [[9, "note-on-regression-models"]], "Models": [[9, "id9"]]}, "indexentries": {"anomalydetector (class in autots)": [[1, "autots.AnomalyDetector"]], "autots (class in autots)": [[1, "autots.AutoTS"]], "cassandra (class in autots)": [[1, "autots.Cassandra"]], "eventriskforecast (class in autots)": [[1, "autots.EventRiskForecast"]], "generaltransformer (class in autots)": [[1, "autots.GeneralTransformer"]], "holidaydetector (class in autots)": [[1, "autots.HolidayDetector"]], "modelprediction (class in autots)": [[1, "autots.ModelPrediction"]], "randomtransform() (in module autots)": [[1, "autots.RandomTransform"]], "transformts (in module autots)": [[1, "autots.TransformTS"]], "analyze_trend() (autots.cassandra method)": [[1, "autots.Cassandra.analyze_trend"]], "anomalies (autots.cassandra..anomaly_detector attribute)": [[1, "autots.Cassandra..anomaly_detector.anomalies"]], "auto_fit() (autots.cassandra method)": [[1, "autots.Cassandra.auto_fit"]], "autots": [[1, "module-autots"]], "back_forecast() (autots.autots method)": [[1, "autots.AutoTS.back_forecast"]], "base_scaler() (autots.cassandra method)": [[1, "autots.Cassandra.base_scaler"]], "best_model (autots.autots attribute)": [[1, "autots.AutoTS.best_model"]], "best_model_ensemble (autots.autots attribute)": [[1, "autots.AutoTS.best_model_ensemble"]], "best_model_name (autots.autots attribute)": [[1, "autots.AutoTS.best_model_name"]], "best_model_params (autots.autots attribute)": [[1, "autots.AutoTS.best_model_params"]], "best_model_per_series_mape() (autots.autots method)": [[1, "autots.AutoTS.best_model_per_series_mape"]], "best_model_per_series_score() (autots.autots method)": [[1, "autots.AutoTS.best_model_per_series_score"]], "best_model_transformation_params (autots.autots attribute)": [[1, "autots.AutoTS.best_model_transformation_params"]], "compare_actual_components() (autots.cassandra method)": [[1, "autots.Cassandra.compare_actual_components"]], "create_forecast_index() (autots.cassandra method)": [[1, "autots.Cassandra.create_forecast_index"]], "create_lagged_regressor() (in module autots)": [[1, "autots.create_lagged_regressor"]], "create_regressor() (in module autots)": [[1, "autots.create_regressor"]], "create_t() (autots.cassandra method)": [[1, "autots.Cassandra.create_t"]], "create_unpredictability_score() (autots.autots method)": [[1, "autots.AutoTS.create_unpredictability_score"]], "cross_validate() (autots.cassandra method)": [[1, "autots.Cassandra.cross_validate"]], "dates_to_holidays() (autots.cassandra.holiday_detector method)": [[1, "autots.Cassandra.holiday_detector.dates_to_holidays"]], "dates_to_holidays() (autots.holidaydetector method)": [[1, "autots.HolidayDetector.dates_to_holidays"]], "detect() (autots.anomalydetector method)": [[1, "autots.AnomalyDetector.detect"]], "detect() (autots.holidaydetector method)": [[1, "autots.HolidayDetector.detect"]], "df_wide_numeric (autots.autots attribute)": [[1, "autots.AutoTS.df_wide_numeric"]], "diagnose_params() (autots.autots method)": [[1, "autots.AutoTS.diagnose_params"]], "expand_horizontal() (autots.autots method)": [[1, "autots.AutoTS.expand_horizontal"]], "export_best_model() (autots.autots method)": [[1, "autots.AutoTS.export_best_model"]], "export_template() (autots.autots method)": [[1, "autots.AutoTS.export_template"]], "failure_rate() (autots.autots method)": [[1, "autots.AutoTS.failure_rate"]], "feature_importance() (autots.cassandra method)": [[1, "autots.Cassandra.feature_importance"]], "fill_na() (autots.generaltransformer method)": [[1, "autots.GeneralTransformer.fill_na"]], "fit() (autots.anomalydetector method)": [[1, "autots.AnomalyDetector.fit"]], "fit() (autots.autots method)": [[1, "autots.AutoTS.fit"]], "fit() (autots.cassandra method)": [[1, "autots.Cassandra.fit"], [1, "id0"]], "fit() (autots.eventriskforecast method)": [[1, "autots.EventRiskForecast.fit"], [1, "id9"]], "fit() (autots.generaltransformer method)": [[1, "autots.GeneralTransformer.fit"]], "fit() (autots.holidaydetector method)": [[1, "autots.HolidayDetector.fit"]], "fit() (autots.modelprediction method)": [[1, "autots.ModelPrediction.fit"]], "fit_anomaly_classifier() (autots.anomalydetector method)": [[1, "autots.AnomalyDetector.fit_anomaly_classifier"]], "fit_data() (autots.autots method)": [[1, "autots.AutoTS.fit_data"]], "fit_data() (autots.cassandra method)": [[1, "autots.Cassandra.fit_data"]], "fit_data() (autots.modelprediction method)": [[1, "autots.ModelPrediction.fit_data"]], "fit_predict() (autots.modelprediction method)": [[1, "autots.ModelPrediction.fit_predict"]], "fit_transform() (autots.generaltransformer method)": [[1, "autots.GeneralTransformer.fit_transform"]], "generate_historic_risk_array() (autots.eventriskforecast method)": [[1, "autots.EventRiskForecast.generate_historic_risk_array"]], "generate_historic_risk_array() (autots.eventriskforecast static method)": [[1, "id10"]], "generate_result_windows() (autots.eventriskforecast method)": [[1, "autots.EventRiskForecast.generate_result_windows"], [1, "id11"]], "generate_risk_array() (autots.eventriskforecast method)": [[1, "autots.EventRiskForecast.generate_risk_array"]], "generate_risk_array() (autots.eventriskforecast static method)": [[1, "id12"]], "get_metric_corr() (autots.autots method)": [[1, "autots.AutoTS.get_metric_corr"]], "get_new_params() (autots.anomalydetector static method)": [[1, "autots.AnomalyDetector.get_new_params"]], "get_new_params() (autots.autots static method)": [[1, "autots.AutoTS.get_new_params"]], "get_new_params() (autots.cassandra method)": [[1, "autots.Cassandra.get_new_params"], [1, "id1"]], "get_new_params() (autots.generaltransformer static method)": [[1, "autots.GeneralTransformer.get_new_params"]], "get_new_params() (autots.holidaydetector static method)": [[1, "autots.HolidayDetector.get_new_params"]], "get_params() (autots.cassandra method)": [[1, "autots.Cassandra.get_params"]], "get_params_from_id() (autots.autots method)": [[1, "autots.AutoTS.get_params_from_id"]], "get_top_n_counts() (autots.autots method)": [[1, "autots.AutoTS.get_top_n_counts"]], "holiday_count (autots.cassandra. attribute)": [[1, "autots.Cassandra..holiday_count"]], "holidays (autots.cassandra. attribute)": [[1, "autots.Cassandra..holidays"]], "horizontal_per_generation() (autots.autots method)": [[1, "autots.AutoTS.horizontal_per_generation"]], "horizontal_to_df() (autots.autots method)": [[1, "autots.AutoTS.horizontal_to_df"]], "import_best_model() (autots.autots method)": [[1, "autots.AutoTS.import_best_model"]], "import_results() (autots.autots method)": [[1, "autots.AutoTS.import_results"]], "import_template() (autots.autots method)": [[1, "autots.AutoTS.import_template"]], "infer_frequency() (in module autots)": [[1, "autots.infer_frequency"]], "inverse_transform() (autots.generaltransformer method)": [[1, "autots.GeneralTransformer.inverse_transform"]], "list_failed_model_types() (autots.autots method)": [[1, "autots.AutoTS.list_failed_model_types"]], "load_artificial() (in module autots)": [[1, "autots.load_artificial"]], "load_daily() (in module autots)": [[1, "autots.load_daily"]], "load_hourly() (in module autots)": [[1, "autots.load_hourly"]], "load_linear() (in module autots)": [[1, "autots.load_linear"]], "load_live_daily() (in module autots)": [[1, "autots.load_live_daily"]], "load_monthly() (in module autots)": [[1, "autots.load_monthly"]], "load_sine() (in module autots)": [[1, "autots.load_sine"]], "load_template() (autots.autots method)": [[1, "autots.AutoTS.load_template"]], "load_weekdays() (in module autots)": [[1, "autots.load_weekdays"]], "load_weekly() (in module autots)": [[1, "autots.load_weekly"]], "load_yearly() (in module autots)": [[1, "autots.load_yearly"]], "long_to_wide() (in module autots)": [[1, "autots.long_to_wide"]], "model_forecast() (in module autots)": [[1, "autots.model_forecast"]], "model_results (autots.autots.initial_results attribute)": [[1, "autots.AutoTS.initial_results.model_results"]], "module": [[1, "module-autots"], [2, "module-autots.datasets"], [2, "module-autots.datasets.fred"], [3, "module-autots.evaluator"], [3, "module-autots.evaluator.anomaly_detector"], [3, "module-autots.evaluator.auto_model"], [3, "module-autots.evaluator.auto_ts"], [3, "module-autots.evaluator.benchmark"], [3, "module-autots.evaluator.event_forecasting"], [3, "module-autots.evaluator.metrics"], [3, "module-autots.evaluator.validation"], [4, "module-autots.models"], [4, "module-autots.models.arch"], [4, "module-autots.models.base"], [4, "module-autots.models.basics"], [4, "module-autots.models.cassandra"], [4, "module-autots.models.dnn"], [4, "module-autots.models.ensemble"], [4, "module-autots.models.gluonts"], [4, "module-autots.models.greykite"], [4, "module-autots.models.matrix_var"], [4, "module-autots.models.mlensemble"], [4, "module-autots.models.model_list"], [4, "module-autots.models.neural_forecast"], [4, "module-autots.models.prophet"], [4, "module-autots.models.pytorch"], [4, "module-autots.models.sklearn"], [4, "module-autots.models.statsmodels"], [4, "module-autots.models.tfp"], [4, "module-autots.models.tide"], [5, "module-autots.templates"], [5, "module-autots.templates.general"], [6, "module-autots.tools"], [6, "module-autots.tools.anomaly_utils"], [6, "module-autots.tools.calendar"], [6, "module-autots.tools.cointegration"], [6, "module-autots.tools.constraint"], [6, "module-autots.tools.cpu_count"], [6, "module-autots.tools.fast_kalman"], [6, "module-autots.tools.fft"], [6, "module-autots.tools.fir_filter"], [6, "module-autots.tools.hierarchial"], [6, "module-autots.tools.holiday"], [6, "module-autots.tools.impute"], [6, "module-autots.tools.lunar"], [6, "module-autots.tools.percentile"], [6, "module-autots.tools.probabilistic"], [6, "module-autots.tools.profile"], [6, "module-autots.tools.regressor"], [6, "module-autots.tools.seasonal"], [6, "module-autots.tools.shaping"], [6, "module-autots.tools.thresholding"], [6, "module-autots.tools.transform"], [6, "module-autots.tools.wavelet"], [6, "module-autots.tools.window_functions"]], "mosaic_to_df() (autots.autots method)": [[1, "autots.AutoTS.mosaic_to_df"]], "next_fit() (autots.cassandra method)": [[1, "autots.Cassandra.next_fit"]], "params (autots.cassandra. attribute)": [[1, "autots.Cassandra..params"]], "parse_best_model() (autots.autots method)": [[1, "autots.AutoTS.parse_best_model"]], "plot() (autots.anomalydetector method)": [[1, "autots.AnomalyDetector.plot"]], "plot() (autots.eventriskforecast method)": [[1, "autots.EventRiskForecast.plot"], [1, "id13"]], "plot() (autots.holidaydetector method)": [[1, "autots.HolidayDetector.plot"]], "plot_anomaly() (autots.holidaydetector method)": [[1, "autots.HolidayDetector.plot_anomaly"]], "plot_back_forecast() (autots.autots method)": [[1, "autots.AutoTS.plot_back_forecast"]], "plot_backforecast() (autots.autots method)": [[1, "autots.AutoTS.plot_backforecast"]], "plot_chosen_transformer() (autots.autots method)": [[1, "autots.AutoTS.plot_chosen_transformer"]], "plot_components() (autots.cassandra method)": [[1, "autots.Cassandra.plot_components"], [1, "id2"]], "plot_eval() (autots.eventriskforecast method)": [[1, "autots.EventRiskForecast.plot_eval"]], "plot_failure_rate() (autots.autots method)": [[1, "autots.AutoTS.plot_failure_rate"]], "plot_forecast() (autots.cassandra method)": [[1, "autots.Cassandra.plot_forecast"], [1, "id3"]], "plot_generation_loss() (autots.autots method)": [[1, "autots.AutoTS.plot_generation_loss"]], "plot_horizontal() (autots.autots method)": [[1, "autots.AutoTS.plot_horizontal"]], "plot_horizontal_model_count() (autots.autots method)": [[1, "autots.AutoTS.plot_horizontal_model_count"]], "plot_horizontal_per_generation() (autots.autots method)": [[1, "autots.AutoTS.plot_horizontal_per_generation"]], "plot_horizontal_transformers() (autots.autots method)": [[1, "autots.AutoTS.plot_horizontal_transformers"]], "plot_metric_corr() (autots.autots method)": [[1, "autots.AutoTS.plot_metric_corr"]], "plot_model_failure_rate() (autots.autots method)": [[1, "autots.AutoTS.plot_model_failure_rate"]], "plot_mosaic() (autots.autots method)": [[1, "autots.AutoTS.plot_mosaic"]], "plot_per_series_error() (autots.autots method)": [[1, "autots.AutoTS.plot_per_series_error"]], "plot_per_series_mape() (autots.autots method)": [[1, "autots.AutoTS.plot_per_series_mape"]], "plot_per_series_smape() (autots.autots method)": [[1, "autots.AutoTS.plot_per_series_smape"]], "plot_series_corr() (autots.autots method)": [[1, "autots.AutoTS.plot_series_corr"]], "plot_things() (autots.cassandra method)": [[1, "autots.Cassandra.plot_things"]], "plot_transformer_by_class() (autots.autots method)": [[1, "autots.AutoTS.plot_transformer_by_class"]], "plot_transformer_failure_rate() (autots.autots method)": [[1, "autots.AutoTS.plot_transformer_failure_rate"]], "plot_trend() (autots.cassandra method)": [[1, "autots.Cassandra.plot_trend"], [1, "id4"]], "plot_unpredictability() (autots.autots method)": [[1, "autots.AutoTS.plot_unpredictability"]], "plot_validations() (autots.autots method)": [[1, "autots.AutoTS.plot_validations"]], "predict() (autots.autots method)": [[1, "autots.AutoTS.predict"]], "predict() (autots.cassandra method)": [[1, "autots.Cassandra.predict"], [1, "id5"]], "predict() (autots.eventriskforecast method)": [[1, "autots.EventRiskForecast.predict"], [1, "id14"]], "predict() (autots.modelprediction method)": [[1, "autots.ModelPrediction.predict"]], "predict_historic() (autots.eventriskforecast method)": [[1, "autots.EventRiskForecast.predict_historic"], [1, "id15"]], "predict_new_product() (autots.cassandra method)": [[1, "autots.Cassandra.predict_new_product"]], "predict_x_array (autots.cassandra. attribute)": [[1, "autots.Cassandra..predict_x_array"]], "predicted_trend (autots.cassandra. attribute)": [[1, "autots.Cassandra..predicted_trend"]], "process_components() (autots.cassandra method)": [[1, "autots.Cassandra.process_components"]], "regression_check (autots.autots attribute)": [[1, "autots.AutoTS.regression_check"]], "results() (autots.autots method)": [[1, "autots.AutoTS.results"]], "retrieve_transformer() (autots.generaltransformer class method)": [[1, "autots.GeneralTransformer.retrieve_transformer"]], "retrieve_validation_forecasts() (autots.autots method)": [[1, "autots.AutoTS.retrieve_validation_forecasts"]], "return_components() (autots.cassandra method)": [[1, "autots.Cassandra.return_components"], [1, "id6"]], "rolling_trend() (autots.cassandra method)": [[1, "autots.Cassandra.rolling_trend"]], "save_template() (autots.autots method)": [[1, "autots.AutoTS.save_template"]], "scale_data() (autots.cassandra method)": [[1, "autots.Cassandra.scale_data"]], "score_per_series (autots.autots attribute)": [[1, "autots.AutoTS.score_per_series"]], "score_to_anomaly() (autots.anomalydetector method)": [[1, "autots.AnomalyDetector.score_to_anomaly"]], "scores (autots.cassandra..anomaly_detector attribute)": [[1, "autots.Cassandra..anomaly_detector.scores"]], "set_limit() (autots.eventriskforecast method)": [[1, "autots.EventRiskForecast.set_limit"]], "set_limit() (autots.eventriskforecast static method)": [[1, "id16"]], "to_origin_space() (autots.cassandra method)": [[1, "autots.Cassandra.to_origin_space"]], "transform() (autots.generaltransformer method)": [[1, "autots.GeneralTransformer.transform"]], "treatment_causal_impact() (autots.cassandra method)": [[1, "autots.Cassandra.treatment_causal_impact"]], "trend_analysis() (autots.cassandra method)": [[1, "autots.Cassandra.trend_analysis"]], "trend_train (autots.cassandra. attribute)": [[1, "autots.Cassandra..trend_train"]], "validation_agg() (autots.autots method)": [[1, "autots.AutoTS.validation_agg"]], "x_array (autots.cassandra. attribute)": [[1, "autots.Cassandra..x_array"]], "autots.datasets": [[2, "module-autots.datasets"]], "autots.datasets.fred": [[2, "module-autots.datasets.fred"]], "get_fred_data() (in module autots.datasets.fred)": [[2, "autots.datasets.fred.get_fred_data"]], "load_artificial() (in module autots.datasets)": [[2, "autots.datasets.load_artificial"]], "load_daily() (in module autots.datasets)": [[2, "autots.datasets.load_daily"]], "load_hourly() (in module autots.datasets)": [[2, "autots.datasets.load_hourly"]], "load_linear() (in module autots.datasets)": [[2, "autots.datasets.load_linear"]], "load_live_daily() (in module autots.datasets)": [[2, "autots.datasets.load_live_daily"]], "load_monthly() (in module autots.datasets)": [[2, "autots.datasets.load_monthly"]], "load_sine() (in module autots.datasets)": [[2, "autots.datasets.load_sine"]], "load_weekdays() (in module autots.datasets)": [[2, "autots.datasets.load_weekdays"]], "load_weekly() (in module autots.datasets)": [[2, "autots.datasets.load_weekly"]], "load_yearly() (in module autots.datasets)": [[2, "autots.datasets.load_yearly"]], "load_zeroes() (in module autots.datasets)": [[2, "autots.datasets.load_zeroes"]], "anomalydetector (class in autots.evaluator.anomaly_detector)": [[3, "autots.evaluator.anomaly_detector.AnomalyDetector"]], "autots (class in autots.evaluator.auto_ts)": [[3, "autots.evaluator.auto_ts.AutoTS"]], "benchmark (class in autots.evaluator.benchmark)": [[3, "autots.evaluator.benchmark.Benchmark"]], "eventriskforecast (class in autots.evaluator.event_forecasting)": [[3, "autots.evaluator.event_forecasting.EventRiskForecast"]], "holidaydetector (class in autots.evaluator.anomaly_detector)": [[3, "autots.evaluator.anomaly_detector.HolidayDetector"]], "modelmonster() (in module autots.evaluator.auto_model)": [[3, "autots.evaluator.auto_model.ModelMonster"]], "modelprediction (class in autots.evaluator.auto_model)": [[3, "autots.evaluator.auto_model.ModelPrediction"]], "newgenetictemplate() (in module autots.evaluator.auto_model)": [[3, "autots.evaluator.auto_model.NewGeneticTemplate"]], "randomtemplate() (in module autots.evaluator.auto_model)": [[3, "autots.evaluator.auto_model.RandomTemplate"]], "templateevalobject (class in autots.evaluator.auto_model)": [[3, "autots.evaluator.auto_model.TemplateEvalObject"]], "templatewizard() (in module autots.evaluator.auto_model)": [[3, "autots.evaluator.auto_model.TemplateWizard"]], "uniquetemplates() (in module autots.evaluator.auto_model)": [[3, "autots.evaluator.auto_model.UniqueTemplates"]], "array_last_val() (in module autots.evaluator.metrics)": [[3, "autots.evaluator.metrics.array_last_val"]], "autots.evaluator": [[3, "module-autots.evaluator"]], "autots.evaluator.anomaly_detector": [[3, "module-autots.evaluator.anomaly_detector"]], "autots.evaluator.auto_model": [[3, "module-autots.evaluator.auto_model"]], "autots.evaluator.auto_ts": [[3, "module-autots.evaluator.auto_ts"]], "autots.evaluator.benchmark": [[3, "module-autots.evaluator.benchmark"]], "autots.evaluator.event_forecasting": [[3, "module-autots.evaluator.event_forecasting"]], "autots.evaluator.metrics": [[3, "module-autots.evaluator.metrics"]], "autots.evaluator.validation": [[3, "module-autots.evaluator.validation"]], "back_forecast() (autots.evaluator.auto_ts.autots method)": [[3, "autots.evaluator.auto_ts.AutoTS.back_forecast"]], "back_forecast() (in module autots.evaluator.auto_model)": [[3, "autots.evaluator.auto_model.back_forecast"]], "best_model (autots.evaluator.auto_ts.autots attribute)": [[3, "autots.evaluator.auto_ts.AutoTS.best_model"]], "best_model_ensemble (autots.evaluator.auto_ts.autots attribute)": [[3, "autots.evaluator.auto_ts.AutoTS.best_model_ensemble"]], "best_model_name (autots.evaluator.auto_ts.autots attribute)": [[3, "autots.evaluator.auto_ts.AutoTS.best_model_name"]], "best_model_params (autots.evaluator.auto_ts.autots attribute)": [[3, "autots.evaluator.auto_ts.AutoTS.best_model_params"]], "best_model_per_series_mape() (autots.evaluator.auto_ts.autots method)": [[3, "autots.evaluator.auto_ts.AutoTS.best_model_per_series_mape"]], "best_model_per_series_score() (autots.evaluator.auto_ts.autots method)": [[3, "autots.evaluator.auto_ts.AutoTS.best_model_per_series_score"]], "best_model_transformation_params (autots.evaluator.auto_ts.autots attribute)": [[3, "autots.evaluator.auto_ts.AutoTS.best_model_transformation_params"]], "chi_squared_hist_distribution_loss() (in module autots.evaluator.metrics)": [[3, "autots.evaluator.metrics.chi_squared_hist_distribution_loss"]], "concat() (autots.evaluator.auto_model.templateevalobject method)": [[3, "autots.evaluator.auto_model.TemplateEvalObject.concat"]], "containment() (in module autots.evaluator.metrics)": [[3, "autots.evaluator.metrics.containment"]], "contour() (in module autots.evaluator.metrics)": [[3, "autots.evaluator.metrics.contour"]], "create_model_id() (in module autots.evaluator.auto_model)": [[3, "autots.evaluator.auto_model.create_model_id"]], "create_unpredictability_score() (autots.evaluator.auto_ts.autots method)": [[3, "autots.evaluator.auto_ts.AutoTS.create_unpredictability_score"]], "dates_to_holidays() (autots.evaluator.anomaly_detector.holidaydetector method)": [[3, "autots.evaluator.anomaly_detector.HolidayDetector.dates_to_holidays"]], "default_scaler() (in module autots.evaluator.metrics)": [[3, "autots.evaluator.metrics.default_scaler"]], "detect() (autots.evaluator.anomaly_detector.anomalydetector method)": [[3, "autots.evaluator.anomaly_detector.AnomalyDetector.detect"]], "detect() (autots.evaluator.anomaly_detector.holidaydetector method)": [[3, "autots.evaluator.anomaly_detector.HolidayDetector.detect"]], "df_wide_numeric (autots.evaluator.auto_ts.autots attribute)": [[3, "autots.evaluator.auto_ts.AutoTS.df_wide_numeric"]], "diagnose_params() (autots.evaluator.auto_ts.autots method)": [[3, "autots.evaluator.auto_ts.AutoTS.diagnose_params"]], "dict_recombination() (in module autots.evaluator.auto_model)": [[3, "autots.evaluator.auto_model.dict_recombination"]], "dwae() (in module autots.evaluator.metrics)": [[3, "autots.evaluator.metrics.dwae"]], "error_correlations() (in module autots.evaluator.auto_ts)": [[3, "autots.evaluator.auto_ts.error_correlations"]], "expand_horizontal() (autots.evaluator.auto_ts.autots method)": [[3, "autots.evaluator.auto_ts.AutoTS.expand_horizontal"]], "export_best_model() (autots.evaluator.auto_ts.autots method)": [[3, "autots.evaluator.auto_ts.AutoTS.export_best_model"]], "export_template() (autots.evaluator.auto_ts.autots method)": [[3, "autots.evaluator.auto_ts.AutoTS.export_template"]], "extract_result_windows() (in module autots.evaluator.event_forecasting)": [[3, "autots.evaluator.event_forecasting.extract_result_windows"]], "extract_seasonal_val_periods() (in module autots.evaluator.validation)": [[3, "autots.evaluator.validation.extract_seasonal_val_periods"]], "extract_window_index() (in module autots.evaluator.event_forecasting)": [[3, "autots.evaluator.event_forecasting.extract_window_index"]], "failure_rate() (autots.evaluator.auto_ts.autots method)": [[3, "autots.evaluator.auto_ts.AutoTS.failure_rate"]], "fake_regressor() (in module autots.evaluator.auto_ts)": [[3, "autots.evaluator.auto_ts.fake_regressor"]], "fit() (autots.evaluator.anomaly_detector.anomalydetector method)": [[3, "autots.evaluator.anomaly_detector.AnomalyDetector.fit"]], "fit() (autots.evaluator.anomaly_detector.holidaydetector method)": [[3, "autots.evaluator.anomaly_detector.HolidayDetector.fit"]], "fit() (autots.evaluator.auto_model.modelprediction method)": [[3, "autots.evaluator.auto_model.ModelPrediction.fit"]], "fit() (autots.evaluator.auto_ts.autots method)": [[3, "autots.evaluator.auto_ts.AutoTS.fit"]], "fit() (autots.evaluator.event_forecasting.eventriskforecast method)": [[3, "autots.evaluator.event_forecasting.EventRiskForecast.fit"], [3, "id0"]], "fit_anomaly_classifier() (autots.evaluator.anomaly_detector.anomalydetector method)": [[3, "autots.evaluator.anomaly_detector.AnomalyDetector.fit_anomaly_classifier"]], "fit_data() (autots.evaluator.auto_model.modelprediction method)": [[3, "autots.evaluator.auto_model.ModelPrediction.fit_data"]], "fit_data() (autots.evaluator.auto_ts.autots method)": [[3, "autots.evaluator.auto_ts.AutoTS.fit_data"]], "fit_predict() (autots.evaluator.auto_model.modelprediction method)": [[3, "autots.evaluator.auto_model.ModelPrediction.fit_predict"]], "full_mae_errors (autots.evaluator.auto_model.templateevalobject attribute)": [[3, "autots.evaluator.auto_model.TemplateEvalObject.full_mae_errors"]], "full_mae_ids (autots.evaluator.auto_model.templateevalobject attribute)": [[3, "autots.evaluator.auto_model.TemplateEvalObject.full_mae_ids"]], "full_metric_evaluation() (in module autots.evaluator.metrics)": [[3, "autots.evaluator.metrics.full_metric_evaluation"]], "generate_historic_risk_array() (autots.evaluator.event_forecasting.eventriskforecast method)": [[3, "autots.evaluator.event_forecasting.EventRiskForecast.generate_historic_risk_array"]], "generate_historic_risk_array() (autots.evaluator.event_forecasting.eventriskforecast static method)": [[3, "id7"]], "generate_result_windows() (autots.evaluator.event_forecasting.eventriskforecast method)": [[3, "autots.evaluator.event_forecasting.EventRiskForecast.generate_result_windows"], [3, "id8"]], "generate_risk_array() (autots.evaluator.event_forecasting.eventriskforecast method)": [[3, "autots.evaluator.event_forecasting.EventRiskForecast.generate_risk_array"]], "generate_risk_array() (autots.evaluator.event_forecasting.eventriskforecast static method)": [[3, "id9"]], "generate_score() (in module autots.evaluator.auto_model)": [[3, "autots.evaluator.auto_model.generate_score"]], "generate_score_per_series() (in module autots.evaluator.auto_model)": [[3, "autots.evaluator.auto_model.generate_score_per_series"]], "generate_validation_indices() (in module autots.evaluator.validation)": [[3, "autots.evaluator.validation.generate_validation_indices"]], "get_metric_corr() (autots.evaluator.auto_ts.autots method)": [[3, "autots.evaluator.auto_ts.AutoTS.get_metric_corr"]], "get_new_params() (autots.evaluator.anomaly_detector.anomalydetector static method)": [[3, "autots.evaluator.anomaly_detector.AnomalyDetector.get_new_params"]], "get_new_params() (autots.evaluator.anomaly_detector.holidaydetector static method)": [[3, "autots.evaluator.anomaly_detector.HolidayDetector.get_new_params"]], "get_new_params() (autots.evaluator.auto_ts.autots static method)": [[3, "autots.evaluator.auto_ts.AutoTS.get_new_params"]], "get_params_from_id() (autots.evaluator.auto_ts.autots method)": [[3, "autots.evaluator.auto_ts.AutoTS.get_params_from_id"]], "get_top_n_counts() (autots.evaluator.auto_ts.autots method)": [[3, "autots.evaluator.auto_ts.AutoTS.get_top_n_counts"]], "horizontal_per_generation() (autots.evaluator.auto_ts.autots method)": [[3, "autots.evaluator.auto_ts.AutoTS.horizontal_per_generation"]], "horizontal_template_to_model_list() (in module autots.evaluator.auto_model)": [[3, "autots.evaluator.auto_model.horizontal_template_to_model_list"]], "horizontal_to_df() (autots.evaluator.auto_ts.autots method)": [[3, "autots.evaluator.auto_ts.AutoTS.horizontal_to_df"]], "import_best_model() (autots.evaluator.auto_ts.autots method)": [[3, "autots.evaluator.auto_ts.AutoTS.import_best_model"]], "import_results() (autots.evaluator.auto_ts.autots method)": [[3, "autots.evaluator.auto_ts.AutoTS.import_results"]], "import_template() (autots.evaluator.auto_ts.autots method)": [[3, "autots.evaluator.auto_ts.AutoTS.import_template"]], "kde() (in module autots.evaluator.metrics)": [[3, "autots.evaluator.metrics.kde"]], "kde_kl_distance() (in module autots.evaluator.metrics)": [[3, "autots.evaluator.metrics.kde_kl_distance"]], "kl_divergence() (in module autots.evaluator.metrics)": [[3, "autots.evaluator.metrics.kl_divergence"]], "linearity() (in module autots.evaluator.metrics)": [[3, "autots.evaluator.metrics.linearity"]], "list_failed_model_types() (autots.evaluator.auto_ts.autots method)": [[3, "autots.evaluator.auto_ts.AutoTS.list_failed_model_types"]], "load() (autots.evaluator.auto_model.templateevalobject method)": [[3, "autots.evaluator.auto_model.TemplateEvalObject.load"]], "load_template() (autots.evaluator.auto_ts.autots method)": [[3, "autots.evaluator.auto_ts.AutoTS.load_template"]], "mae() (in module autots.evaluator.metrics)": [[3, "autots.evaluator.metrics.mae"]], "mda() (in module autots.evaluator.metrics)": [[3, "autots.evaluator.metrics.mda"]], "mean_absolute_differential_error() (in module autots.evaluator.metrics)": [[3, "autots.evaluator.metrics.mean_absolute_differential_error"]], "mean_absolute_error() (in module autots.evaluator.metrics)": [[3, "autots.evaluator.metrics.mean_absolute_error"]], "medae() (in module autots.evaluator.metrics)": [[3, "autots.evaluator.metrics.medae"]], "median_absolute_error() (in module autots.evaluator.metrics)": [[3, "autots.evaluator.metrics.median_absolute_error"]], "mlvb() (in module autots.evaluator.metrics)": [[3, "autots.evaluator.metrics.mlvb"]], "model_forecast() (in module autots.evaluator.auto_model)": [[3, "autots.evaluator.auto_model.model_forecast"]], "model_results (autots.evaluator.auto_ts.autots.initial_results attribute)": [[3, "autots.evaluator.auto_ts.AutoTS.initial_results.model_results"]], "mosaic_to_df() (autots.evaluator.auto_ts.autots method)": [[3, "autots.evaluator.auto_ts.AutoTS.mosaic_to_df"]], "mqae() (in module autots.evaluator.metrics)": [[3, "autots.evaluator.metrics.mqae"]], "msle() (in module autots.evaluator.metrics)": [[3, "autots.evaluator.metrics.msle"]], "numpy_ffill() (in module autots.evaluator.metrics)": [[3, "autots.evaluator.metrics.numpy_ffill"]], "oda() (in module autots.evaluator.metrics)": [[3, "autots.evaluator.metrics.oda"]], "parse_best_model() (autots.evaluator.auto_ts.autots method)": [[3, "autots.evaluator.auto_ts.AutoTS.parse_best_model"]], "pinball_loss() (in module autots.evaluator.metrics)": [[3, "autots.evaluator.metrics.pinball_loss"]], "plot() (autots.evaluator.anomaly_detector.anomalydetector method)": [[3, "autots.evaluator.anomaly_detector.AnomalyDetector.plot"]], "plot() (autots.evaluator.anomaly_detector.holidaydetector method)": [[3, "autots.evaluator.anomaly_detector.HolidayDetector.plot"]], "plot() (autots.evaluator.event_forecasting.eventriskforecast method)": [[3, "autots.evaluator.event_forecasting.EventRiskForecast.plot"], [3, "id10"]], "plot_anomaly() (autots.evaluator.anomaly_detector.holidaydetector method)": [[3, "autots.evaluator.anomaly_detector.HolidayDetector.plot_anomaly"]], "plot_back_forecast() (autots.evaluator.auto_ts.autots method)": [[3, "autots.evaluator.auto_ts.AutoTS.plot_back_forecast"]], "plot_backforecast() (autots.evaluator.auto_ts.autots method)": [[3, "autots.evaluator.auto_ts.AutoTS.plot_backforecast"]], "plot_chosen_transformer() (autots.evaluator.auto_ts.autots method)": [[3, "autots.evaluator.auto_ts.AutoTS.plot_chosen_transformer"]], "plot_eval() (autots.evaluator.event_forecasting.eventriskforecast method)": [[3, "autots.evaluator.event_forecasting.EventRiskForecast.plot_eval"]], "plot_failure_rate() (autots.evaluator.auto_ts.autots method)": [[3, "autots.evaluator.auto_ts.AutoTS.plot_failure_rate"]], "plot_generation_loss() (autots.evaluator.auto_ts.autots method)": [[3, "autots.evaluator.auto_ts.AutoTS.plot_generation_loss"]], "plot_horizontal() (autots.evaluator.auto_ts.autots method)": [[3, "autots.evaluator.auto_ts.AutoTS.plot_horizontal"]], "plot_horizontal_model_count() (autots.evaluator.auto_ts.autots method)": [[3, "autots.evaluator.auto_ts.AutoTS.plot_horizontal_model_count"]], "plot_horizontal_per_generation() (autots.evaluator.auto_ts.autots method)": [[3, "autots.evaluator.auto_ts.AutoTS.plot_horizontal_per_generation"]], "plot_horizontal_transformers() (autots.evaluator.auto_ts.autots method)": [[3, "autots.evaluator.auto_ts.AutoTS.plot_horizontal_transformers"]], "plot_metric_corr() (autots.evaluator.auto_ts.autots method)": [[3, "autots.evaluator.auto_ts.AutoTS.plot_metric_corr"]], "plot_model_failure_rate() (autots.evaluator.auto_ts.autots method)": [[3, "autots.evaluator.auto_ts.AutoTS.plot_model_failure_rate"]], "plot_mosaic() (autots.evaluator.auto_ts.autots method)": [[3, "autots.evaluator.auto_ts.AutoTS.plot_mosaic"]], "plot_per_series_error() (autots.evaluator.auto_ts.autots method)": [[3, "autots.evaluator.auto_ts.AutoTS.plot_per_series_error"]], "plot_per_series_mape() (autots.evaluator.auto_ts.autots method)": [[3, "autots.evaluator.auto_ts.AutoTS.plot_per_series_mape"]], "plot_per_series_smape() (autots.evaluator.auto_ts.autots method)": [[3, "autots.evaluator.auto_ts.AutoTS.plot_per_series_smape"]], "plot_series_corr() (autots.evaluator.auto_ts.autots method)": [[3, "autots.evaluator.auto_ts.AutoTS.plot_series_corr"]], "plot_transformer_by_class() (autots.evaluator.auto_ts.autots method)": [[3, "autots.evaluator.auto_ts.AutoTS.plot_transformer_by_class"]], "plot_transformer_failure_rate() (autots.evaluator.auto_ts.autots method)": [[3, "autots.evaluator.auto_ts.AutoTS.plot_transformer_failure_rate"]], "plot_unpredictability() (autots.evaluator.auto_ts.autots method)": [[3, "autots.evaluator.auto_ts.AutoTS.plot_unpredictability"]], "plot_validations() (autots.evaluator.auto_ts.autots method)": [[3, "autots.evaluator.auto_ts.AutoTS.plot_validations"]], "precomp_wasserstein() (in module autots.evaluator.metrics)": [[3, "autots.evaluator.metrics.precomp_wasserstein"]], "predict() (autots.evaluator.auto_model.modelprediction method)": [[3, "autots.evaluator.auto_model.ModelPrediction.predict"]], "predict() (autots.evaluator.auto_ts.autots method)": [[3, "autots.evaluator.auto_ts.AutoTS.predict"]], "predict() (autots.evaluator.event_forecasting.eventriskforecast method)": [[3, "autots.evaluator.event_forecasting.EventRiskForecast.predict"], [3, "id11"]], "predict_historic() (autots.evaluator.event_forecasting.eventriskforecast method)": [[3, "autots.evaluator.event_forecasting.EventRiskForecast.predict_historic"], [3, "id12"]], "qae() (in module autots.evaluator.metrics)": [[3, "autots.evaluator.metrics.qae"]], "random_model() (in module autots.evaluator.auto_model)": [[3, "autots.evaluator.auto_model.random_model"]], "regression_check (autots.evaluator.auto_ts.autots attribute)": [[3, "autots.evaluator.auto_ts.AutoTS.regression_check"]], "remove_leading_zeros() (in module autots.evaluator.auto_model)": [[3, "autots.evaluator.auto_model.remove_leading_zeros"]], "results() (autots.evaluator.auto_ts.autots method)": [[3, "autots.evaluator.auto_ts.AutoTS.results"]], "retrieve_validation_forecasts() (autots.evaluator.auto_ts.autots method)": [[3, "autots.evaluator.auto_ts.AutoTS.retrieve_validation_forecasts"]], "rmse() (in module autots.evaluator.metrics)": [[3, "autots.evaluator.metrics.rmse"]], "root_mean_square_error() (in module autots.evaluator.metrics)": [[3, "autots.evaluator.metrics.root_mean_square_error"]], "rps() (in module autots.evaluator.metrics)": [[3, "autots.evaluator.metrics.rps"]], "run() (autots.evaluator.benchmark.benchmark method)": [[3, "autots.evaluator.benchmark.Benchmark.run"]], "save() (autots.evaluator.auto_model.templateevalobject method)": [[3, "autots.evaluator.auto_model.TemplateEvalObject.save"]], "save_template() (autots.evaluator.auto_ts.autots method)": [[3, "autots.evaluator.auto_ts.AutoTS.save_template"]], "scaled_pinball_loss() (in module autots.evaluator.metrics)": [[3, "autots.evaluator.metrics.scaled_pinball_loss"]], "score_per_series (autots.evaluator.auto_ts.autots attribute)": [[3, "autots.evaluator.auto_ts.AutoTS.score_per_series"]], "score_to_anomaly() (autots.evaluator.anomaly_detector.anomalydetector method)": [[3, "autots.evaluator.anomaly_detector.AnomalyDetector.score_to_anomaly"]], "set_limit() (autots.evaluator.event_forecasting.eventriskforecast method)": [[3, "autots.evaluator.event_forecasting.EventRiskForecast.set_limit"]], "set_limit() (autots.evaluator.event_forecasting.eventriskforecast static method)": [[3, "id13"]], "set_limit_forecast() (in module autots.evaluator.event_forecasting)": [[3, "autots.evaluator.event_forecasting.set_limit_forecast"]], "set_limit_forecast_historic() (in module autots.evaluator.event_forecasting)": [[3, "autots.evaluator.event_forecasting.set_limit_forecast_historic"]], "smape() (in module autots.evaluator.metrics)": [[3, "autots.evaluator.metrics.smape"]], "smoothness() (in module autots.evaluator.metrics)": [[3, "autots.evaluator.metrics.smoothness"]], "spl() (in module autots.evaluator.metrics)": [[3, "autots.evaluator.metrics.spl"]], "symmetric_mean_absolute_percentage_error() (in module autots.evaluator.metrics)": [[3, "autots.evaluator.metrics.symmetric_mean_absolute_percentage_error"]], "threshold_loss() (in module autots.evaluator.metrics)": [[3, "autots.evaluator.metrics.threshold_loss"]], "trans_dict_recomb() (in module autots.evaluator.auto_model)": [[3, "autots.evaluator.auto_model.trans_dict_recomb"]], "unpack_ensemble_models() (in module autots.evaluator.auto_model)": [[3, "autots.evaluator.auto_model.unpack_ensemble_models"]], "unsorted_wasserstein() (in module autots.evaluator.metrics)": [[3, "autots.evaluator.metrics.unsorted_wasserstein"]], "validate_num_validations() (in module autots.evaluator.validation)": [[3, "autots.evaluator.validation.validate_num_validations"]], "validation_agg() (autots.evaluator.auto_ts.autots method)": [[3, "autots.evaluator.auto_ts.AutoTS.validation_agg"]], "validation_aggregation() (in module autots.evaluator.auto_model)": [[3, "autots.evaluator.auto_model.validation_aggregation"]], "wasserstein() (in module autots.evaluator.metrics)": [[3, "autots.evaluator.metrics.wasserstein"]], "arch (class in autots.models.arch)": [[4, "autots.models.arch.ARCH"]], "ardl (class in autots.models.statsmodels)": [[4, "autots.models.statsmodels.ARDL"]], "arima (class in autots.models.statsmodels)": [[4, "autots.models.statsmodels.ARIMA"]], "averagevaluenaive (class in autots.models.basics)": [[4, "autots.models.basics.AverageValueNaive"]], "balltreemultivariatemotif (class in autots.models.basics)": [[4, "autots.models.basics.BallTreeMultivariateMotif"]], "balltreeregressionmotif (class in autots.models.basics)": [[4, "autots.models.basics.BallTreeRegressionMotif"]], "basiclinearmodel (class in autots.models.basics)": [[4, "autots.models.basics.BasicLinearModel"]], "bayesianmultioutputregression (class in autots.models.cassandra)": [[4, "autots.models.cassandra.BayesianMultiOutputRegression"]], "bestnensemble() (in module autots.models.ensemble)": [[4, "autots.models.ensemble.BestNEnsemble"]], "cassandra (class in autots.models.cassandra)": [[4, "autots.models.cassandra.Cassandra"]], "componentanalysis (class in autots.models.sklearn)": [[4, "autots.models.sklearn.ComponentAnalysis"]], "constantnaive (class in autots.models.basics)": [[4, "autots.models.basics.ConstantNaive"]], "dmd (class in autots.models.matrix_var)": [[4, "autots.models.matrix_var.DMD"]], "datepartregression (class in autots.models.sklearn)": [[4, "autots.models.sklearn.DatepartRegression"]], "distensemble() (in module autots.models.ensemble)": [[4, "autots.models.ensemble.DistEnsemble"]], "dynamicfactor (class in autots.models.statsmodels)": [[4, "autots.models.statsmodels.DynamicFactor"]], "dynamicfactormq (class in autots.models.statsmodels)": [[4, "autots.models.statsmodels.DynamicFactorMQ"]], "ets (class in autots.models.statsmodels)": [[4, "autots.models.statsmodels.ETS"]], "elasticnetwork (class in autots.models.dnn)": [[4, "autots.models.dnn.ElasticNetwork"]], "ensembleforecast() (in module autots.models.ensemble)": [[4, "autots.models.ensemble.EnsembleForecast"]], "ensembletemplategenerator() (in module autots.models.ensemble)": [[4, "autots.models.ensemble.EnsembleTemplateGenerator"]], "fbprophet (class in autots.models.prophet)": [[4, "autots.models.prophet.FBProphet"]], "fft (class in autots.models.basics)": [[4, "autots.models.basics.FFT"]], "glm (class in autots.models.statsmodels)": [[4, "autots.models.statsmodels.GLM"]], "gls (class in autots.models.statsmodels)": [[4, "autots.models.statsmodels.GLS"]], "gluonts (class in autots.models.gluonts)": [[4, "autots.models.gluonts.GluonTS"]], "greykite (class in autots.models.greykite)": [[4, "autots.models.greykite.Greykite"]], "hdistensemble() (in module autots.models.ensemble)": [[4, "autots.models.ensemble.HDistEnsemble"]], "horizontalensemble() (in module autots.models.ensemble)": [[4, "autots.models.ensemble.HorizontalEnsemble"]], "horizontaltemplategenerator() (in module autots.models.ensemble)": [[4, "autots.models.ensemble.HorizontalTemplateGenerator"]], "kalmanstatespace (class in autots.models.basics)": [[4, "autots.models.basics.KalmanStateSpace"]], "kerasrnn (class in autots.models.dnn)": [[4, "autots.models.dnn.KerasRNN"]], "latc (class in autots.models.matrix_var)": [[4, "autots.models.matrix_var.LATC"]], "lastvaluenaive (class in autots.models.basics)": [[4, "autots.models.basics.LastValueNaive"]], "mar (class in autots.models.matrix_var)": [[4, "autots.models.matrix_var.MAR"]], "mlensemble (class in autots.models.mlensemble)": [[4, "autots.models.mlensemble.MLEnsemble"]], "metricmotif (class in autots.models.basics)": [[4, "autots.models.basics.MetricMotif"]], "modelobject (class in autots.models.base)": [[4, "autots.models.base.ModelObject"]], "mosaicensemble() (in module autots.models.ensemble)": [[4, "autots.models.ensemble.MosaicEnsemble"]], "motif (class in autots.models.basics)": [[4, "autots.models.basics.Motif"]], "motifsimulation (class in autots.models.basics)": [[4, "autots.models.basics.MotifSimulation"]], "multivariateregression (class in autots.models.sklearn)": [[4, "autots.models.sklearn.MultivariateRegression"]], "nvar (class in autots.models.basics)": [[4, "autots.models.basics.NVAR"]], "neuralforecast (class in autots.models.neural_forecast)": [[4, "autots.models.neural_forecast.NeuralForecast"]], "neuralprophet (class in autots.models.prophet)": [[4, "autots.models.prophet.NeuralProphet"]], "predictionobject (class in autots.models.base)": [[4, "autots.models.base.PredictionObject"]], "preprocessingregression (class in autots.models.sklearn)": [[4, "autots.models.sklearn.PreprocessingRegression"]], "pytorchforecasting (class in autots.models.pytorch)": [[4, "autots.models.pytorch.PytorchForecasting"]], "rrvar (class in autots.models.matrix_var)": [[4, "autots.models.matrix_var.RRVAR"]], "randomfourierencoding (class in autots.models.sklearn)": [[4, "autots.models.sklearn.RandomFourierEncoding"]], "rollingregression (class in autots.models.sklearn)": [[4, "autots.models.sklearn.RollingRegression"]], "seasonalnaive (class in autots.models.basics)": [[4, "autots.models.basics.SeasonalNaive"]], "seasonalitymotif (class in autots.models.basics)": [[4, "autots.models.basics.SeasonalityMotif"]], "sectionalmotif (class in autots.models.basics)": [[4, "autots.models.basics.SectionalMotif"]], "tfpregression (class in autots.models.tfp)": [[4, "autots.models.tfp.TFPRegression"]], "tfpregressor (class in autots.models.tfp)": [[4, "autots.models.tfp.TFPRegressor"]], "tmf (class in autots.models.matrix_var)": [[4, "autots.models.matrix_var.TMF"]], "tvvar (class in autots.models.basics)": [[4, "autots.models.basics.TVVAR"]], "tensorflowsts (class in autots.models.tfp)": [[4, "autots.models.tfp.TensorflowSTS"]], "theta (class in autots.models.statsmodels)": [[4, "autots.models.statsmodels.Theta"]], "tide (class in autots.models.tide)": [[4, "autots.models.tide.TiDE"]], "timecovariates (class in autots.models.tide)": [[4, "autots.models.tide.TimeCovariates"]], "timeseriesdata (class in autots.models.tide)": [[4, "autots.models.tide.TimeSeriesdata"]], "transformer (class in autots.models.dnn)": [[4, "autots.models.dnn.Transformer"]], "univariateregression (class in autots.models.sklearn)": [[4, "autots.models.sklearn.UnivariateRegression"]], "unobservedcomponents (class in autots.models.statsmodels)": [[4, "autots.models.statsmodels.UnobservedComponents"]], "var (class in autots.models.statsmodels)": [[4, "autots.models.statsmodels.VAR"]], "varmax (class in autots.models.statsmodels)": [[4, "autots.models.statsmodels.VARMAX"]], "vecm (class in autots.models.statsmodels)": [[4, "autots.models.statsmodels.VECM"]], "vectorizedmultioutputgpr (class in autots.models.sklearn)": [[4, "autots.models.sklearn.VectorizedMultiOutputGPR"]], "windowregression (class in autots.models.sklearn)": [[4, "autots.models.sklearn.WindowRegression"]], "zeroesnaive (in module autots.models.basics)": [[4, "autots.models.basics.ZeroesNaive"]], "analyze_trend() (autots.models.cassandra.cassandra method)": [[4, "autots.models.cassandra.Cassandra.analyze_trend"]], "anomalies (autots.models.cassandra.cassandra..anomaly_detector attribute)": [[4, "autots.models.cassandra.Cassandra..anomaly_detector.anomalies"]], "apply_beta_threshold() (autots.models.basics.tvvar method)": [[4, "autots.models.basics.TVVAR.apply_beta_threshold"]], "apply_constraints() (autots.models.base.predictionobject method)": [[4, "autots.models.base.PredictionObject.apply_constraints"], [4, "id0"]], "apply_constraints() (in module autots.models.base)": [[4, "autots.models.base.apply_constraints"]], "arima_seek_the_oracle() (in module autots.models.statsmodels)": [[4, "autots.models.statsmodels.arima_seek_the_oracle"]], "auto_fit() (autots.models.cassandra.cassandra method)": [[4, "autots.models.cassandra.Cassandra.auto_fit"]], "auto_model_list() (in module autots.models.model_list)": [[4, "autots.models.model_list.auto_model_list"]], "autots.models": [[4, "module-autots.models"]], "autots.models.arch": [[4, "module-autots.models.arch"]], "autots.models.base": [[4, "module-autots.models.base"]], "autots.models.basics": [[4, "module-autots.models.basics"]], "autots.models.cassandra": [[4, "module-autots.models.cassandra"]], "autots.models.dnn": [[4, "module-autots.models.dnn"]], "autots.models.ensemble": [[4, "module-autots.models.ensemble"]], "autots.models.gluonts": [[4, "module-autots.models.gluonts"]], "autots.models.greykite": [[4, "module-autots.models.greykite"]], "autots.models.matrix_var": [[4, "module-autots.models.matrix_var"]], "autots.models.mlensemble": [[4, "module-autots.models.mlensemble"]], "autots.models.model_list": [[4, "module-autots.models.model_list"]], "autots.models.neural_forecast": [[4, "module-autots.models.neural_forecast"]], "autots.models.prophet": [[4, "module-autots.models.prophet"]], "autots.models.pytorch": [[4, "module-autots.models.pytorch"]], "autots.models.sklearn": [[4, "module-autots.models.sklearn"]], "autots.models.statsmodels": [[4, "module-autots.models.statsmodels"]], "autots.models.tfp": [[4, "module-autots.models.tfp"]], "autots.models.tide": [[4, "module-autots.models.tide"]], "base_scaler() (autots.models.basics.basiclinearmodel method)": [[4, "autots.models.basics.BasicLinearModel.base_scaler"]], "base_scaler() (autots.models.cassandra.cassandra method)": [[4, "autots.models.cassandra.Cassandra.base_scaler"]], "base_scaler() (autots.models.sklearn.multivariateregression method)": [[4, "autots.models.sklearn.MultivariateRegression.base_scaler"]], "basic_profile() (autots.models.base.modelobject method)": [[4, "autots.models.base.ModelObject.basic_profile"]], "calculate_peak_density() (in module autots.models.base)": [[4, "autots.models.base.calculate_peak_density"]], "clean_regressor() (in module autots.models.cassandra)": [[4, "autots.models.cassandra.clean_regressor"]], "coefficient_summary() (autots.models.basics.basiclinearmodel method)": [[4, "autots.models.basics.BasicLinearModel.coefficient_summary"]], "compare_actual_components() (autots.models.cassandra.cassandra method)": [[4, "autots.models.cassandra.Cassandra.compare_actual_components"]], "conj_grad_w() (in module autots.models.matrix_var)": [[4, "autots.models.matrix_var.conj_grad_w"]], "conj_grad_x() (in module autots.models.matrix_var)": [[4, "autots.models.matrix_var.conj_grad_x"]], "cost_function() (autots.models.basics.kalmanstatespace method)": [[4, "autots.models.basics.KalmanStateSpace.cost_function"]], "cost_function_dwae() (in module autots.models.cassandra)": [[4, "autots.models.cassandra.cost_function_dwae"]], "cost_function_l1() (in module autots.models.cassandra)": [[4, "autots.models.cassandra.cost_function_l1"]], "cost_function_l1_positive() (in module autots.models.cassandra)": [[4, "autots.models.cassandra.cost_function_l1_positive"]], "cost_function_l2() (in module autots.models.cassandra)": [[4, "autots.models.cassandra.cost_function_l2"]], "cost_function_quantile() (in module autots.models.cassandra)": [[4, "autots.models.cassandra.cost_function_quantile"]], "create_var_features() (autots.models.basics.tvvar method)": [[4, "autots.models.basics.TVVAR.create_VAR_features"]], "create_feature() (in module autots.models.mlensemble)": [[4, "autots.models.mlensemble.create_feature"]], "create_forecast_index() (autots.models.base.modelobject method)": [[4, "autots.models.base.ModelObject.create_forecast_index"]], "create_forecast_index() (autots.models.cassandra.cassandra method)": [[4, "autots.models.cassandra.Cassandra.create_forecast_index"]], "create_forecast_index() (in module autots.models.base)": [[4, "autots.models.base.create_forecast_index"]], "create_seaborn_palette_from_cmap() (in module autots.models.base)": [[4, "autots.models.base.create_seaborn_palette_from_cmap"]], "create_t() (autots.models.cassandra.cassandra method)": [[4, "autots.models.cassandra.Cassandra.create_t"]], "create_t() (in module autots.models.cassandra)": [[4, "autots.models.cassandra.create_t"]], "create_unpredictability_score() (in module autots.models.ensemble)": [[4, "autots.models.ensemble.create_unpredictability_score"]], "create_x() (autots.models.basics.basiclinearmodel method)": [[4, "autots.models.basics.BasicLinearModel.create_x"]], "cross_validate() (autots.models.cassandra.cassandra method)": [[4, "autots.models.cassandra.Cassandra.cross_validate"]], "dates_to_holidays() (autots.models.cassandra.cassandra.holiday_detector method)": [[4, "autots.models.cassandra.Cassandra.holiday_detector.dates_to_holidays"]], "dmd() (in module autots.models.matrix_var)": [[4, "autots.models.matrix_var.dmd"]], "dmd4cast() (in module autots.models.matrix_var)": [[4, "autots.models.matrix_var.dmd4cast"]], "dmd_forecast() (in module autots.models.matrix_var)": [[4, "autots.models.matrix_var.dmd_forecast"]], "ell_w() (in module autots.models.matrix_var)": [[4, "autots.models.matrix_var.ell_w"]], "ell_x() (in module autots.models.matrix_var)": [[4, "autots.models.matrix_var.ell_x"]], "empty_scaler() (autots.models.basics.tvvar method)": [[4, "autots.models.basics.TVVAR.empty_scaler"]], "evaluate() (autots.models.base.predictionobject method)": [[4, "autots.models.base.PredictionObject.evaluate"], [4, "id1"]], "extract_ensemble_runtimes() (autots.models.base.predictionobject method)": [[4, "autots.models.base.PredictionObject.extract_ensemble_runtimes"]], "extract_single_series_from_horz() (in module autots.models.base)": [[4, "autots.models.base.extract_single_series_from_horz"]], "extract_single_transformer() (in module autots.models.base)": [[4, "autots.models.base.extract_single_transformer"]], "feature_importance() (autots.models.cassandra.cassandra method)": [[4, "autots.models.cassandra.Cassandra.feature_importance"]], "find_pattern() (in module autots.models.ensemble)": [[4, "autots.models.ensemble.find_pattern"]], "fit() (autots.models.arch.arch method)": [[4, "autots.models.arch.ARCH.fit"]], "fit() (autots.models.basics.averagevaluenaive method)": [[4, "autots.models.basics.AverageValueNaive.fit"]], "fit() (autots.models.basics.balltreemultivariatemotif method)": [[4, "autots.models.basics.BallTreeMultivariateMotif.fit"]], "fit() (autots.models.basics.balltreeregressionmotif method)": [[4, "autots.models.basics.BallTreeRegressionMotif.fit"]], "fit() (autots.models.basics.basiclinearmodel method)": [[4, "autots.models.basics.BasicLinearModel.fit"]], "fit() (autots.models.basics.constantnaive method)": [[4, "autots.models.basics.ConstantNaive.fit"]], "fit() (autots.models.basics.fft method)": [[4, "autots.models.basics.FFT.fit"]], "fit() (autots.models.basics.kalmanstatespace method)": [[4, "autots.models.basics.KalmanStateSpace.fit"]], "fit() (autots.models.basics.lastvaluenaive method)": [[4, "autots.models.basics.LastValueNaive.fit"]], "fit() (autots.models.basics.metricmotif method)": [[4, "autots.models.basics.MetricMotif.fit"]], "fit() (autots.models.basics.motif method)": [[4, "autots.models.basics.Motif.fit"]], "fit() (autots.models.basics.motifsimulation method)": [[4, "autots.models.basics.MotifSimulation.fit"]], "fit() (autots.models.basics.nvar method)": [[4, "autots.models.basics.NVAR.fit"]], "fit() (autots.models.basics.seasonalnaive method)": [[4, "autots.models.basics.SeasonalNaive.fit"]], "fit() (autots.models.basics.seasonalitymotif method)": [[4, "autots.models.basics.SeasonalityMotif.fit"]], "fit() (autots.models.basics.sectionalmotif method)": [[4, "autots.models.basics.SectionalMotif.fit"]], "fit() (autots.models.basics.tvvar method)": [[4, "autots.models.basics.TVVAR.fit"]], "fit() (autots.models.cassandra.bayesianmultioutputregression method)": [[4, "autots.models.cassandra.BayesianMultiOutputRegression.fit"]], "fit() (autots.models.cassandra.cassandra method)": [[4, "autots.models.cassandra.Cassandra.fit"], [4, "id5"]], "fit() (autots.models.dnn.elasticnetwork method)": [[4, "autots.models.dnn.ElasticNetwork.fit"]], "fit() (autots.models.dnn.kerasrnn method)": [[4, "autots.models.dnn.KerasRNN.fit"]], "fit() (autots.models.dnn.transformer method)": [[4, "autots.models.dnn.Transformer.fit"]], "fit() (autots.models.gluonts.gluonts method)": [[4, "autots.models.gluonts.GluonTS.fit"]], "fit() (autots.models.greykite.greykite method)": [[4, "autots.models.greykite.Greykite.fit"]], "fit() (autots.models.matrix_var.dmd method)": [[4, "autots.models.matrix_var.DMD.fit"]], "fit() (autots.models.matrix_var.latc method)": [[4, "autots.models.matrix_var.LATC.fit"]], "fit() (autots.models.matrix_var.mar method)": [[4, "autots.models.matrix_var.MAR.fit"]], "fit() (autots.models.matrix_var.rrvar method)": [[4, "autots.models.matrix_var.RRVAR.fit"]], "fit() (autots.models.matrix_var.tmf method)": [[4, "autots.models.matrix_var.TMF.fit"]], "fit() (autots.models.mlensemble.mlensemble method)": [[4, "autots.models.mlensemble.MLEnsemble.fit"]], "fit() (autots.models.neural_forecast.neuralforecast method)": [[4, "autots.models.neural_forecast.NeuralForecast.fit"]], "fit() (autots.models.prophet.fbprophet method)": [[4, "autots.models.prophet.FBProphet.fit"]], "fit() (autots.models.prophet.neuralprophet method)": [[4, "autots.models.prophet.NeuralProphet.fit"]], "fit() (autots.models.pytorch.pytorchforecasting method)": [[4, "autots.models.pytorch.PytorchForecasting.fit"]], "fit() (autots.models.sklearn.componentanalysis method)": [[4, "autots.models.sklearn.ComponentAnalysis.fit"]], "fit() (autots.models.sklearn.datepartregression method)": [[4, "autots.models.sklearn.DatepartRegression.fit"]], "fit() (autots.models.sklearn.multivariateregression method)": [[4, "autots.models.sklearn.MultivariateRegression.fit"]], "fit() (autots.models.sklearn.preprocessingregression method)": [[4, "autots.models.sklearn.PreprocessingRegression.fit"]], "fit() (autots.models.sklearn.randomfourierencoding method)": [[4, "autots.models.sklearn.RandomFourierEncoding.fit"]], "fit() (autots.models.sklearn.rollingregression method)": [[4, "autots.models.sklearn.RollingRegression.fit"]], "fit() (autots.models.sklearn.univariateregression method)": [[4, "autots.models.sklearn.UnivariateRegression.fit"]], "fit() (autots.models.sklearn.vectorizedmultioutputgpr method)": [[4, "autots.models.sklearn.VectorizedMultiOutputGPR.fit"]], "fit() (autots.models.sklearn.windowregression method)": [[4, "autots.models.sklearn.WindowRegression.fit"]], "fit() (autots.models.statsmodels.ardl method)": [[4, "autots.models.statsmodels.ARDL.fit"]], "fit() (autots.models.statsmodels.arima method)": [[4, "autots.models.statsmodels.ARIMA.fit"]], "fit() (autots.models.statsmodels.dynamicfactor method)": [[4, "autots.models.statsmodels.DynamicFactor.fit"]], "fit() (autots.models.statsmodels.dynamicfactormq method)": [[4, "autots.models.statsmodels.DynamicFactorMQ.fit"]], "fit() (autots.models.statsmodels.ets method)": [[4, "autots.models.statsmodels.ETS.fit"]], "fit() (autots.models.statsmodels.glm method)": [[4, "autots.models.statsmodels.GLM.fit"]], "fit() (autots.models.statsmodels.gls method)": [[4, "autots.models.statsmodels.GLS.fit"]], "fit() (autots.models.statsmodels.theta method)": [[4, "autots.models.statsmodels.Theta.fit"]], "fit() (autots.models.statsmodels.unobservedcomponents method)": [[4, "autots.models.statsmodels.UnobservedComponents.fit"]], "fit() (autots.models.statsmodels.var method)": [[4, "autots.models.statsmodels.VAR.fit"]], "fit() (autots.models.statsmodels.varmax method)": [[4, "autots.models.statsmodels.VARMAX.fit"]], "fit() (autots.models.statsmodels.vecm method)": [[4, "autots.models.statsmodels.VECM.fit"]], "fit() (autots.models.tfp.tfpregression method)": [[4, "autots.models.tfp.TFPRegression.fit"]], "fit() (autots.models.tfp.tfpregressor method)": [[4, "autots.models.tfp.TFPRegressor.fit"]], "fit() (autots.models.tfp.tensorflowsts method)": [[4, "autots.models.tfp.TensorflowSTS.fit"]], "fit() (autots.models.tide.tide method)": [[4, "autots.models.tide.TiDE.fit"]], "fit_data() (autots.models.base.modelobject method)": [[4, "autots.models.base.ModelObject.fit_data"]], "fit_data() (autots.models.basics.kalmanstatespace method)": [[4, "autots.models.basics.KalmanStateSpace.fit_data"]], "fit_data() (autots.models.cassandra.cassandra method)": [[4, "autots.models.cassandra.Cassandra.fit_data"]], "fit_data() (autots.models.gluonts.gluonts method)": [[4, "autots.models.gluonts.GluonTS.fit_data"]], "fit_data() (autots.models.sklearn.datepartregression method)": [[4, "autots.models.sklearn.DatepartRegression.fit_data"]], "fit_data() (autots.models.sklearn.multivariateregression method)": [[4, "autots.models.sklearn.MultivariateRegression.fit_data"]], "fit_data() (autots.models.sklearn.preprocessingregression method)": [[4, "autots.models.sklearn.PreprocessingRegression.fit_data"]], "fit_data() (autots.models.sklearn.windowregression method)": [[4, "autots.models.sklearn.WindowRegression.fit_data"]], "fit_linear_model() (in module autots.models.cassandra)": [[4, "autots.models.cassandra.fit_linear_model"]], "forecast (autots.models.base.predictionobject attribute)": [[4, "autots.models.base.PredictionObject.forecast"]], "generalize_horizontal() (in module autots.models.ensemble)": [[4, "autots.models.ensemble.generalize_horizontal"]], "generate_psi() (in module autots.models.matrix_var)": [[4, "autots.models.matrix_var.generate_Psi"]], "generate_classifier_params() (in module autots.models.sklearn)": [[4, "autots.models.sklearn.generate_classifier_params"]], "generate_crosshair_score() (in module autots.models.ensemble)": [[4, "autots.models.ensemble.generate_crosshair_score"]], "generate_crosshair_score_list() (in module autots.models.ensemble)": [[4, "autots.models.ensemble.generate_crosshair_score_list"]], "generate_mosaic_template() (in module autots.models.ensemble)": [[4, "autots.models.ensemble.generate_mosaic_template"]], "generate_regressor_params() (in module autots.models.sklearn)": [[4, "autots.models.sklearn.generate_regressor_params"]], "get_holidays() (in module autots.models.tide)": [[4, "autots.models.tide.get_HOLIDAYS"]], "get_changepoints() (in module autots.models.prophet)": [[4, "autots.models.prophet.get_changepoints"]], "get_covariates() (autots.models.tide.timecovariates method)": [[4, "autots.models.tide.TimeCovariates.get_covariates"]], "get_new_params() (autots.models.arch.arch method)": [[4, "autots.models.arch.ARCH.get_new_params"]], "get_new_params() (autots.models.base.modelobject method)": [[4, "autots.models.base.ModelObject.get_new_params"]], "get_new_params() (autots.models.basics.averagevaluenaive method)": [[4, "autots.models.basics.AverageValueNaive.get_new_params"]], "get_new_params() (autots.models.basics.balltreemultivariatemotif method)": [[4, "autots.models.basics.BallTreeMultivariateMotif.get_new_params"]], "get_new_params() (autots.models.basics.balltreeregressionmotif method)": [[4, "autots.models.basics.BallTreeRegressionMotif.get_new_params"]], "get_new_params() (autots.models.basics.basiclinearmodel method)": [[4, "autots.models.basics.BasicLinearModel.get_new_params"]], "get_new_params() (autots.models.basics.constantnaive method)": [[4, "autots.models.basics.ConstantNaive.get_new_params"]], "get_new_params() (autots.models.basics.fft method)": [[4, "autots.models.basics.FFT.get_new_params"]], "get_new_params() (autots.models.basics.kalmanstatespace method)": [[4, "autots.models.basics.KalmanStateSpace.get_new_params"]], "get_new_params() (autots.models.basics.lastvaluenaive method)": [[4, "autots.models.basics.LastValueNaive.get_new_params"]], "get_new_params() (autots.models.basics.metricmotif method)": [[4, "autots.models.basics.MetricMotif.get_new_params"]], "get_new_params() (autots.models.basics.motif method)": [[4, "autots.models.basics.Motif.get_new_params"]], "get_new_params() (autots.models.basics.motifsimulation method)": [[4, "autots.models.basics.MotifSimulation.get_new_params"]], "get_new_params() (autots.models.basics.nvar method)": [[4, "autots.models.basics.NVAR.get_new_params"]], "get_new_params() (autots.models.basics.seasonalnaive method)": [[4, "autots.models.basics.SeasonalNaive.get_new_params"]], "get_new_params() (autots.models.basics.seasonalitymotif method)": [[4, "autots.models.basics.SeasonalityMotif.get_new_params"]], "get_new_params() (autots.models.basics.sectionalmotif method)": [[4, "autots.models.basics.SectionalMotif.get_new_params"]], "get_new_params() (autots.models.basics.tvvar method)": [[4, "autots.models.basics.TVVAR.get_new_params"]], "get_new_params() (autots.models.cassandra.cassandra method)": [[4, "autots.models.cassandra.Cassandra.get_new_params"], [4, "id6"]], "get_new_params() (autots.models.gluonts.gluonts method)": [[4, "autots.models.gluonts.GluonTS.get_new_params"]], "get_new_params() (autots.models.greykite.greykite method)": [[4, "autots.models.greykite.Greykite.get_new_params"]], "get_new_params() (autots.models.matrix_var.dmd method)": [[4, "autots.models.matrix_var.DMD.get_new_params"]], "get_new_params() (autots.models.matrix_var.latc method)": [[4, "autots.models.matrix_var.LATC.get_new_params"]], "get_new_params() (autots.models.matrix_var.mar method)": [[4, "autots.models.matrix_var.MAR.get_new_params"]], "get_new_params() (autots.models.matrix_var.rrvar method)": [[4, "autots.models.matrix_var.RRVAR.get_new_params"]], "get_new_params() (autots.models.matrix_var.tmf method)": [[4, "autots.models.matrix_var.TMF.get_new_params"]], "get_new_params() (autots.models.mlensemble.mlensemble method)": [[4, "autots.models.mlensemble.MLEnsemble.get_new_params"]], "get_new_params() (autots.models.neural_forecast.neuralforecast method)": [[4, "autots.models.neural_forecast.NeuralForecast.get_new_params"]], "get_new_params() (autots.models.prophet.fbprophet method)": [[4, "autots.models.prophet.FBProphet.get_new_params"]], "get_new_params() (autots.models.prophet.neuralprophet method)": [[4, "autots.models.prophet.NeuralProphet.get_new_params"]], "get_new_params() (autots.models.pytorch.pytorchforecasting method)": [[4, "autots.models.pytorch.PytorchForecasting.get_new_params"]], "get_new_params() (autots.models.sklearn.componentanalysis method)": [[4, "autots.models.sklearn.ComponentAnalysis.get_new_params"]], "get_new_params() (autots.models.sklearn.datepartregression method)": [[4, "autots.models.sklearn.DatepartRegression.get_new_params"]], "get_new_params() (autots.models.sklearn.multivariateregression method)": [[4, "autots.models.sklearn.MultivariateRegression.get_new_params"]], "get_new_params() (autots.models.sklearn.preprocessingregression method)": [[4, "autots.models.sklearn.PreprocessingRegression.get_new_params"]], "get_new_params() (autots.models.sklearn.rollingregression method)": [[4, "autots.models.sklearn.RollingRegression.get_new_params"]], "get_new_params() (autots.models.sklearn.univariateregression method)": [[4, "autots.models.sklearn.UnivariateRegression.get_new_params"]], "get_new_params() (autots.models.sklearn.windowregression method)": [[4, "autots.models.sklearn.WindowRegression.get_new_params"]], "get_new_params() (autots.models.statsmodels.ardl method)": [[4, "autots.models.statsmodels.ARDL.get_new_params"]], "get_new_params() (autots.models.statsmodels.arima method)": [[4, "autots.models.statsmodels.ARIMA.get_new_params"]], "get_new_params() (autots.models.statsmodels.dynamicfactor method)": [[4, "autots.models.statsmodels.DynamicFactor.get_new_params"]], "get_new_params() (autots.models.statsmodels.dynamicfactormq method)": [[4, "autots.models.statsmodels.DynamicFactorMQ.get_new_params"]], "get_new_params() (autots.models.statsmodels.ets method)": [[4, "autots.models.statsmodels.ETS.get_new_params"]], "get_new_params() (autots.models.statsmodels.glm method)": [[4, "autots.models.statsmodels.GLM.get_new_params"]], "get_new_params() (autots.models.statsmodels.gls method)": [[4, "autots.models.statsmodels.GLS.get_new_params"]], "get_new_params() (autots.models.statsmodels.theta method)": [[4, "autots.models.statsmodels.Theta.get_new_params"]], "get_new_params() (autots.models.statsmodels.unobservedcomponents method)": [[4, "autots.models.statsmodels.UnobservedComponents.get_new_params"]], "get_new_params() (autots.models.statsmodels.var method)": [[4, "autots.models.statsmodels.VAR.get_new_params"]], "get_new_params() (autots.models.statsmodels.varmax method)": [[4, "autots.models.statsmodels.VARMAX.get_new_params"]], "get_new_params() (autots.models.statsmodels.vecm method)": [[4, "autots.models.statsmodels.VECM.get_new_params"]], "get_new_params() (autots.models.tfp.tfpregression method)": [[4, "autots.models.tfp.TFPRegression.get_new_params"]], "get_new_params() (autots.models.tfp.tensorflowsts method)": [[4, "autots.models.tfp.TensorflowSTS.get_new_params"]], "get_new_params() (autots.models.tide.tide method)": [[4, "autots.models.tide.TiDE.get_new_params"]], "get_params() (autots.models.arch.arch method)": [[4, "autots.models.arch.ARCH.get_params"]], "get_params() (autots.models.base.modelobject method)": [[4, "autots.models.base.ModelObject.get_params"]], "get_params() (autots.models.basics.averagevaluenaive method)": [[4, "autots.models.basics.AverageValueNaive.get_params"]], "get_params() (autots.models.basics.balltreemultivariatemotif method)": [[4, "autots.models.basics.BallTreeMultivariateMotif.get_params"]], "get_params() (autots.models.basics.balltreeregressionmotif method)": [[4, "autots.models.basics.BallTreeRegressionMotif.get_params"]], "get_params() (autots.models.basics.basiclinearmodel method)": [[4, "autots.models.basics.BasicLinearModel.get_params"]], "get_params() (autots.models.basics.constantnaive method)": [[4, "autots.models.basics.ConstantNaive.get_params"]], "get_params() (autots.models.basics.fft method)": [[4, "autots.models.basics.FFT.get_params"]], "get_params() (autots.models.basics.kalmanstatespace method)": [[4, "autots.models.basics.KalmanStateSpace.get_params"]], "get_params() (autots.models.basics.lastvaluenaive method)": [[4, "autots.models.basics.LastValueNaive.get_params"]], "get_params() (autots.models.basics.metricmotif method)": [[4, "autots.models.basics.MetricMotif.get_params"]], "get_params() (autots.models.basics.motif method)": [[4, "autots.models.basics.Motif.get_params"]], "get_params() (autots.models.basics.motifsimulation method)": [[4, "autots.models.basics.MotifSimulation.get_params"]], "get_params() (autots.models.basics.nvar method)": [[4, "autots.models.basics.NVAR.get_params"]], "get_params() (autots.models.basics.seasonalnaive method)": [[4, "autots.models.basics.SeasonalNaive.get_params"]], "get_params() (autots.models.basics.seasonalitymotif method)": [[4, "autots.models.basics.SeasonalityMotif.get_params"]], "get_params() (autots.models.basics.sectionalmotif method)": [[4, "autots.models.basics.SectionalMotif.get_params"]], "get_params() (autots.models.basics.tvvar method)": [[4, "autots.models.basics.TVVAR.get_params"]], "get_params() (autots.models.cassandra.cassandra method)": [[4, "autots.models.cassandra.Cassandra.get_params"]], "get_params() (autots.models.gluonts.gluonts method)": [[4, "autots.models.gluonts.GluonTS.get_params"]], "get_params() (autots.models.greykite.greykite method)": [[4, "autots.models.greykite.Greykite.get_params"]], "get_params() (autots.models.matrix_var.dmd method)": [[4, "autots.models.matrix_var.DMD.get_params"]], "get_params() (autots.models.matrix_var.latc method)": [[4, "autots.models.matrix_var.LATC.get_params"]], "get_params() (autots.models.matrix_var.mar method)": [[4, "autots.models.matrix_var.MAR.get_params"]], "get_params() (autots.models.matrix_var.rrvar method)": [[4, "autots.models.matrix_var.RRVAR.get_params"]], "get_params() (autots.models.matrix_var.tmf method)": [[4, "autots.models.matrix_var.TMF.get_params"]], "get_params() (autots.models.mlensemble.mlensemble method)": [[4, "autots.models.mlensemble.MLEnsemble.get_params"]], "get_params() (autots.models.neural_forecast.neuralforecast method)": [[4, "autots.models.neural_forecast.NeuralForecast.get_params"]], "get_params() (autots.models.prophet.fbprophet method)": [[4, "autots.models.prophet.FBProphet.get_params"]], "get_params() (autots.models.prophet.neuralprophet method)": [[4, "autots.models.prophet.NeuralProphet.get_params"]], "get_params() (autots.models.pytorch.pytorchforecasting method)": [[4, "autots.models.pytorch.PytorchForecasting.get_params"]], "get_params() (autots.models.sklearn.componentanalysis method)": [[4, "autots.models.sklearn.ComponentAnalysis.get_params"]], "get_params() (autots.models.sklearn.datepartregression method)": [[4, "autots.models.sklearn.DatepartRegression.get_params"]], "get_params() (autots.models.sklearn.multivariateregression method)": [[4, "autots.models.sklearn.MultivariateRegression.get_params"]], "get_params() (autots.models.sklearn.preprocessingregression method)": [[4, "autots.models.sklearn.PreprocessingRegression.get_params"]], "get_params() (autots.models.sklearn.rollingregression method)": [[4, "autots.models.sklearn.RollingRegression.get_params"]], "get_params() (autots.models.sklearn.univariateregression method)": [[4, "autots.models.sklearn.UnivariateRegression.get_params"]], "get_params() (autots.models.sklearn.windowregression method)": [[4, "autots.models.sklearn.WindowRegression.get_params"]], "get_params() (autots.models.statsmodels.ardl method)": [[4, "autots.models.statsmodels.ARDL.get_params"]], "get_params() (autots.models.statsmodels.arima method)": [[4, "autots.models.statsmodels.ARIMA.get_params"]], "get_params() (autots.models.statsmodels.dynamicfactor method)": [[4, "autots.models.statsmodels.DynamicFactor.get_params"]], "get_params() (autots.models.statsmodels.dynamicfactormq method)": [[4, "autots.models.statsmodels.DynamicFactorMQ.get_params"]], "get_params() (autots.models.statsmodels.ets method)": [[4, "autots.models.statsmodels.ETS.get_params"]], "get_params() (autots.models.statsmodels.glm method)": [[4, "autots.models.statsmodels.GLM.get_params"]], "get_params() (autots.models.statsmodels.gls method)": [[4, "autots.models.statsmodels.GLS.get_params"]], "get_params() (autots.models.statsmodels.theta method)": [[4, "autots.models.statsmodels.Theta.get_params"]], "get_params() (autots.models.statsmodels.unobservedcomponents method)": [[4, "autots.models.statsmodels.UnobservedComponents.get_params"]], "get_params() (autots.models.statsmodels.var method)": [[4, "autots.models.statsmodels.VAR.get_params"]], "get_params() (autots.models.statsmodels.varmax method)": [[4, "autots.models.statsmodels.VARMAX.get_params"]], "get_params() (autots.models.statsmodels.vecm method)": [[4, "autots.models.statsmodels.VECM.get_params"]], "get_params() (autots.models.tfp.tfpregression method)": [[4, "autots.models.tfp.TFPRegression.get_params"]], "get_params() (autots.models.tfp.tensorflowsts method)": [[4, "autots.models.tfp.TensorflowSTS.get_params"]], "get_params() (autots.models.tide.tide method)": [[4, "autots.models.tide.TiDE.get_params"]], "glm_forecast_by_column() (in module autots.models.statsmodels)": [[4, "autots.models.statsmodels.glm_forecast_by_column"]], "holiday_count (autots.models.cassandra.cassandra. attribute)": [[4, "autots.models.cassandra.Cassandra..holiday_count"]], "holidays (autots.models.cassandra.cassandra. attribute)": [[4, "autots.models.cassandra.Cassandra..holidays"]], "horizontal_classifier() (in module autots.models.ensemble)": [[4, "autots.models.ensemble.horizontal_classifier"]], "horizontal_xy() (in module autots.models.ensemble)": [[4, "autots.models.ensemble.horizontal_xy"]], "is_horizontal() (in module autots.models.ensemble)": [[4, "autots.models.ensemble.is_horizontal"]], "is_mosaic() (in module autots.models.ensemble)": [[4, "autots.models.ensemble.is_mosaic"]], "latc_imputer() (in module autots.models.matrix_var)": [[4, "autots.models.matrix_var.latc_imputer"]], "latc_predictor() (in module autots.models.matrix_var)": [[4, "autots.models.matrix_var.latc_predictor"]], "long_form_results() (autots.models.base.predictionobject method)": [[4, "autots.models.base.PredictionObject.long_form_results"], [4, "id2"]], "looped_motif() (in module autots.models.basics)": [[4, "autots.models.basics.looped_motif"]], "lower_forecast (autots.models.base.predictionobject attribute)": [[4, "autots.models.base.PredictionObject.lower_forecast"]], "lstsq_minimize() (in module autots.models.cassandra)": [[4, "autots.models.cassandra.lstsq_minimize"]], "lstsq_solve() (in module autots.models.cassandra)": [[4, "autots.models.cassandra.lstsq_solve"]], "mae_loss() (in module autots.models.tide)": [[4, "autots.models.tide.mae_loss"]], "mape() (in module autots.models.tide)": [[4, "autots.models.tide.mape"]], "mar() (in module autots.models.matrix_var)": [[4, "autots.models.matrix_var.mar"]], "mat2ten() (in module autots.models.matrix_var)": [[4, "autots.models.matrix_var.mat2ten"]], "mlens_helper() (in module autots.models.ensemble)": [[4, "autots.models.ensemble.mlens_helper"]], "model_list_to_dict() (in module autots.models.model_list)": [[4, "autots.models.model_list.model_list_to_dict"]], "model_name (autots.models.base.predictionobject attribute)": [[4, "autots.models.base.PredictionObject.model_name"]], "model_parameters (autots.models.base.predictionobject attribute)": [[4, "autots.models.base.PredictionObject.model_parameters"]], "mosaic_classifier() (in module autots.models.ensemble)": [[4, "autots.models.ensemble.mosaic_classifier"]], "mosaic_or_horizontal() (in module autots.models.ensemble)": [[4, "autots.models.ensemble.mosaic_or_horizontal"]], "mosaic_to_horizontal() (in module autots.models.ensemble)": [[4, "autots.models.ensemble.mosaic_to_horizontal"]], "mosaic_xy() (in module autots.models.ensemble)": [[4, "autots.models.ensemble.mosaic_xy"]], "n_limited_horz() (in module autots.models.ensemble)": [[4, "autots.models.ensemble.n_limited_horz"]], "next_fit() (autots.models.cassandra.cassandra method)": [[4, "autots.models.cassandra.Cassandra.next_fit"]], "nrmse() (in module autots.models.tide)": [[4, "autots.models.tide.nrmse"]], "params (autots.models.cassandra.cassandra. attribute)": [[4, "autots.models.cassandra.Cassandra..params"]], "parse_forecast_length() (in module autots.models.ensemble)": [[4, "autots.models.ensemble.parse_forecast_length"]], "parse_horizontal() (in module autots.models.ensemble)": [[4, "autots.models.ensemble.parse_horizontal"]], "parse_mosaic() (in module autots.models.ensemble)": [[4, "autots.models.ensemble.parse_mosaic"]], "plot() (autots.models.base.predictionobject method)": [[4, "autots.models.base.PredictionObject.plot"], [4, "id3"]], "plot_components() (autots.models.cassandra.cassandra method)": [[4, "autots.models.cassandra.Cassandra.plot_components"], [4, "id7"]], "plot_df() (autots.models.base.predictionobject method)": [[4, "autots.models.base.PredictionObject.plot_df"]], "plot_distributions() (in module autots.models.base)": [[4, "autots.models.base.plot_distributions"]], "plot_ensemble_runtimes() (autots.models.base.predictionobject method)": [[4, "autots.models.base.PredictionObject.plot_ensemble_runtimes"]], "plot_forecast() (autots.models.cassandra.cassandra method)": [[4, "autots.models.cassandra.Cassandra.plot_forecast"], [4, "id8"]], "plot_grid() (autots.models.base.predictionobject method)": [[4, "autots.models.base.PredictionObject.plot_grid"]], "plot_things() (autots.models.cassandra.cassandra method)": [[4, "autots.models.cassandra.Cassandra.plot_things"]], "plot_trend() (autots.models.cassandra.cassandra method)": [[4, "autots.models.cassandra.Cassandra.plot_trend"], [4, "id9"]], "predict() (autots.models.arch.arch method)": [[4, "autots.models.arch.ARCH.predict"]], "predict() (autots.models.basics.averagevaluenaive method)": [[4, "autots.models.basics.AverageValueNaive.predict"]], "predict() (autots.models.basics.balltreemultivariatemotif method)": [[4, "autots.models.basics.BallTreeMultivariateMotif.predict"]], "predict() (autots.models.basics.balltreeregressionmotif method)": [[4, "autots.models.basics.BallTreeRegressionMotif.predict"]], "predict() (autots.models.basics.basiclinearmodel method)": [[4, "autots.models.basics.BasicLinearModel.predict"]], "predict() (autots.models.basics.constantnaive method)": [[4, "autots.models.basics.ConstantNaive.predict"]], "predict() (autots.models.basics.fft method)": [[4, "autots.models.basics.FFT.predict"]], "predict() (autots.models.basics.kalmanstatespace method)": [[4, "autots.models.basics.KalmanStateSpace.predict"]], "predict() (autots.models.basics.lastvaluenaive method)": [[4, "autots.models.basics.LastValueNaive.predict"]], "predict() (autots.models.basics.metricmotif method)": [[4, "autots.models.basics.MetricMotif.predict"]], "predict() (autots.models.basics.motif method)": [[4, "autots.models.basics.Motif.predict"]], "predict() (autots.models.basics.motifsimulation method)": [[4, "autots.models.basics.MotifSimulation.predict"]], "predict() (autots.models.basics.nvar method)": [[4, "autots.models.basics.NVAR.predict"]], "predict() (autots.models.basics.seasonalnaive method)": [[4, "autots.models.basics.SeasonalNaive.predict"]], "predict() (autots.models.basics.seasonalitymotif method)": [[4, "autots.models.basics.SeasonalityMotif.predict"]], "predict() (autots.models.basics.sectionalmotif method)": [[4, "autots.models.basics.SectionalMotif.predict"]], "predict() (autots.models.basics.tvvar method)": [[4, "autots.models.basics.TVVAR.predict"]], "predict() (autots.models.cassandra.bayesianmultioutputregression method)": [[4, "autots.models.cassandra.BayesianMultiOutputRegression.predict"]], "predict() (autots.models.cassandra.cassandra method)": [[4, "autots.models.cassandra.Cassandra.predict"], [4, "id10"]], "predict() (autots.models.dnn.elasticnetwork method)": [[4, "autots.models.dnn.ElasticNetwork.predict"]], "predict() (autots.models.dnn.kerasrnn method)": [[4, "autots.models.dnn.KerasRNN.predict"]], "predict() (autots.models.dnn.transformer method)": [[4, "autots.models.dnn.Transformer.predict"]], "predict() (autots.models.gluonts.gluonts method)": [[4, "autots.models.gluonts.GluonTS.predict"]], "predict() (autots.models.greykite.greykite method)": [[4, "autots.models.greykite.Greykite.predict"]], "predict() (autots.models.matrix_var.dmd method)": [[4, "autots.models.matrix_var.DMD.predict"]], "predict() (autots.models.matrix_var.latc method)": [[4, "autots.models.matrix_var.LATC.predict"]], "predict() (autots.models.matrix_var.mar method)": [[4, "autots.models.matrix_var.MAR.predict"]], "predict() (autots.models.matrix_var.rrvar method)": [[4, "autots.models.matrix_var.RRVAR.predict"]], "predict() (autots.models.matrix_var.tmf method)": [[4, "autots.models.matrix_var.TMF.predict"]], "predict() (autots.models.mlensemble.mlensemble method)": [[4, "autots.models.mlensemble.MLEnsemble.predict"]], "predict() (autots.models.neural_forecast.neuralforecast method)": [[4, "autots.models.neural_forecast.NeuralForecast.predict"]], "predict() (autots.models.prophet.fbprophet method)": [[4, "autots.models.prophet.FBProphet.predict"]], "predict() (autots.models.prophet.neuralprophet method)": [[4, "autots.models.prophet.NeuralProphet.predict"]], "predict() (autots.models.pytorch.pytorchforecasting method)": [[4, "autots.models.pytorch.PytorchForecasting.predict"]], "predict() (autots.models.sklearn.componentanalysis method)": [[4, "autots.models.sklearn.ComponentAnalysis.predict"]], "predict() (autots.models.sklearn.datepartregression method)": [[4, "autots.models.sklearn.DatepartRegression.predict"]], "predict() (autots.models.sklearn.multivariateregression method)": [[4, "autots.models.sklearn.MultivariateRegression.predict"]], "predict() (autots.models.sklearn.preprocessingregression method)": [[4, "autots.models.sklearn.PreprocessingRegression.predict"]], "predict() (autots.models.sklearn.rollingregression method)": [[4, "autots.models.sklearn.RollingRegression.predict"]], "predict() (autots.models.sklearn.univariateregression method)": [[4, "autots.models.sklearn.UnivariateRegression.predict"]], "predict() (autots.models.sklearn.vectorizedmultioutputgpr method)": [[4, "autots.models.sklearn.VectorizedMultiOutputGPR.predict"]], "predict() (autots.models.sklearn.windowregression method)": [[4, "autots.models.sklearn.WindowRegression.predict"]], "predict() (autots.models.statsmodels.ardl method)": [[4, "autots.models.statsmodels.ARDL.predict"]], "predict() (autots.models.statsmodels.arima method)": [[4, "autots.models.statsmodels.ARIMA.predict"]], "predict() (autots.models.statsmodels.dynamicfactor method)": [[4, "autots.models.statsmodels.DynamicFactor.predict"]], "predict() (autots.models.statsmodels.dynamicfactormq method)": [[4, "autots.models.statsmodels.DynamicFactorMQ.predict"]], "predict() (autots.models.statsmodels.ets method)": [[4, "autots.models.statsmodels.ETS.predict"]], "predict() (autots.models.statsmodels.glm method)": [[4, "autots.models.statsmodels.GLM.predict"]], "predict() (autots.models.statsmodels.gls method)": [[4, "autots.models.statsmodels.GLS.predict"]], "predict() (autots.models.statsmodels.theta method)": [[4, "autots.models.statsmodels.Theta.predict"]], "predict() (autots.models.statsmodels.unobservedcomponents method)": [[4, "autots.models.statsmodels.UnobservedComponents.predict"]], "predict() (autots.models.statsmodels.var method)": [[4, "autots.models.statsmodels.VAR.predict"]], "predict() (autots.models.statsmodels.varmax method)": [[4, "autots.models.statsmodels.VARMAX.predict"]], "predict() (autots.models.statsmodels.vecm method)": [[4, "autots.models.statsmodels.VECM.predict"]], "predict() (autots.models.tfp.tfpregression method)": [[4, "autots.models.tfp.TFPRegression.predict"]], "predict() (autots.models.tfp.tfpregressor method)": [[4, "autots.models.tfp.TFPRegressor.predict"]], "predict() (autots.models.tfp.tensorflowsts method)": [[4, "autots.models.tfp.TensorflowSTS.predict"]], "predict() (autots.models.tide.tide method)": [[4, "autots.models.tide.TiDE.predict"]], "predict_new_product() (autots.models.cassandra.cassandra method)": [[4, "autots.models.cassandra.Cassandra.predict_new_product"]], "predict_proba() (autots.models.sklearn.vectorizedmultioutputgpr method)": [[4, "autots.models.sklearn.VectorizedMultiOutputGPR.predict_proba"]], "predict_reservoir() (in module autots.models.basics)": [[4, "autots.models.basics.predict_reservoir"]], "predict_x_array (autots.models.cassandra.cassandra. attribute)": [[4, "autots.models.cassandra.Cassandra..predict_x_array"]], "predicted_trend (autots.models.cassandra.cassandra. attribute)": [[4, "autots.models.cassandra.Cassandra..predicted_trend"]], "process_components() (autots.models.basics.basiclinearmodel method)": [[4, "autots.models.basics.BasicLinearModel.process_components"]], "process_components() (autots.models.basics.tvvar method)": [[4, "autots.models.basics.TVVAR.process_components"]], "process_components() (autots.models.cassandra.cassandra method)": [[4, "autots.models.cassandra.Cassandra.process_components"]], "process_mosaic_arrays() (in module autots.models.ensemble)": [[4, "autots.models.ensemble.process_mosaic_arrays"]], "retrieve_classifier() (in module autots.models.sklearn)": [[4, "autots.models.sklearn.retrieve_classifier"]], "retrieve_regressor() (in module autots.models.sklearn)": [[4, "autots.models.sklearn.retrieve_regressor"]], "return_components() (autots.models.basics.basiclinearmodel method)": [[4, "autots.models.basics.BasicLinearModel.return_components"]], "return_components() (autots.models.cassandra.cassandra method)": [[4, "autots.models.cassandra.Cassandra.return_components"], [4, "id11"]], "rmse() (in module autots.models.tide)": [[4, "autots.models.tide.rmse"]], "rolling_trend() (autots.models.cassandra.cassandra method)": [[4, "autots.models.cassandra.Cassandra.rolling_trend"]], "rolling_x_regressor() (in module autots.models.sklearn)": [[4, "autots.models.sklearn.rolling_x_regressor"]], "rolling_x_regressor_regressor() (in module autots.models.sklearn)": [[4, "autots.models.sklearn.rolling_x_regressor_regressor"]], "rrvar() (in module autots.models.matrix_var)": [[4, "autots.models.matrix_var.rrvar"]], "sample_posterior() (autots.models.cassandra.bayesianmultioutputregression method)": [[4, "autots.models.cassandra.BayesianMultiOutputRegression.sample_posterior"]], "scale_data() (autots.models.basics.basiclinearmodel method)": [[4, "autots.models.basics.BasicLinearModel.scale_data"]], "scale_data() (autots.models.cassandra.cassandra method)": [[4, "autots.models.cassandra.Cassandra.scale_data"]], "scale_data() (autots.models.sklearn.multivariateregression method)": [[4, "autots.models.sklearn.MultivariateRegression.scale_data"]], "scores (autots.models.cassandra.cassandra..anomaly_detector attribute)": [[4, "autots.models.cassandra.Cassandra..anomaly_detector.scores"]], "seek_the_oracle() (in module autots.models.greykite)": [[4, "autots.models.greykite.seek_the_oracle"]], "smape() (in module autots.models.tide)": [[4, "autots.models.tide.smape"]], "svt_tnn() (in module autots.models.matrix_var)": [[4, "autots.models.matrix_var.svt_tnn"]], "ten2mat() (in module autots.models.matrix_var)": [[4, "autots.models.matrix_var.ten2mat"]], "test_val_gen() (autots.models.tide.timeseriesdata method)": [[4, "autots.models.tide.TimeSeriesdata.test_val_gen"]], "tf_dataset() (autots.models.tide.timeseriesdata method)": [[4, "autots.models.tide.TimeSeriesdata.tf_dataset"]], "time() (autots.models.base.modelobject static method)": [[4, "autots.models.base.ModelObject.time"]], "tmf() (in module autots.models.matrix_var)": [[4, "autots.models.matrix_var.tmf"]], "to_origin_space() (autots.models.basics.basiclinearmodel method)": [[4, "autots.models.basics.BasicLinearModel.to_origin_space"]], "to_origin_space() (autots.models.cassandra.cassandra method)": [[4, "autots.models.cassandra.Cassandra.to_origin_space"]], "to_origin_space() (autots.models.sklearn.multivariateregression method)": [[4, "autots.models.sklearn.MultivariateRegression.to_origin_space"]], "total_runtime() (autots.models.base.predictionobject method)": [[4, "autots.models.base.PredictionObject.total_runtime"], [4, "id4"]], "train_gen() (autots.models.tide.timeseriesdata method)": [[4, "autots.models.tide.TimeSeriesdata.train_gen"]], "transform() (autots.models.sklearn.randomfourierencoding method)": [[4, "autots.models.sklearn.RandomFourierEncoding.transform"]], "transformation_parameters (autots.models.base.predictionobject attribute)": [[4, "autots.models.base.PredictionObject.transformation_parameters"]], "transformer_build_model() (in module autots.models.dnn)": [[4, "autots.models.dnn.transformer_build_model"]], "transformer_encoder() (in module autots.models.dnn)": [[4, "autots.models.dnn.transformer_encoder"]], "treatment_causal_impact() (autots.models.cassandra.cassandra method)": [[4, "autots.models.cassandra.Cassandra.treatment_causal_impact"]], "trend_analysis() (autots.models.cassandra.cassandra method)": [[4, "autots.models.cassandra.Cassandra.trend_analysis"]], "trend_train (autots.models.cassandra.cassandra. attribute)": [[4, "autots.models.cassandra.Cassandra..trend_train"]], "tune_observational_noise() (autots.models.basics.kalmanstatespace method)": [[4, "autots.models.basics.KalmanStateSpace.tune_observational_noise"]], "update_cg() (in module autots.models.matrix_var)": [[4, "autots.models.matrix_var.update_cg"]], "upper_forecast (autots.models.base.predictionobject attribute)": [[4, "autots.models.base.PredictionObject.upper_forecast"]], "var() (in module autots.models.matrix_var)": [[4, "autots.models.matrix_var.var"]], "var4cast() (in module autots.models.matrix_var)": [[4, "autots.models.matrix_var.var4cast"]], "wape() (in module autots.models.tide)": [[4, "autots.models.tide.wape"]], "x_array (autots.models.cassandra.cassandra. attribute)": [[4, "autots.models.cassandra.Cassandra..x_array"]], "autots.templates": [[5, "module-autots.templates"]], "autots.templates.general": [[5, "module-autots.templates.general"]], "general_template (in module autots.templates.general)": [[5, "autots.templates.general.general_template"]], "alignlastdiff (class in autots.tools.transform)": [[6, "autots.tools.transform.AlignLastDiff"]], "alignlastvalue (class in autots.tools.transform)": [[6, "autots.tools.transform.AlignLastValue"]], "anomalyremoval (class in autots.tools.transform)": [[6, "autots.tools.transform.AnomalyRemoval"]], "bkbandpassfilter (class in autots.tools.transform)": [[6, "autots.tools.transform.BKBandpassFilter"]], "btcd (class in autots.tools.transform)": [[6, "autots.tools.transform.BTCD"]], "centerlastvalue (class in autots.tools.transform)": [[6, "autots.tools.transform.CenterLastValue"]], "centersplit (class in autots.tools.transform)": [[6, "autots.tools.transform.CenterSplit"]], "changepointdetrend (class in autots.tools.transform)": [[6, "autots.tools.transform.ChangepointDetrend"]], "clipoutliers (class in autots.tools.transform)": [[6, "autots.tools.transform.ClipOutliers"]], "cointegration (class in autots.tools.transform)": [[6, "autots.tools.transform.Cointegration"]], "constraint (class in autots.tools.transform)": [[6, "autots.tools.transform.Constraint"]], "cumsumtransformer (class in autots.tools.transform)": [[6, "autots.tools.transform.CumSumTransformer"]], "datepartregression (in module autots.tools.transform)": [[6, "autots.tools.transform.DatepartRegression"]], "datepartregressiontransformer (class in autots.tools.transform)": [[6, "autots.tools.transform.DatepartRegressionTransformer"]], "detrend (class in autots.tools.transform)": [[6, "autots.tools.transform.Detrend"]], "diffsmoother (class in autots.tools.transform)": [[6, "autots.tools.transform.DiffSmoother"]], "differencedtransformer (class in autots.tools.transform)": [[6, "autots.tools.transform.DifferencedTransformer"]], "discretize (class in autots.tools.transform)": [[6, "autots.tools.transform.Discretize"]], "ewmafilter (class in autots.tools.transform)": [[6, "autots.tools.transform.EWMAFilter"]], "emptytransformer (class in autots.tools.transform)": [[6, "autots.tools.transform.EmptyTransformer"]], "fft (class in autots.tools.fft)": [[6, "autots.tools.fft.FFT"]], "fftdecomposition (class in autots.tools.transform)": [[6, "autots.tools.transform.FFTDecomposition"]], "fftfilter (class in autots.tools.transform)": [[6, "autots.tools.transform.FFTFilter"]], "firfilter (class in autots.tools.transform)": [[6, "autots.tools.transform.FIRFilter"]], "fastica (class in autots.tools.transform)": [[6, "autots.tools.transform.FastICA"]], "fillna() (in module autots.tools.impute)": [[6, "autots.tools.impute.FillNA"]], "gaussian (class in autots.tools.fast_kalman)": [[6, "autots.tools.fast_kalman.Gaussian"]], "generaltransformer (class in autots.tools.transform)": [[6, "autots.tools.transform.GeneralTransformer"]], "hpfilter (class in autots.tools.transform)": [[6, "autots.tools.transform.HPFilter"]], "historicvalues (class in autots.tools.transform)": [[6, "autots.tools.transform.HistoricValues"]], "holidaytransformer (class in autots.tools.transform)": [[6, "autots.tools.transform.HolidayTransformer"]], "intermittentoccurrence (class in autots.tools.transform)": [[6, "autots.tools.transform.IntermittentOccurrence"]], "kalmanfilter (class in autots.tools.fast_kalman)": [[6, "autots.tools.fast_kalman.KalmanFilter"]], "kalmanfilter.result (class in autots.tools.fast_kalman)": [[6, "autots.tools.fast_kalman.KalmanFilter.Result"]], "kalmansmoothing (class in autots.tools.transform)": [[6, "autots.tools.transform.KalmanSmoothing"]], "levelshiftmagic (class in autots.tools.transform)": [[6, "autots.tools.transform.LevelShiftMagic"]], "levelshifttransformer (in module autots.tools.transform)": [[6, "autots.tools.transform.LevelShiftTransformer"]], "locallineartrend (class in autots.tools.transform)": [[6, "autots.tools.transform.LocalLinearTrend"]], "meandifference (class in autots.tools.transform)": [[6, "autots.tools.transform.MeanDifference"]], "meanpercentsplitter (class in autots.tools.transform)": [[6, "autots.tools.transform.MeanPercentSplitter"]], "nonparametricthreshold (class in autots.tools.thresholding)": [[6, "autots.tools.thresholding.NonparametricThreshold"]], "numerictransformer (class in autots.tools.shaping)": [[6, "autots.tools.shaping.NumericTransformer"]], "pca (class in autots.tools.transform)": [[6, "autots.tools.transform.PCA"]], "pctchangetransformer (class in autots.tools.transform)": [[6, "autots.tools.transform.PctChangeTransformer"]], "point_to_probability() (in module autots.tools.probabilistic)": [[6, "autots.tools.probabilistic.Point_to_Probability"]], "positiveshift (class in autots.tools.transform)": [[6, "autots.tools.transform.PositiveShift"]], "randomtransform() (in module autots.tools.transform)": [[6, "autots.tools.transform.RandomTransform"]], "regressionfilter (class in autots.tools.transform)": [[6, "autots.tools.transform.RegressionFilter"]], "replaceconstant (class in autots.tools.transform)": [[6, "autots.tools.transform.ReplaceConstant"]], "rollingmeantransformer (class in autots.tools.transform)": [[6, "autots.tools.transform.RollingMeanTransformer"]], "round (class in autots.tools.transform)": [[6, "autots.tools.transform.Round"]], "stlfilter (class in autots.tools.transform)": [[6, "autots.tools.transform.STLFilter"]], "scipyfilter (class in autots.tools.transform)": [[6, "autots.tools.transform.ScipyFilter"]], "seasonaldifference (class in autots.tools.transform)": [[6, "autots.tools.transform.SeasonalDifference"]], "seasonalitymotifimputer (class in autots.tools.impute)": [[6, "autots.tools.impute.SeasonalityMotifImputer"]], "shiftfirstvalue (class in autots.tools.transform)": [[6, "autots.tools.transform.ShiftFirstValue"]], "simpleseasonalitymotifimputer (class in autots.tools.impute)": [[6, "autots.tools.impute.SimpleSeasonalityMotifImputer"]], "sintrend (class in autots.tools.transform)": [[6, "autots.tools.transform.SinTrend"]], "slice (class in autots.tools.transform)": [[6, "autots.tools.transform.Slice"]], "standardscaler (class in autots.tools.transform)": [[6, "autots.tools.transform.StandardScaler"]], "statsmodelsfilter (class in autots.tools.transform)": [[6, "autots.tools.transform.StatsmodelsFilter"]], "thetatransformer (class in autots.tools.transform)": [[6, "autots.tools.transform.ThetaTransformer"]], "variable_point_to_probability() (in module autots.tools.probabilistic)": [[6, "autots.tools.probabilistic.Variable_Point_to_Probability"]], "anomaly_df_to_holidays() (in module autots.tools.anomaly_utils)": [[6, "autots.tools.anomaly_utils.anomaly_df_to_holidays"]], "anomaly_new_params() (in module autots.tools.anomaly_utils)": [[6, "autots.tools.anomaly_utils.anomaly_new_params"]], "apply_constraint_single() (in module autots.tools.constraint)": [[6, "autots.tools.constraint.apply_constraint_single"]], "apply_fir_filter_time_domain() (in module autots.tools.fir_filter)": [[6, "autots.tools.fir_filter.apply_fir_filter_time_domain"]], "apply_fir_filter_to_timeseries() (in module autots.tools.fir_filter)": [[6, "autots.tools.fir_filter.apply_fir_filter_to_timeseries"]], "apply_fit_constraint() (in module autots.tools.constraint)": [[6, "autots.tools.constraint.apply_fit_constraint"]], "autoshape() (in module autots.tools.fast_kalman)": [[6, "autots.tools.fast_kalman.autoshape"]], "autots.tools": [[6, "module-autots.tools"]], "autots.tools.anomaly_utils": [[6, "module-autots.tools.anomaly_utils"]], "autots.tools.calendar": [[6, "module-autots.tools.calendar"]], "autots.tools.cointegration": [[6, "module-autots.tools.cointegration"]], "autots.tools.constraint": [[6, "module-autots.tools.constraint"]], "autots.tools.cpu_count": [[6, "module-autots.tools.cpu_count"]], "autots.tools.fast_kalman": [[6, "module-autots.tools.fast_kalman"]], "autots.tools.fft": [[6, "module-autots.tools.fft"]], "autots.tools.fir_filter": [[6, "module-autots.tools.fir_filter"]], "autots.tools.hierarchial": [[6, "module-autots.tools.hierarchial"]], "autots.tools.holiday": [[6, "module-autots.tools.holiday"]], "autots.tools.impute": [[6, "module-autots.tools.impute"]], "autots.tools.lunar": [[6, "module-autots.tools.lunar"]], "autots.tools.percentile": [[6, "module-autots.tools.percentile"]], "autots.tools.probabilistic": [[6, "module-autots.tools.probabilistic"]], "autots.tools.profile": [[6, "module-autots.tools.profile"]], "autots.tools.regressor": [[6, "module-autots.tools.regressor"]], "autots.tools.seasonal": [[6, "module-autots.tools.seasonal"]], "autots.tools.shaping": [[6, "module-autots.tools.shaping"]], "autots.tools.thresholding": [[6, "module-autots.tools.thresholding"]], "autots.tools.transform": [[6, "module-autots.tools.transform"]], "autots.tools.wavelet": [[6, "module-autots.tools.wavelet"]], "autots.tools.window_functions": [[6, "module-autots.tools.window_functions"]], "biased_ffill() (in module autots.tools.impute)": [[6, "autots.tools.impute.biased_ffill"]], "bkfilter() (autots.tools.transform.statsmodelsfilter method)": [[6, "autots.tools.transform.StatsmodelsFilter.bkfilter"]], "bkfilter_st() (in module autots.tools.transform)": [[6, "autots.tools.transform.bkfilter_st"]], "btcd_decompose() (in module autots.tools.cointegration)": [[6, "autots.tools.cointegration.btcd_decompose"]], "cffilter() (autots.tools.transform.statsmodelsfilter method)": [[6, "autots.tools.transform.StatsmodelsFilter.cffilter"]], "changepoint_fcst_from_last_row() (in module autots.tools.seasonal)": [[6, "autots.tools.seasonal.changepoint_fcst_from_last_row"]], "chunk_reshape() (in module autots.tools.window_functions)": [[6, "autots.tools.window_functions.chunk_reshape"]], "clean_weights() (in module autots.tools.shaping)": [[6, "autots.tools.shaping.clean_weights"]], "clip_outliers() (in module autots.tools.transform)": [[6, "autots.tools.transform.clip_outliers"]], "coint_johansen() (in module autots.tools.cointegration)": [[6, "autots.tools.cointegration.coint_johansen"]], "compare_to_epsilon() (autots.tools.thresholding.nonparametricthreshold method)": [[6, "autots.tools.thresholding.NonparametricThreshold.compare_to_epsilon"]], "compute() (autots.tools.fast_kalman.kalmanfilter method)": [[6, "autots.tools.fast_kalman.KalmanFilter.compute"]], "consecutive_groups() (in module autots.tools.thresholding)": [[6, "autots.tools.thresholding.consecutive_groups"]], "constant_growth_rate() (in module autots.tools.constraint)": [[6, "autots.tools.constraint.constant_growth_rate"]], "constraint_new_params() (in module autots.tools.constraint)": [[6, "autots.tools.constraint.constraint_new_params"]], "continuous_db2_wavelet() (in module autots.tools.wavelet)": [[6, "autots.tools.wavelet.continuous_db2_wavelet"]], "convolution_filter() (autots.tools.transform.statsmodelsfilter method)": [[6, "autots.tools.transform.StatsmodelsFilter.convolution_filter"]], "cpu_count() (in module autots.tools.cpu_count)": [[6, "autots.tools.cpu_count.cpu_count"]], "create_changepoint_features() (in module autots.tools.seasonal)": [[6, "autots.tools.seasonal.create_changepoint_features"]], "create_datepart_components() (in module autots.tools.seasonal)": [[6, "autots.tools.seasonal.create_datepart_components"]], "create_dates_df() (in module autots.tools.anomaly_utils)": [[6, "autots.tools.anomaly_utils.create_dates_df"]], "create_daubechies_db2_wavelet() (in module autots.tools.wavelet)": [[6, "autots.tools.wavelet.create_daubechies_db2_wavelet"]], "create_gaussian_wavelet() (in module autots.tools.wavelet)": [[6, "autots.tools.wavelet.create_gaussian_wavelet"]], "create_haar_wavelet() (in module autots.tools.wavelet)": [[6, "autots.tools.wavelet.create_haar_wavelet"]], "create_lagged_regressor() (in module autots.tools.regressor)": [[6, "autots.tools.regressor.create_lagged_regressor"]], "create_mexican_hat_wavelet() (in module autots.tools.wavelet)": [[6, "autots.tools.wavelet.create_mexican_hat_wavelet"]], "create_morlet_wavelet() (in module autots.tools.wavelet)": [[6, "autots.tools.wavelet.create_morlet_wavelet"]], "create_narrowing_wavelets() (in module autots.tools.wavelet)": [[6, "autots.tools.wavelet.create_narrowing_wavelets"]], "create_real_morlet_wavelet() (in module autots.tools.wavelet)": [[6, "autots.tools.wavelet.create_real_morlet_wavelet"]], "create_regressor() (in module autots.tools.regressor)": [[6, "autots.tools.regressor.create_regressor"]], "create_seasonality_feature() (in module autots.tools.seasonal)": [[6, "autots.tools.seasonal.create_seasonality_feature"]], "create_wavelet() (in module autots.tools.wavelet)": [[6, "autots.tools.wavelet.create_wavelet"]], "data_profile() (in module autots.tools.profile)": [[6, "autots.tools.profile.data_profile"]], "date_part() (in module autots.tools.seasonal)": [[6, "autots.tools.seasonal.date_part"]], "dates_to_holidays() (autots.tools.transform.holidaytransformer method)": [[6, "autots.tools.transform.HolidayTransformer.dates_to_holidays"]], "dates_to_holidays() (in module autots.tools.anomaly_utils)": [[6, "autots.tools.anomaly_utils.dates_to_holidays"]], "dcos() (in module autots.tools.lunar)": [[6, "autots.tools.lunar.dcos"]], "ddot() (in module autots.tools.fast_kalman)": [[6, "autots.tools.fast_kalman.ddot"]], "ddot_t_right() (in module autots.tools.fast_kalman)": [[6, "autots.tools.fast_kalman.ddot_t_right"]], "ddot_t_right_old() (in module autots.tools.fast_kalman)": [[6, "autots.tools.fast_kalman.ddot_t_right_old"]], "detect_anomalies() (in module autots.tools.anomaly_utils)": [[6, "autots.tools.anomaly_utils.detect_anomalies"]], "df_cleanup() (in module autots.tools.shaping)": [[6, "autots.tools.shaping.df_cleanup"]], "dinv() (in module autots.tools.fast_kalman)": [[6, "autots.tools.fast_kalman.dinv"]], "douter() (in module autots.tools.fast_kalman)": [[6, "autots.tools.fast_kalman.douter"]], "dsin() (in module autots.tools.lunar)": [[6, "autots.tools.lunar.dsin"]], "em() (autots.tools.fast_kalman.kalmanfilter method)": [[6, "autots.tools.fast_kalman.KalmanFilter.em"]], "em_initial_state() (in module autots.tools.fast_kalman)": [[6, "autots.tools.fast_kalman.em_initial_state"]], "em_observation_noise() (autots.tools.fast_kalman.kalmanfilter method)": [[6, "autots.tools.fast_kalman.KalmanFilter.em_observation_noise"]], "em_process_noise() (autots.tools.fast_kalman.kalmanfilter method)": [[6, "autots.tools.fast_kalman.KalmanFilter.em_process_noise"]], "empty() (autots.tools.fast_kalman.gaussian static method)": [[6, "autots.tools.fast_kalman.Gaussian.empty"]], "ensure_matrix() (in module autots.tools.fast_kalman)": [[6, "autots.tools.fast_kalman.ensure_matrix"]], "ensure_stability() (in module autots.tools.fast_kalman)": [[6, "autots.tools.fast_kalman.ensure_stability"]], "exponential_decay() (in module autots.tools.transform)": [[6, "autots.tools.transform.exponential_decay"]], "fake_date_fill() (in module autots.tools.impute)": [[6, "autots.tools.impute.fake_date_fill"]], "fake_date_fill_old() (in module autots.tools.impute)": [[6, "autots.tools.impute.fake_date_fill_old"]], "fft_fir_filter_to_timeseries() (in module autots.tools.fir_filter)": [[6, "autots.tools.fir_filter.fft_fir_filter_to_timeseries"]], "fill_forward() (in module autots.tools.impute)": [[6, "autots.tools.impute.fill_forward"]], "fill_forward_alt() (in module autots.tools.impute)": [[6, "autots.tools.impute.fill_forward_alt"]], "fill_mean() (in module autots.tools.impute)": [[6, "autots.tools.impute.fill_mean"]], "fill_mean_old() (in module autots.tools.impute)": [[6, "autots.tools.impute.fill_mean_old"]], "fill_median() (in module autots.tools.impute)": [[6, "autots.tools.impute.fill_median"]], "fill_median_old() (in module autots.tools.impute)": [[6, "autots.tools.impute.fill_median_old"]], "fill_na() (autots.tools.transform.generaltransformer method)": [[6, "autots.tools.transform.GeneralTransformer.fill_na"]], "fill_one() (in module autots.tools.impute)": [[6, "autots.tools.impute.fill_one"]], "fill_zero() (in module autots.tools.impute)": [[6, "autots.tools.impute.fill_zero"]], "fillna_np() (in module autots.tools.impute)": [[6, "autots.tools.impute.fillna_np"]], "filter() (autots.tools.transform.bkbandpassfilter method)": [[6, "autots.tools.transform.BKBandpassFilter.filter"]], "filter() (autots.tools.transform.firfilter method)": [[6, "autots.tools.transform.FIRFilter.filter"]], "find_centerpoint() (autots.tools.transform.alignlastvalue static method)": [[6, "autots.tools.transform.AlignLastValue.find_centerpoint"]], "find_epsilon() (autots.tools.thresholding.nonparametricthreshold method)": [[6, "autots.tools.thresholding.NonparametricThreshold.find_epsilon"]], "fit() (autots.tools.fft.fft method)": [[6, "autots.tools.fft.FFT.fit"]], "fit() (autots.tools.hierarchial.hierarchial method)": [[6, "autots.tools.hierarchial.hierarchial.fit"]], "fit() (autots.tools.shaping.numerictransformer method)": [[6, "autots.tools.shaping.NumericTransformer.fit"]], "fit() (autots.tools.transform.alignlastdiff method)": [[6, "autots.tools.transform.AlignLastDiff.fit"]], "fit() (autots.tools.transform.alignlastvalue method)": [[6, "autots.tools.transform.AlignLastValue.fit"]], "fit() (autots.tools.transform.anomalyremoval method)": [[6, "autots.tools.transform.AnomalyRemoval.fit"]], "fit() (autots.tools.transform.bkbandpassfilter method)": [[6, "autots.tools.transform.BKBandpassFilter.fit"]], "fit() (autots.tools.transform.btcd method)": [[6, "autots.tools.transform.BTCD.fit"]], "fit() (autots.tools.transform.centerlastvalue method)": [[6, "autots.tools.transform.CenterLastValue.fit"]], "fit() (autots.tools.transform.centersplit method)": [[6, "autots.tools.transform.CenterSplit.fit"]], "fit() (autots.tools.transform.changepointdetrend method)": [[6, "autots.tools.transform.ChangepointDetrend.fit"]], "fit() (autots.tools.transform.clipoutliers method)": [[6, "autots.tools.transform.ClipOutliers.fit"]], "fit() (autots.tools.transform.cointegration method)": [[6, "autots.tools.transform.Cointegration.fit"]], "fit() (autots.tools.transform.constraint method)": [[6, "autots.tools.transform.Constraint.fit"]], "fit() (autots.tools.transform.cumsumtransformer method)": [[6, "autots.tools.transform.CumSumTransformer.fit"]], "fit() (autots.tools.transform.datepartregressiontransformer method)": [[6, "autots.tools.transform.DatepartRegressionTransformer.fit"]], "fit() (autots.tools.transform.detrend method)": [[6, "autots.tools.transform.Detrend.fit"]], "fit() (autots.tools.transform.diffsmoother method)": [[6, "autots.tools.transform.DiffSmoother.fit"]], "fit() (autots.tools.transform.differencedtransformer method)": [[6, "autots.tools.transform.DifferencedTransformer.fit"]], "fit() (autots.tools.transform.discretize method)": [[6, "autots.tools.transform.Discretize.fit"]], "fit() (autots.tools.transform.emptytransformer method)": [[6, "autots.tools.transform.EmptyTransformer.fit"]], "fit() (autots.tools.transform.fftdecomposition method)": [[6, "autots.tools.transform.FFTDecomposition.fit"]], "fit() (autots.tools.transform.fftfilter method)": [[6, "autots.tools.transform.FFTFilter.fit"]], "fit() (autots.tools.transform.firfilter method)": [[6, "autots.tools.transform.FIRFilter.fit"]], "fit() (autots.tools.transform.fastica method)": [[6, "autots.tools.transform.FastICA.fit"]], "fit() (autots.tools.transform.generaltransformer method)": [[6, "autots.tools.transform.GeneralTransformer.fit"]], "fit() (autots.tools.transform.historicvalues method)": [[6, "autots.tools.transform.HistoricValues.fit"]], "fit() (autots.tools.transform.holidaytransformer method)": [[6, "autots.tools.transform.HolidayTransformer.fit"]], "fit() (autots.tools.transform.intermittentoccurrence method)": [[6, "autots.tools.transform.IntermittentOccurrence.fit"]], "fit() (autots.tools.transform.kalmansmoothing method)": [[6, "autots.tools.transform.KalmanSmoothing.fit"]], "fit() (autots.tools.transform.levelshiftmagic method)": [[6, "autots.tools.transform.LevelShiftMagic.fit"]], "fit() (autots.tools.transform.locallineartrend method)": [[6, "autots.tools.transform.LocalLinearTrend.fit"]], "fit() (autots.tools.transform.meandifference method)": [[6, "autots.tools.transform.MeanDifference.fit"]], "fit() (autots.tools.transform.meanpercentsplitter method)": [[6, "autots.tools.transform.MeanPercentSplitter.fit"]], "fit() (autots.tools.transform.pca method)": [[6, "autots.tools.transform.PCA.fit"]], "fit() (autots.tools.transform.pctchangetransformer method)": [[6, "autots.tools.transform.PctChangeTransformer.fit"]], "fit() (autots.tools.transform.positiveshift method)": [[6, "autots.tools.transform.PositiveShift.fit"]], "fit() (autots.tools.transform.regressionfilter method)": [[6, "autots.tools.transform.RegressionFilter.fit"]], "fit() (autots.tools.transform.replaceconstant method)": [[6, "autots.tools.transform.ReplaceConstant.fit"]], "fit() (autots.tools.transform.rollingmeantransformer method)": [[6, "autots.tools.transform.RollingMeanTransformer.fit"]], "fit() (autots.tools.transform.round method)": [[6, "autots.tools.transform.Round.fit"]], "fit() (autots.tools.transform.scipyfilter method)": [[6, "autots.tools.transform.ScipyFilter.fit"]], "fit() (autots.tools.transform.seasonaldifference method)": [[6, "autots.tools.transform.SeasonalDifference.fit"]], "fit() (autots.tools.transform.shiftfirstvalue method)": [[6, "autots.tools.transform.ShiftFirstValue.fit"]], "fit() (autots.tools.transform.sintrend method)": [[6, "autots.tools.transform.SinTrend.fit"]], "fit() (autots.tools.transform.slice method)": [[6, "autots.tools.transform.Slice.fit"]], "fit() (autots.tools.transform.standardscaler method)": [[6, "autots.tools.transform.StandardScaler.fit"]], "fit() (autots.tools.transform.thetatransformer method)": [[6, "autots.tools.transform.ThetaTransformer.fit"]], "fit_anomaly_classifier() (autots.tools.transform.anomalyremoval method)": [[6, "autots.tools.transform.AnomalyRemoval.fit_anomaly_classifier"]], "fit_constraint() (in module autots.tools.constraint)": [[6, "autots.tools.constraint.fit_constraint"]], "fit_sin() (autots.tools.transform.sintrend static method)": [[6, "autots.tools.transform.SinTrend.fit_sin"]], "fit_transform() (autots.tools.shaping.numerictransformer method)": [[6, "autots.tools.shaping.NumericTransformer.fit_transform"]], "fit_transform() (autots.tools.transform.alignlastdiff method)": [[6, "autots.tools.transform.AlignLastDiff.fit_transform"]], "fit_transform() (autots.tools.transform.alignlastvalue method)": [[6, "autots.tools.transform.AlignLastValue.fit_transform"]], "fit_transform() (autots.tools.transform.anomalyremoval method)": [[6, "autots.tools.transform.AnomalyRemoval.fit_transform"]], "fit_transform() (autots.tools.transform.bkbandpassfilter method)": [[6, "autots.tools.transform.BKBandpassFilter.fit_transform"]], "fit_transform() (autots.tools.transform.btcd method)": [[6, "autots.tools.transform.BTCD.fit_transform"]], "fit_transform() (autots.tools.transform.centerlastvalue method)": [[6, "autots.tools.transform.CenterLastValue.fit_transform"]], "fit_transform() (autots.tools.transform.centersplit method)": [[6, "autots.tools.transform.CenterSplit.fit_transform"]], "fit_transform() (autots.tools.transform.changepointdetrend method)": [[6, "autots.tools.transform.ChangepointDetrend.fit_transform"]], "fit_transform() (autots.tools.transform.clipoutliers method)": [[6, "autots.tools.transform.ClipOutliers.fit_transform"]], "fit_transform() (autots.tools.transform.cointegration method)": [[6, "autots.tools.transform.Cointegration.fit_transform"]], "fit_transform() (autots.tools.transform.constraint method)": [[6, "autots.tools.transform.Constraint.fit_transform"]], "fit_transform() (autots.tools.transform.cumsumtransformer method)": [[6, "autots.tools.transform.CumSumTransformer.fit_transform"]], "fit_transform() (autots.tools.transform.datepartregressiontransformer method)": [[6, "autots.tools.transform.DatepartRegressionTransformer.fit_transform"]], "fit_transform() (autots.tools.transform.detrend method)": [[6, "autots.tools.transform.Detrend.fit_transform"]], "fit_transform() (autots.tools.transform.diffsmoother method)": [[6, "autots.tools.transform.DiffSmoother.fit_transform"]], "fit_transform() (autots.tools.transform.differencedtransformer method)": [[6, "autots.tools.transform.DifferencedTransformer.fit_transform"]], "fit_transform() (autots.tools.transform.discretize method)": [[6, "autots.tools.transform.Discretize.fit_transform"]], "fit_transform() (autots.tools.transform.ewmafilter method)": [[6, "autots.tools.transform.EWMAFilter.fit_transform"]], "fit_transform() (autots.tools.transform.emptytransformer method)": [[6, "autots.tools.transform.EmptyTransformer.fit_transform"]], "fit_transform() (autots.tools.transform.fftdecomposition method)": [[6, "autots.tools.transform.FFTDecomposition.fit_transform"]], "fit_transform() (autots.tools.transform.fftfilter method)": [[6, "autots.tools.transform.FFTFilter.fit_transform"]], "fit_transform() (autots.tools.transform.firfilter method)": [[6, "autots.tools.transform.FIRFilter.fit_transform"]], "fit_transform() (autots.tools.transform.fastica method)": [[6, "autots.tools.transform.FastICA.fit_transform"]], "fit_transform() (autots.tools.transform.generaltransformer method)": [[6, "autots.tools.transform.GeneralTransformer.fit_transform"]], "fit_transform() (autots.tools.transform.hpfilter method)": [[6, "autots.tools.transform.HPFilter.fit_transform"]], "fit_transform() (autots.tools.transform.historicvalues method)": [[6, "autots.tools.transform.HistoricValues.fit_transform"]], "fit_transform() (autots.tools.transform.holidaytransformer method)": [[6, "autots.tools.transform.HolidayTransformer.fit_transform"]], "fit_transform() (autots.tools.transform.intermittentoccurrence method)": [[6, "autots.tools.transform.IntermittentOccurrence.fit_transform"]], "fit_transform() (autots.tools.transform.kalmansmoothing method)": [[6, "autots.tools.transform.KalmanSmoothing.fit_transform"]], "fit_transform() (autots.tools.transform.levelshiftmagic method)": [[6, "autots.tools.transform.LevelShiftMagic.fit_transform"]], "fit_transform() (autots.tools.transform.locallineartrend method)": [[6, "autots.tools.transform.LocalLinearTrend.fit_transform"]], "fit_transform() (autots.tools.transform.meandifference method)": [[6, "autots.tools.transform.MeanDifference.fit_transform"]], "fit_transform() (autots.tools.transform.meanpercentsplitter method)": [[6, "autots.tools.transform.MeanPercentSplitter.fit_transform"]], "fit_transform() (autots.tools.transform.pca method)": [[6, "autots.tools.transform.PCA.fit_transform"]], "fit_transform() (autots.tools.transform.pctchangetransformer method)": [[6, "autots.tools.transform.PctChangeTransformer.fit_transform"]], "fit_transform() (autots.tools.transform.positiveshift method)": [[6, "autots.tools.transform.PositiveShift.fit_transform"]], "fit_transform() (autots.tools.transform.regressionfilter method)": [[6, "autots.tools.transform.RegressionFilter.fit_transform"]], "fit_transform() (autots.tools.transform.replaceconstant method)": [[6, "autots.tools.transform.ReplaceConstant.fit_transform"]], "fit_transform() (autots.tools.transform.rollingmeantransformer method)": [[6, "autots.tools.transform.RollingMeanTransformer.fit_transform"]], "fit_transform() (autots.tools.transform.round method)": [[6, "autots.tools.transform.Round.fit_transform"]], "fit_transform() (autots.tools.transform.stlfilter method)": [[6, "autots.tools.transform.STLFilter.fit_transform"]], "fit_transform() (autots.tools.transform.scipyfilter method)": [[6, "autots.tools.transform.ScipyFilter.fit_transform"]], "fit_transform() (autots.tools.transform.seasonaldifference method)": [[6, "autots.tools.transform.SeasonalDifference.fit_transform"]], "fit_transform() (autots.tools.transform.shiftfirstvalue method)": [[6, "autots.tools.transform.ShiftFirstValue.fit_transform"]], "fit_transform() (autots.tools.transform.sintrend method)": [[6, "autots.tools.transform.SinTrend.fit_transform"]], "fit_transform() (autots.tools.transform.slice method)": [[6, "autots.tools.transform.Slice.fit_transform"]], "fit_transform() (autots.tools.transform.standardscaler method)": [[6, "autots.tools.transform.StandardScaler.fit_transform"]], "fit_transform() (autots.tools.transform.statsmodelsfilter method)": [[6, "autots.tools.transform.StatsmodelsFilter.fit_transform"]], "fit_transform() (autots.tools.transform.thetatransformer method)": [[6, "autots.tools.transform.ThetaTransformer.fit_transform"]], "fixangle() (in module autots.tools.lunar)": [[6, "autots.tools.lunar.fixangle"]], "fourier_df() (in module autots.tools.seasonal)": [[6, "autots.tools.seasonal.fourier_df"]], "fourier_extrapolation() (in module autots.tools.fft)": [[6, "autots.tools.fft.fourier_extrapolation"]], "fourier_series() (in module autots.tools.cointegration)": [[6, "autots.tools.cointegration.fourier_series"]], "fourier_series() (in module autots.tools.seasonal)": [[6, "autots.tools.seasonal.fourier_series"]], "freq_to_timedelta() (in module autots.tools.shaping)": [[6, "autots.tools.shaping.freq_to_timedelta"]], "gaussian_mixture() (in module autots.tools.anomaly_utils)": [[6, "autots.tools.anomaly_utils.gaussian_mixture"]], "generate_harmonics_dataframe() (autots.tools.fft.fft method)": [[6, "autots.tools.fft.FFT.generate_harmonics_dataframe"]], "generate_random_fir_params() (in module autots.tools.fir_filter)": [[6, "autots.tools.fir_filter.generate_random_fir_params"]], "get_new_params() (autots.tools.transform.alignlastdiff static method)": [[6, "autots.tools.transform.AlignLastDiff.get_new_params"]], "get_new_params() (autots.tools.transform.alignlastvalue static method)": [[6, "autots.tools.transform.AlignLastValue.get_new_params"]], "get_new_params() (autots.tools.transform.anomalyremoval static method)": [[6, "autots.tools.transform.AnomalyRemoval.get_new_params"]], "get_new_params() (autots.tools.transform.bkbandpassfilter static method)": [[6, "autots.tools.transform.BKBandpassFilter.get_new_params"]], "get_new_params() (autots.tools.transform.btcd static method)": [[6, "autots.tools.transform.BTCD.get_new_params"]], "get_new_params() (autots.tools.transform.centerlastvalue static method)": [[6, "autots.tools.transform.CenterLastValue.get_new_params"]], "get_new_params() (autots.tools.transform.centersplit static method)": [[6, "autots.tools.transform.CenterSplit.get_new_params"]], "get_new_params() (autots.tools.transform.changepointdetrend static method)": [[6, "autots.tools.transform.ChangepointDetrend.get_new_params"]], "get_new_params() (autots.tools.transform.clipoutliers static method)": [[6, "autots.tools.transform.ClipOutliers.get_new_params"]], "get_new_params() (autots.tools.transform.cointegration static method)": [[6, "autots.tools.transform.Cointegration.get_new_params"]], "get_new_params() (autots.tools.transform.constraint static method)": [[6, "autots.tools.transform.Constraint.get_new_params"]], "get_new_params() (autots.tools.transform.datepartregressiontransformer static method)": [[6, "autots.tools.transform.DatepartRegressionTransformer.get_new_params"]], "get_new_params() (autots.tools.transform.detrend static method)": [[6, "autots.tools.transform.Detrend.get_new_params"]], "get_new_params() (autots.tools.transform.diffsmoother static method)": [[6, "autots.tools.transform.DiffSmoother.get_new_params"]], "get_new_params() (autots.tools.transform.differencedtransformer static method)": [[6, "autots.tools.transform.DifferencedTransformer.get_new_params"]], "get_new_params() (autots.tools.transform.discretize static method)": [[6, "autots.tools.transform.Discretize.get_new_params"]], "get_new_params() (autots.tools.transform.ewmafilter static method)": [[6, "autots.tools.transform.EWMAFilter.get_new_params"]], "get_new_params() (autots.tools.transform.emptytransformer static method)": [[6, "autots.tools.transform.EmptyTransformer.get_new_params"]], "get_new_params() (autots.tools.transform.fftdecomposition static method)": [[6, "autots.tools.transform.FFTDecomposition.get_new_params"]], "get_new_params() (autots.tools.transform.fftfilter static method)": [[6, "autots.tools.transform.FFTFilter.get_new_params"]], "get_new_params() (autots.tools.transform.firfilter static method)": [[6, "autots.tools.transform.FIRFilter.get_new_params"]], "get_new_params() (autots.tools.transform.fastica static method)": [[6, "autots.tools.transform.FastICA.get_new_params"]], "get_new_params() (autots.tools.transform.generaltransformer static method)": [[6, "autots.tools.transform.GeneralTransformer.get_new_params"]], "get_new_params() (autots.tools.transform.hpfilter static method)": [[6, "autots.tools.transform.HPFilter.get_new_params"]], "get_new_params() (autots.tools.transform.historicvalues static method)": [[6, "autots.tools.transform.HistoricValues.get_new_params"]], "get_new_params() (autots.tools.transform.holidaytransformer static method)": [[6, "autots.tools.transform.HolidayTransformer.get_new_params"]], "get_new_params() (autots.tools.transform.intermittentoccurrence static method)": [[6, "autots.tools.transform.IntermittentOccurrence.get_new_params"]], "get_new_params() (autots.tools.transform.kalmansmoothing static method)": [[6, "autots.tools.transform.KalmanSmoothing.get_new_params"]], "get_new_params() (autots.tools.transform.levelshiftmagic static method)": [[6, "autots.tools.transform.LevelShiftMagic.get_new_params"]], "get_new_params() (autots.tools.transform.locallineartrend static method)": [[6, "autots.tools.transform.LocalLinearTrend.get_new_params"]], "get_new_params() (autots.tools.transform.meanpercentsplitter static method)": [[6, "autots.tools.transform.MeanPercentSplitter.get_new_params"]], "get_new_params() (autots.tools.transform.pca static method)": [[6, "autots.tools.transform.PCA.get_new_params"]], "get_new_params() (autots.tools.transform.regressionfilter static method)": [[6, "autots.tools.transform.RegressionFilter.get_new_params"]], "get_new_params() (autots.tools.transform.replaceconstant static method)": [[6, "autots.tools.transform.ReplaceConstant.get_new_params"]], "get_new_params() (autots.tools.transform.rollingmeantransformer static method)": [[6, "autots.tools.transform.RollingMeanTransformer.get_new_params"]], "get_new_params() (autots.tools.transform.round static method)": [[6, "autots.tools.transform.Round.get_new_params"]], "get_new_params() (autots.tools.transform.stlfilter static method)": [[6, "autots.tools.transform.STLFilter.get_new_params"]], "get_new_params() (autots.tools.transform.scipyfilter static method)": [[6, "autots.tools.transform.ScipyFilter.get_new_params"]], "get_new_params() (autots.tools.transform.seasonaldifference static method)": [[6, "autots.tools.transform.SeasonalDifference.get_new_params"]], "get_new_params() (autots.tools.transform.shiftfirstvalue static method)": [[6, "autots.tools.transform.ShiftFirstValue.get_new_params"]], "get_new_params() (autots.tools.transform.sintrend static method)": [[6, "autots.tools.transform.SinTrend.get_new_params"]], "get_new_params() (autots.tools.transform.slice static method)": [[6, "autots.tools.transform.Slice.get_new_params"]], "get_new_params() (autots.tools.transform.thetatransformer static method)": [[6, "autots.tools.transform.ThetaTransformer.get_new_params"]], "get_transformer_params() (in module autots.tools.transform)": [[6, "autots.tools.transform.get_transformer_params"]], "gregorian_to_chinese() (in module autots.tools.calendar)": [[6, "autots.tools.calendar.gregorian_to_chinese"]], "gregorian_to_christian_lunar() (in module autots.tools.calendar)": [[6, "autots.tools.calendar.gregorian_to_christian_lunar"]], "gregorian_to_hebrew() (in module autots.tools.calendar)": [[6, "autots.tools.calendar.gregorian_to_hebrew"]], "gregorian_to_hindu() (in module autots.tools.calendar)": [[6, "autots.tools.calendar.gregorian_to_hindu"]], "gregorian_to_islamic() (in module autots.tools.calendar)": [[6, "autots.tools.calendar.gregorian_to_islamic"]], "half_yr_spacing() (in module autots.tools.seasonal)": [[6, "autots.tools.seasonal.half_yr_spacing"]], "heb_is_leap() (in module autots.tools.calendar)": [[6, "autots.tools.calendar.heb_is_leap"]], "hierarchial (class in autots.tools.hierarchial)": [[6, "autots.tools.hierarchial.hierarchial"]], "historic_quantile() (in module autots.tools.probabilistic)": [[6, "autots.tools.probabilistic.historic_quantile"]], "holiday_flag() (in module autots.tools.holiday)": [[6, "autots.tools.holiday.holiday_flag"]], "holiday_new_params() (in module autots.tools.anomaly_utils)": [[6, "autots.tools.anomaly_utils.holiday_new_params"]], "holt_winters_damped_matrices() (in module autots.tools.fast_kalman)": [[6, "autots.tools.fast_kalman.holt_winters_damped_matrices"]], "impute() (autots.tools.impute.seasonalitymotifimputer method)": [[6, "autots.tools.impute.SeasonalityMotifImputer.impute"]], "impute() (autots.tools.impute.simpleseasonalitymotifimputer method)": [[6, "autots.tools.impute.SimpleSeasonalityMotifImputer.impute"]], "impute() (autots.tools.transform.datepartregressiontransformer method)": [[6, "autots.tools.transform.DatepartRegressionTransformer.impute"]], "infer_frequency() (in module autots.tools.shaping)": [[6, "autots.tools.shaping.infer_frequency"]], "inferred_normal() (in module autots.tools.probabilistic)": [[6, "autots.tools.probabilistic.inferred_normal"]], "inverse_transform() (autots.tools.shaping.numerictransformer method)": [[6, "autots.tools.shaping.NumericTransformer.inverse_transform"]], "inverse_transform() (autots.tools.transform.alignlastdiff method)": [[6, "autots.tools.transform.AlignLastDiff.inverse_transform"]], "inverse_transform() (autots.tools.transform.alignlastvalue method)": [[6, "autots.tools.transform.AlignLastValue.inverse_transform"]], "inverse_transform() (autots.tools.transform.anomalyremoval method)": [[6, "autots.tools.transform.AnomalyRemoval.inverse_transform"]], "inverse_transform() (autots.tools.transform.bkbandpassfilter method)": [[6, "autots.tools.transform.BKBandpassFilter.inverse_transform"]], "inverse_transform() (autots.tools.transform.btcd method)": [[6, "autots.tools.transform.BTCD.inverse_transform"]], "inverse_transform() (autots.tools.transform.centerlastvalue method)": [[6, "autots.tools.transform.CenterLastValue.inverse_transform"]], "inverse_transform() (autots.tools.transform.centersplit method)": [[6, "autots.tools.transform.CenterSplit.inverse_transform"]], "inverse_transform() (autots.tools.transform.changepointdetrend method)": [[6, "autots.tools.transform.ChangepointDetrend.inverse_transform"]], "inverse_transform() (autots.tools.transform.clipoutliers method)": [[6, "autots.tools.transform.ClipOutliers.inverse_transform"]], "inverse_transform() (autots.tools.transform.cointegration method)": [[6, "autots.tools.transform.Cointegration.inverse_transform"]], "inverse_transform() (autots.tools.transform.constraint method)": [[6, "autots.tools.transform.Constraint.inverse_transform"]], "inverse_transform() (autots.tools.transform.cumsumtransformer method)": [[6, "autots.tools.transform.CumSumTransformer.inverse_transform"]], "inverse_transform() (autots.tools.transform.datepartregressiontransformer method)": [[6, "autots.tools.transform.DatepartRegressionTransformer.inverse_transform"]], "inverse_transform() (autots.tools.transform.detrend method)": [[6, "autots.tools.transform.Detrend.inverse_transform"]], "inverse_transform() (autots.tools.transform.differencedtransformer method)": [[6, "autots.tools.transform.DifferencedTransformer.inverse_transform"]], "inverse_transform() (autots.tools.transform.discretize method)": [[6, "autots.tools.transform.Discretize.inverse_transform"]], "inverse_transform() (autots.tools.transform.emptytransformer method)": [[6, "autots.tools.transform.EmptyTransformer.inverse_transform"]], "inverse_transform() (autots.tools.transform.fftdecomposition method)": [[6, "autots.tools.transform.FFTDecomposition.inverse_transform"]], "inverse_transform() (autots.tools.transform.fftfilter method)": [[6, "autots.tools.transform.FFTFilter.inverse_transform"]], "inverse_transform() (autots.tools.transform.firfilter method)": [[6, "autots.tools.transform.FIRFilter.inverse_transform"]], "inverse_transform() (autots.tools.transform.fastica method)": [[6, "autots.tools.transform.FastICA.inverse_transform"]], "inverse_transform() (autots.tools.transform.generaltransformer method)": [[6, "autots.tools.transform.GeneralTransformer.inverse_transform"]], "inverse_transform() (autots.tools.transform.historicvalues method)": [[6, "autots.tools.transform.HistoricValues.inverse_transform"]], "inverse_transform() (autots.tools.transform.holidaytransformer method)": [[6, "autots.tools.transform.HolidayTransformer.inverse_transform"]], "inverse_transform() (autots.tools.transform.intermittentoccurrence method)": [[6, "autots.tools.transform.IntermittentOccurrence.inverse_transform"]], "inverse_transform() (autots.tools.transform.kalmansmoothing method)": [[6, "autots.tools.transform.KalmanSmoothing.inverse_transform"]], "inverse_transform() (autots.tools.transform.levelshiftmagic method)": [[6, "autots.tools.transform.LevelShiftMagic.inverse_transform"]], "inverse_transform() (autots.tools.transform.locallineartrend method)": [[6, "autots.tools.transform.LocalLinearTrend.inverse_transform"]], "inverse_transform() (autots.tools.transform.meandifference method)": [[6, "autots.tools.transform.MeanDifference.inverse_transform"]], "inverse_transform() (autots.tools.transform.meanpercentsplitter method)": [[6, "autots.tools.transform.MeanPercentSplitter.inverse_transform"]], "inverse_transform() (autots.tools.transform.pca method)": [[6, "autots.tools.transform.PCA.inverse_transform"]], "inverse_transform() (autots.tools.transform.pctchangetransformer method)": [[6, "autots.tools.transform.PctChangeTransformer.inverse_transform"]], "inverse_transform() (autots.tools.transform.positiveshift method)": [[6, "autots.tools.transform.PositiveShift.inverse_transform"]], "inverse_transform() (autots.tools.transform.regressionfilter method)": [[6, "autots.tools.transform.RegressionFilter.inverse_transform"]], "inverse_transform() (autots.tools.transform.replaceconstant method)": [[6, "autots.tools.transform.ReplaceConstant.inverse_transform"]], "inverse_transform() (autots.tools.transform.rollingmeantransformer method)": [[6, "autots.tools.transform.RollingMeanTransformer.inverse_transform"]], "inverse_transform() (autots.tools.transform.round method)": [[6, "autots.tools.transform.Round.inverse_transform"]], "inverse_transform() (autots.tools.transform.scipyfilter method)": [[6, "autots.tools.transform.ScipyFilter.inverse_transform"]], "inverse_transform() (autots.tools.transform.seasonaldifference method)": [[6, "autots.tools.transform.SeasonalDifference.inverse_transform"]], "inverse_transform() (autots.tools.transform.shiftfirstvalue method)": [[6, "autots.tools.transform.ShiftFirstValue.inverse_transform"]], "inverse_transform() (autots.tools.transform.sintrend method)": [[6, "autots.tools.transform.SinTrend.inverse_transform"]], "inverse_transform() (autots.tools.transform.slice method)": [[6, "autots.tools.transform.Slice.inverse_transform"]], "inverse_transform() (autots.tools.transform.standardscaler method)": [[6, "autots.tools.transform.StandardScaler.inverse_transform"]], "inverse_transform() (autots.tools.transform.thetatransformer method)": [[6, "autots.tools.transform.ThetaTransformer.inverse_transform"]], "kepler() (in module autots.tools.lunar)": [[6, "autots.tools.lunar.kepler"]], "lagmat() (in module autots.tools.cointegration)": [[6, "autots.tools.cointegration.lagmat"]], "last_window() (in module autots.tools.window_functions)": [[6, "autots.tools.window_functions.last_window"]], "limits_to_anomalies() (in module autots.tools.anomaly_utils)": [[6, "autots.tools.anomaly_utils.limits_to_anomalies"]], "long_to_wide() (in module autots.tools.shaping)": [[6, "autots.tools.shaping.long_to_wide"]], "loop_sk_outliers() (in module autots.tools.anomaly_utils)": [[6, "autots.tools.anomaly_utils.loop_sk_outliers"]], "lunar_from_lunar() (in module autots.tools.calendar)": [[6, "autots.tools.calendar.lunar_from_lunar"]], "lunar_from_lunar_full() (in module autots.tools.calendar)": [[6, "autots.tools.calendar.lunar_from_lunar_full"]], "moon_phase() (in module autots.tools.lunar)": [[6, "autots.tools.lunar.moon_phase"]], "moon_phase_df() (in module autots.tools.lunar)": [[6, "autots.tools.lunar.moon_phase_df"]], "nan_percentile() (in module autots.tools.percentile)": [[6, "autots.tools.percentile.nan_percentile"]], "nan_quantile() (in module autots.tools.percentile)": [[6, "autots.tools.percentile.nan_quantile"]], "new_kalman_params() (in module autots.tools.fast_kalman)": [[6, "autots.tools.fast_kalman.new_kalman_params"]], "nonparametric() (in module autots.tools.thresholding)": [[6, "autots.tools.thresholding.nonparametric"]], "nonparametric_multivariate() (in module autots.tools.anomaly_utils)": [[6, "autots.tools.anomaly_utils.nonparametric_multivariate"]], "np_2d_arange() (in module autots.tools.window_functions)": [[6, "autots.tools.window_functions.np_2d_arange"]], "offset_wavelet() (in module autots.tools.wavelet)": [[6, "autots.tools.wavelet.offset_wavelet"]], "percentileofscore_appliable() (in module autots.tools.probabilistic)": [[6, "autots.tools.probabilistic.percentileofscore_appliable"]], "phase_string() (in module autots.tools.lunar)": [[6, "autots.tools.lunar.phase_string"]], "predict() (autots.tools.fast_kalman.kalmanfilter method)": [[6, "autots.tools.fast_kalman.KalmanFilter.predict"]], "predict() (autots.tools.fft.fft method)": [[6, "autots.tools.fft.FFT.predict"]], "predict() (in module autots.tools.fast_kalman)": [[6, "autots.tools.fast_kalman.predict"]], "predict_next() (autots.tools.fast_kalman.kalmanfilter method)": [[6, "autots.tools.fast_kalman.KalmanFilter.predict_next"]], "predict_observation() (autots.tools.fast_kalman.kalmanfilter method)": [[6, "autots.tools.fast_kalman.KalmanFilter.predict_observation"]], "predict_observation() (in module autots.tools.fast_kalman)": [[6, "autots.tools.fast_kalman.predict_observation"]], "priv_smooth() (in module autots.tools.fast_kalman)": [[6, "autots.tools.fast_kalman.priv_smooth"]], "priv_update_with_nan_check() (in module autots.tools.fast_kalman)": [[6, "autots.tools.fast_kalman.priv_update_with_nan_check"]], "profile_time_series() (in module autots.tools.profile)": [[6, "autots.tools.profile.profile_time_series"]], "prune_anoms() (autots.tools.thresholding.nonparametricthreshold method)": [[6, "autots.tools.thresholding.NonparametricThreshold.prune_anoms"]], "query_holidays() (in module autots.tools.holiday)": [[6, "autots.tools.holiday.query_holidays"]], "random_cleaners() (in module autots.tools.transform)": [[6, "autots.tools.transform.random_cleaners"]], "random_datepart() (in module autots.tools.seasonal)": [[6, "autots.tools.seasonal.random_datepart"]], "random_matrix() (in module autots.tools.fast_kalman)": [[6, "autots.tools.fast_kalman.random_matrix"]], "random_state_space() (in module autots.tools.fast_kalman)": [[6, "autots.tools.fast_kalman.random_state_space"]], "random_state_space_original() (in module autots.tools.fast_kalman)": [[6, "autots.tools.fast_kalman.random_state_space_original"]], "reconcile() (autots.tools.hierarchial.hierarchial method)": [[6, "autots.tools.hierarchial.hierarchial.reconcile"]], "remove_outliers() (in module autots.tools.transform)": [[6, "autots.tools.transform.remove_outliers"]], "retrieve_closest_indices() (in module autots.tools.window_functions)": [[6, "autots.tools.window_functions.retrieve_closest_indices"]], "retrieve_transformer() (autots.tools.transform.generaltransformer class method)": [[6, "autots.tools.transform.GeneralTransformer.retrieve_transformer"]], "rolling_mean() (in module autots.tools.impute)": [[6, "autots.tools.impute.rolling_mean"]], "rolling_window_view() (in module autots.tools.window_functions)": [[6, "autots.tools.window_functions.rolling_window_view"]], "score_anomalies() (autots.tools.thresholding.nonparametricthreshold method)": [[6, "autots.tools.thresholding.NonparametricThreshold.score_anomalies"]], "score_to_anomaly() (autots.tools.transform.anomalyremoval method)": [[6, "autots.tools.transform.AnomalyRemoval.score_to_anomaly"]], "seasonal_independent_match() (in module autots.tools.seasonal)": [[6, "autots.tools.seasonal.seasonal_independent_match"]], "seasonal_int() (in module autots.tools.seasonal)": [[6, "autots.tools.seasonal.seasonal_int"]], "seasonal_repeating_wavelet() (in module autots.tools.seasonal)": [[6, "autots.tools.seasonal.seasonal_repeating_wavelet"]], "seasonal_window_match() (in module autots.tools.seasonal)": [[6, "autots.tools.seasonal.seasonal_window_match"]], "set_n_jobs() (in module autots.tools.cpu_count)": [[6, "autots.tools.cpu_count.set_n_jobs"]], "simple_context_slicer() (in module autots.tools.transform)": [[6, "autots.tools.transform.simple_context_slicer"]], "simple_train_test_split() (in module autots.tools.shaping)": [[6, "autots.tools.shaping.simple_train_test_split"]], "sk_outliers() (in module autots.tools.anomaly_utils)": [[6, "autots.tools.anomaly_utils.sk_outliers"]], "sliding_window_view() (in module autots.tools.window_functions)": [[6, "autots.tools.window_functions.sliding_window_view"]], "smooth() (autots.tools.fast_kalman.kalmanfilter method)": [[6, "autots.tools.fast_kalman.KalmanFilter.smooth"]], "smooth() (in module autots.tools.fast_kalman)": [[6, "autots.tools.fast_kalman.smooth"]], "smooth_current() (autots.tools.fast_kalman.kalmanfilter method)": [[6, "autots.tools.fast_kalman.KalmanFilter.smooth_current"]], "split_digits_and_non_digits() (in module autots.tools.shaping)": [[6, "autots.tools.shaping.split_digits_and_non_digits"]], "stable_pinv() (in module autots.tools.fast_kalman)": [[6, "autots.tools.fast_kalman.stable_pinv"]], "subset_series() (in module autots.tools.shaping)": [[6, "autots.tools.shaping.subset_series"]], "summarize_series() (in module autots.tools.profile)": [[6, "autots.tools.profile.summarize_series"]], "to_jd() (in module autots.tools.calendar)": [[6, "autots.tools.calendar.to_jd"]], "todeg() (in module autots.tools.lunar)": [[6, "autots.tools.lunar.todeg"]], "torad() (in module autots.tools.lunar)": [[6, "autots.tools.lunar.torad"]], "transform() (autots.tools.hierarchial.hierarchial method)": [[6, "autots.tools.hierarchial.hierarchial.transform"]], "transform() (autots.tools.shaping.numerictransformer method)": [[6, "autots.tools.shaping.NumericTransformer.transform"]], "transform() (autots.tools.transform.alignlastdiff method)": [[6, "autots.tools.transform.AlignLastDiff.transform"]], "transform() (autots.tools.transform.alignlastvalue method)": [[6, "autots.tools.transform.AlignLastValue.transform"]], "transform() (autots.tools.transform.anomalyremoval method)": [[6, "autots.tools.transform.AnomalyRemoval.transform"]], "transform() (autots.tools.transform.bkbandpassfilter method)": [[6, "autots.tools.transform.BKBandpassFilter.transform"]], "transform() (autots.tools.transform.btcd method)": [[6, "autots.tools.transform.BTCD.transform"]], "transform() (autots.tools.transform.centerlastvalue method)": [[6, "autots.tools.transform.CenterLastValue.transform"]], "transform() (autots.tools.transform.centersplit method)": [[6, "autots.tools.transform.CenterSplit.transform"]], "transform() (autots.tools.transform.changepointdetrend method)": [[6, "autots.tools.transform.ChangepointDetrend.transform"]], "transform() (autots.tools.transform.clipoutliers method)": [[6, "autots.tools.transform.ClipOutliers.transform"]], "transform() (autots.tools.transform.cointegration method)": [[6, "autots.tools.transform.Cointegration.transform"]], "transform() (autots.tools.transform.constraint method)": [[6, "autots.tools.transform.Constraint.transform"]], "transform() (autots.tools.transform.cumsumtransformer method)": [[6, "autots.tools.transform.CumSumTransformer.transform"]], "transform() (autots.tools.transform.datepartregressiontransformer method)": [[6, "autots.tools.transform.DatepartRegressionTransformer.transform"]], "transform() (autots.tools.transform.detrend method)": [[6, "autots.tools.transform.Detrend.transform"]], "transform() (autots.tools.transform.diffsmoother method)": [[6, "autots.tools.transform.DiffSmoother.transform"]], "transform() (autots.tools.transform.differencedtransformer method)": [[6, "autots.tools.transform.DifferencedTransformer.transform"]], "transform() (autots.tools.transform.discretize method)": [[6, "autots.tools.transform.Discretize.transform"]], "transform() (autots.tools.transform.ewmafilter method)": [[6, "autots.tools.transform.EWMAFilter.transform"]], "transform() (autots.tools.transform.emptytransformer method)": [[6, "autots.tools.transform.EmptyTransformer.transform"]], "transform() (autots.tools.transform.fftdecomposition method)": [[6, "autots.tools.transform.FFTDecomposition.transform"]], "transform() (autots.tools.transform.fftfilter method)": [[6, "autots.tools.transform.FFTFilter.transform"]], "transform() (autots.tools.transform.firfilter method)": [[6, "autots.tools.transform.FIRFilter.transform"]], "transform() (autots.tools.transform.fastica method)": [[6, "autots.tools.transform.FastICA.transform"]], "transform() (autots.tools.transform.generaltransformer method)": [[6, "autots.tools.transform.GeneralTransformer.transform"]], "transform() (autots.tools.transform.hpfilter method)": [[6, "autots.tools.transform.HPFilter.transform"]], "transform() (autots.tools.transform.historicvalues method)": [[6, "autots.tools.transform.HistoricValues.transform"]], "transform() (autots.tools.transform.holidaytransformer method)": [[6, "autots.tools.transform.HolidayTransformer.transform"]], "transform() (autots.tools.transform.intermittentoccurrence method)": [[6, "autots.tools.transform.IntermittentOccurrence.transform"]], "transform() (autots.tools.transform.kalmansmoothing method)": [[6, "autots.tools.transform.KalmanSmoothing.transform"]], "transform() (autots.tools.transform.levelshiftmagic method)": [[6, "autots.tools.transform.LevelShiftMagic.transform"]], "transform() (autots.tools.transform.locallineartrend method)": [[6, "autots.tools.transform.LocalLinearTrend.transform"]], "transform() (autots.tools.transform.meandifference method)": [[6, "autots.tools.transform.MeanDifference.transform"]], "transform() (autots.tools.transform.meanpercentsplitter method)": [[6, "autots.tools.transform.MeanPercentSplitter.transform"]], "transform() (autots.tools.transform.pca method)": [[6, "autots.tools.transform.PCA.transform"]], "transform() (autots.tools.transform.pctchangetransformer method)": [[6, "autots.tools.transform.PctChangeTransformer.transform"]], "transform() (autots.tools.transform.positiveshift method)": [[6, "autots.tools.transform.PositiveShift.transform"]], "transform() (autots.tools.transform.regressionfilter method)": [[6, "autots.tools.transform.RegressionFilter.transform"]], "transform() (autots.tools.transform.replaceconstant method)": [[6, "autots.tools.transform.ReplaceConstant.transform"]], "transform() (autots.tools.transform.rollingmeantransformer method)": [[6, "autots.tools.transform.RollingMeanTransformer.transform"]], "transform() (autots.tools.transform.round method)": [[6, "autots.tools.transform.Round.transform"]], "transform() (autots.tools.transform.stlfilter method)": [[6, "autots.tools.transform.STLFilter.transform"]], "transform() (autots.tools.transform.scipyfilter method)": [[6, "autots.tools.transform.ScipyFilter.transform"]], "transform() (autots.tools.transform.seasonaldifference method)": [[6, "autots.tools.transform.SeasonalDifference.transform"]], "transform() (autots.tools.transform.shiftfirstvalue method)": [[6, "autots.tools.transform.ShiftFirstValue.transform"]], "transform() (autots.tools.transform.sintrend method)": [[6, "autots.tools.transform.SinTrend.transform"]], "transform() (autots.tools.transform.slice method)": [[6, "autots.tools.transform.Slice.transform"]], "transform() (autots.tools.transform.standardscaler method)": [[6, "autots.tools.transform.StandardScaler.transform"]], "transform() (autots.tools.transform.statsmodelsfilter method)": [[6, "autots.tools.transform.StatsmodelsFilter.transform"]], "transform() (autots.tools.transform.thetatransformer method)": [[6, "autots.tools.transform.ThetaTransformer.transform"]], "transformer_list_to_dict() (in module autots.tools.transform)": [[6, "autots.tools.transform.transformer_list_to_dict"]], "trimmed_mean() (in module autots.tools.percentile)": [[6, "autots.tools.percentile.trimmed_mean"]], "unvectorize_state() (autots.tools.fast_kalman.gaussian method)": [[6, "autots.tools.fast_kalman.Gaussian.unvectorize_state"]], "unvectorize_vars() (autots.tools.fast_kalman.gaussian method)": [[6, "autots.tools.fast_kalman.Gaussian.unvectorize_vars"]], "update() (autots.tools.fast_kalman.kalmanfilter method)": [[6, "autots.tools.fast_kalman.KalmanFilter.update"]], "update() (in module autots.tools.fast_kalman)": [[6, "autots.tools.fast_kalman.update"]], "update_with_nan_check() (in module autots.tools.fast_kalman)": [[6, "autots.tools.fast_kalman.update_with_nan_check"]], "values_to_anomalies() (in module autots.tools.anomaly_utils)": [[6, "autots.tools.anomaly_utils.values_to_anomalies"]], "wide_to_3d() (in module autots.tools.shaping)": [[6, "autots.tools.shaping.wide_to_3d"]], "window_id_maker() (in module autots.tools.window_functions)": [[6, "autots.tools.window_functions.window_id_maker"]], "window_lin_reg() (in module autots.tools.window_functions)": [[6, "autots.tools.window_functions.window_lin_reg"]], "window_lin_reg_mean() (in module autots.tools.window_functions)": [[6, "autots.tools.window_functions.window_lin_reg_mean"]], "window_lin_reg_mean_no_nan() (in module autots.tools.window_functions)": [[6, "autots.tools.window_functions.window_lin_reg_mean_no_nan"]], "window_maker() (in module autots.tools.window_functions)": [[6, "autots.tools.window_functions.window_maker"]], "window_maker_2() (in module autots.tools.window_functions)": [[6, "autots.tools.window_functions.window_maker_2"]], "window_maker_3() (in module autots.tools.window_functions)": [[6, "autots.tools.window_functions.window_maker_3"]], "window_sum_mean() (in module autots.tools.window_functions)": [[6, "autots.tools.window_functions.window_sum_mean"]], "window_sum_mean_nan_tail() (in module autots.tools.window_functions)": [[6, "autots.tools.window_functions.window_sum_mean_nan_tail"]], "window_sum_nan_mean() (in module autots.tools.window_functions)": [[6, "autots.tools.window_functions.window_sum_nan_mean"]], "zscore_survival_function() (in module autots.tools.anomaly_utils)": [[6, "autots.tools.anomaly_utils.zscore_survival_function"]]}})